{
    "sourceFile": "src/components/MinesweeperGame.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 40,
            "patches": [
                {
                    "date": 1756285607768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756285684310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,273 +1,265 @@\n-'use client';\r\n-\r\n-import React, { useState, useEffect, useCallback } from 'react';\r\n-import { GameBoard } from './GameBoard';\r\n-import { GameControls } from './GameControls';\r\n-import { GameStats } from './GameStats';\r\n-\r\n-export interface Cell {\r\n-    id: string;\r\n-    row: number;\r\n-    col: number;\r\n-    isMine: boolean;\r\n-    isRevealed: boolean;\r\n-    isFlagged: boolean;\r\n-    neighborMines: number;\r\n-}\r\n-\r\n-export interface GameState {\r\n-    board: Cell[][];\r\n-    gameOver: boolean;\r\n-    gameWon: boolean;\r\n-    mineCount: number;\r\n-    flaggedCount: number;\r\n-    revealedCount: number;\r\n-    startTime: number | null;\r\n-    endTime: number | null;\r\n-    difficulty: 'beginner' | 'intermediate' | 'expert';\r\n-}\r\n-\r\n-const DIFFICULTY_CONFIGS = {\r\n-    beginner: { rows: 9, cols: 9, mines: 10 },\r\n-    intermediate: { rows: 16, cols: 16, mines: 40 },\r\n-    expert: { rows: 16, cols: 30, mines: 99 }\r\n-};\r\n-\r\n-// Helper functions moved outside component\r\n-const createBoard = (rows: number, cols: number, mines: number): Cell[][] => {\r\n-    const board: Cell[][] = [];\r\n-\r\n-    // Initialize empty board\r\n-    for (let row = 0; row < rows; row++) {\r\n-        board[row] = [];\r\n-        for (let col = 0; col < cols; col++) {\r\n-            board[row][col] = {\r\n-                id: `${row}-${col}`,\r\n-                row,\r\n-                col,\r\n-                isMine: false,\r\n-                isRevealed: false,\r\n-                isFlagged: false,\r\n-                neighborMines: 0\r\n-            };\r\n-        }\r\n-    }\r\n-\r\n-    // Place mines randomly\r\n-    let minesPlaced = 0;\r\n-    while (minesPlaced < mines) {\r\n-        const row = Math.floor(Math.random() * rows);\r\n-        const col = Math.floor(Math.random() * cols);\r\n-\r\n-        if (!board[row][col].isMine) {\r\n-            board[row][col].isMine = true;\r\n-            minesPlaced++;\r\n-        }\r\n-    }\r\n-\r\n-    // Calculate neighbor mines for each cell\r\n-    for (let row = 0; row < rows; row++) {\r\n-        for (let col = 0; col < cols; col++) {\r\n-            if (!board[row][col].isMine) {\r\n-                board[row][col].neighborMines = countNeighborMines(board, row, col);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    return board;\r\n-};\r\n-\r\n-const countNeighborMines = (board: Cell[][], row: number, col: number): number => {\r\n-    let count = 0;\r\n-    for (let r = Math.max(0, row - 1); r <= Math.min(board.length - 1, row + 1); r++) {\r\n-        for (let c = Math.max(0, col - 1); c <= Math.min(board[0].length - 1, col + 1); c++) {\r\n-            if (board[r][c].isMine) count++;\r\n-        }\r\n-    }\r\n-    return count;\r\n-};\r\n-\r\n-const initializeGame = (difficulty: 'beginner' | 'intermediate' | 'expert'): GameState => {\r\n-    const config = DIFFICULTY_CONFIGS[difficulty];\r\n-    const board = createBoard(config.rows, config.cols, config.mines);\r\n-\r\n-    return {\r\n-        board,\r\n-        gameOver: false,\r\n-        gameWon: false,\r\n-        mineCount: config.mines,\r\n-        flaggedCount: 0,\r\n-        revealedCount: 0,\r\n-        startTime: null,\r\n-        endTime: null,\r\n-        difficulty\r\n-    };\r\n-};\r\n-\r\n-export const MinesweeperGame: React.FC = () => {\r\n-    const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\r\n-\r\n-    const handleCellClick = useCallback((row: number, col: number) => {\r\n-        if (gameState.gameOver || gameState.gameWon) return;\r\n-\r\n-        setGameState(prev => {\r\n-            const newBoard = [...prev.board];\r\n-            const cell = newBoard[row][col];\r\n-\r\n-            if (cell.isFlagged || cell.isRevealed) return prev;\r\n-\r\n-            // Start timer on first click\r\n-            if (prev.startTime === null) {\r\n-                return {\r\n-                    ...prev,\r\n-                    startTime: Date.now()\r\n-                };\r\n-            }\r\n-\r\n-            if (cell.isMine) {\r\n-                // Game over - reveal all mines\r\n-                revealAllMines(newBoard);\r\n-                return {\r\n-                    ...prev,\r\n-                    board: newBoard,\r\n-                    gameOver: true,\r\n-                    endTime: Date.now()\r\n-                };\r\n-            }\r\n-\r\n-            // Reveal cell and neighbors if no adjacent mines\r\n-            const newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\r\n-\r\n-            // Check if game is won\r\n-            const totalCells = newBoard.length * newBoard[0].length;\r\n-            const gameWon = newRevealedCount === totalCells - prev.mineCount;\r\n-\r\n-            return {\r\n-                ...prev,\r\n-                board: newBoard,\r\n-                revealedCount: newRevealedCount,\r\n-                gameWon,\r\n-                endTime: gameWon ? Date.now() : null\r\n-            };\r\n-        });\r\n-    }, [gameState.gameOver, gameState.gameWon, gameState.startTime]);\r\n-\r\n-    const handleRightClick = useCallback((row: number, col: number) => {\r\n-        if (gameState.gameOver || gameState.gameWon) return;\r\n-\r\n-        setGameState(prev => {\r\n-            const newBoard = [...prev.board];\r\n-            const cell = newBoard[row][col];\r\n-\r\n-            if (cell.isRevealed) return prev;\r\n-\r\n-            const newFlaggedCount = prev.flaggedCount + (cell.isFlagged ? -1 : 1);\r\n-            newBoard[row][col] = { ...cell, isFlagged: !cell.isFlagged };\r\n-\r\n-            return {\r\n-                ...prev,\r\n-                board: newBoard,\r\n-                flaggedCount: newFlaggedCount\r\n-            };\r\n-        });\r\n-    }, [gameState.gameOver, gameState.gameWon]);\r\n-\r\n-    const revealAllMines = (board: Cell[][]) => {\r\n-        for (let row = 0; row < board.length; row++) {\r\n-            for (let col = 0; col < board[0].length; col++) {\r\n-                if (board[row][col].isMine) {\r\n-                    board[row][col].isRevealed = true;\r\n-                }\r\n-            }\r\n-        }\r\n-    };\r\n-\r\n-    const revealCellAndNeighbors = (board: Cell[][], row: number, col: number): number => {\r\n-        const cell = board[row][col];\r\n-        if (cell.isRevealed || cell.isFlagged) return 0;\r\n-\r\n-        let revealedCount = 0;\r\n-        const queue = [{ row, col }];\r\n-        const visited = new Set<string>();\r\n-\r\n-        while (queue.length > 0) {\r\n-            const { row: r, col: c } = queue.shift()!;\r\n-            const currentCell = board[r][c];\r\n-            const cellKey = `${r}-${c}`;\r\n-\r\n-            if (currentCell.isRevealed || currentCell.isFlagged || visited.has(cellKey)) continue;\r\n-\r\n-            visited.add(cellKey);\r\n-            currentCell.isRevealed = true;\r\n-            revealedCount++;\r\n-\r\n-            // If this cell has no adjacent mines, reveal all its neighbors\r\n-            if (currentCell.neighborMines === 0) {\r\n-                // Check all 8 adjacent cells (including diagonals)\r\n-                for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\r\n-                    for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\r\n-                        const neighborKey = `${nr}-${nc}`;\r\n-                        const neighbor = board[nr][nc];\r\n-\r\n-                        // Only add unvisited, unrevealed, unflagged neighbors to the queue\r\n-                        if (!neighbor.isRevealed && !neighbor.isFlagged && !visited.has(neighborKey)) {\r\n-                            queue.push({ row: nr, col: nc });\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        return revealedCount;\r\n-    };\r\n-\r\n-    const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\r\n-        setGameState(initializeGame(difficulty));\r\n-    };\r\n-\r\n-    const handleResetGame = () => {\r\n-        setGameState(initializeGame(gameState.difficulty));\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\r\n-            <GameControls\r\n-                onNewGame={handleNewGame}\r\n-                onResetGame={handleResetGame}\r\n-                currentDifficulty={gameState.difficulty}\r\n-            />\r\n-\r\n-            <GameStats\r\n-                mineCount={gameState.mineCount}\r\n-                flaggedCount={gameState.flaggedCount}\r\n-                startTime={gameState.startTime}\r\n-                endTime={gameState.endTime}\r\n-                gameOver={gameState.gameOver}\r\n-                gameWon={gameState.gameWon}\r\n-            />\r\n-\r\n-            <GameBoard\r\n-                board={gameState.board}\r\n-                onCellClick={handleCellClick}\r\n-                onRightClick={handleRightClick}\r\n-                gameOver={gameState.gameOver}\r\n-                gameWon={gameState.gameWon}\r\n-            />\r\n-\r\n-            {(gameState.gameOver || gameState.gameWon) && (\r\n-                <div className=\"mt-6 text-center\">\r\n-                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\r\n-                        }`}>\r\n-                        {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\r\n-                    </div>\r\n-                    <button\r\n-                        onClick={handleResetGame}\r\n-                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\r\n-                    >\r\n-                        Play Again\r\n-                    </button>\r\n-                </div>\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n+'use client';\n+\n+import React, { useState, useEffect, useCallback } from 'react';\n+import { GameBoard } from './GameBoard';\n+import { GameControls } from './GameControls';\n+import { GameStats } from './GameStats';\n+\n+export interface Cell {\n+    id: string;\n+    row: number;\n+    col: number;\n+    isMine: boolean;\n+    isRevealed: boolean;\n+    isFlagged: boolean;\n+    neighborMines: number;\n+}\n+\n+export interface GameState {\n+    board: Cell[][];\n+    gameOver: boolean;\n+    gameWon: boolean;\n+    mineCount: number;\n+    flaggedCount: number;\n+    revealedCount: number;\n+    startTime: number | null;\n+    endTime: number | null;\n+    difficulty: 'beginner' | 'intermediate' | 'expert';\n+}\n+\n+const DIFFICULTY_CONFIGS = {\n+    beginner: { rows: 9, cols: 9, mines: 10 },\n+    intermediate: { rows: 16, cols: 16, mines: 40 },\n+    expert: { rows: 16, cols: 30, mines: 99 }\n+};\n+\n+// Helper functions moved outside component\n+const createBoard = (rows: number, cols: number, mines: number): Cell[][] => {\n+    const board: Cell[][] = [];\n+\n+    // Initialize empty board\n+    for (let row = 0; row < rows; row++) {\n+        board[row] = [];\n+        for (let col = 0; col < cols; col++) {\n+            board[row][col] = {\n+                id: `${row}-${col}`,\n+                row,\n+                col,\n+                isMine: false,\n+                isRevealed: false,\n+                isFlagged: false,\n+                neighborMines: 0\n+            };\n+        }\n+    }\n+\n+    // Place mines randomly\n+    let minesPlaced = 0;\n+    while (minesPlaced < mines) {\n+        const row = Math.floor(Math.random() * rows);\n+        const col = Math.floor(Math.random() * cols);\n+\n+        if (!board[row][col].isMine) {\n+            board[row][col].isMine = true;\n+            minesPlaced++;\n+        }\n+    }\n+\n+    // Calculate neighbor mines for each cell\n+    for (let row = 0; row < rows; row++) {\n+        for (let col = 0; col < cols; col++) {\n+            if (!board[row][col].isMine) {\n+                board[row][col].neighborMines = countNeighborMines(board, row, col);\n+            }\n+        }\n+    }\n+\n+    return board;\n+};\n+\n+const countNeighborMines = (board: Cell[][], row: number, col: number): number => {\n+    let count = 0;\n+    for (let r = Math.max(0, row - 1); r <= Math.min(board.length - 1, row + 1); r++) {\n+        for (let c = Math.max(0, col - 1); c <= Math.min(board[0].length - 1, col + 1); c++) {\n+            if (board[r][c].isMine) count++;\n+        }\n+    }\n+    return count;\n+};\n+\n+const initializeGame = (difficulty: 'beginner' | 'intermediate' | 'expert'): GameState => {\n+    const config = DIFFICULTY_CONFIGS[difficulty];\n+    const board = createBoard(config.rows, config.cols, config.mines);\n+\n+    return {\n+        board,\n+        gameOver: false,\n+        gameWon: false,\n+        mineCount: config.mines,\n+        flaggedCount: 0,\n+        revealedCount: 0,\n+        startTime: null,\n+        endTime: null,\n+        difficulty\n+    };\n+};\n+\n+export const MinesweeperGame: React.FC = () => {\n+    const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n+\n+    const handleCellClick = useCallback((row: number, col: number) => {\n+        if (gameState.gameOver || gameState.gameWon) return;\n+\n+        setGameState(prev => {\n+            const newBoard = [...prev.board];\n+            const cell = newBoard[row][col];\n+\n+            if (cell.isFlagged || cell.isRevealed) return prev;\n+\n+            // Start timer on first click\n+            if (prev.startTime === null) {\n+                return {\n+                    ...prev,\n+                    startTime: Date.now()\n+                };\n+            }\n+\n+            if (cell.isMine) {\n+                // Game over - reveal all mines\n+                revealAllMines(newBoard);\n+                return {\n+                    ...prev,\n+                    board: newBoard,\n+                    gameOver: true,\n+                    endTime: Date.now()\n+                };\n+            }\n+\n+            // Reveal cell and neighbors if no adjacent mines\n+            const newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n+\n+            // Check if game is won\n+            const totalCells = newBoard.length * newBoard[0].length;\n+            const gameWon = newRevealedCount === totalCells - prev.mineCount;\n+\n+            return {\n+                ...prev,\n+                board: newBoard,\n+                revealedCount: newRevealedCount,\n+                gameWon,\n+                endTime: gameWon ? Date.now() : null\n+            };\n+        });\n+    }, [gameState.gameOver, gameState.gameWon, gameState.startTime]);\n+\n+    const handleRightClick = useCallback((row: number, col: number) => {\n+        if (gameState.gameOver || gameState.gameWon) return;\n+\n+        setGameState(prev => {\n+            const newBoard = [...prev.board];\n+            const cell = newBoard[row][col];\n+\n+            if (cell.isRevealed) return prev;\n+\n+            const newFlaggedCount = prev.flaggedCount + (cell.isFlagged ? -1 : 1);\n+            newBoard[row][col] = { ...cell, isFlagged: !cell.isFlagged };\n+\n+            return {\n+                ...prev,\n+                board: newBoard,\n+                flaggedCount: newFlaggedCount\n+            };\n+        });\n+    }, [gameState.gameOver, gameState.gameWon]);\n+\n+    const revealAllMines = (board: Cell[][]) => {\n+        for (let row = 0; row < board.length; row++) {\n+            for (let col = 0; col < board[0].length; col++) {\n+                if (board[row][col].isMine) {\n+                    board[row][col].isRevealed = true;\n+                }\n+            }\n+        }\n+    };\n+\n+    const revealCellAndNeighbors = (board: Cell[][], row: number, col: number): number => {\n+        const cell = board[row][col];\n+        if (cell.isRevealed || cell.isFlagged) return 0;\n+\n+        let revealedCount = 0;\n+        const stack = [{ row, col }];\n+\n+        while (stack.length > 0) {\n+            const { row: r, col: c } = stack.pop()!;\n+            const currentCell = board[r][c];\n+\n+            if (currentCell.isRevealed || currentCell.isFlagged) continue;\n+\n+            currentCell.isRevealed = true;\n+            revealedCount++;\n+\n+            if (currentCell.neighborMines === 0) {\n+                // Reveal neighbors if no adjacent mines\n+                for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\n+                    for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\n+                        if (!board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n+                            stack.push({ row: nr, col: nc });\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return revealedCount;\n+    };\n+\n+    const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\n+        setGameState(initializeGame(difficulty));\n+    };\n+\n+    const handleResetGame = () => {\n+        setGameState(initializeGame(gameState.difficulty));\n+    };\n+\n+    return (\n+        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n+            <GameControls\n+                onNewGame={handleNewGame}\n+                onResetGame={handleResetGame}\n+                currentDifficulty={gameState.difficulty}\n+            />\n+\n+            <GameStats\n+                mineCount={gameState.mineCount}\n+                flaggedCount={gameState.flaggedCount}\n+                startTime={gameState.startTime}\n+                endTime={gameState.endTime}\n+                gameOver={gameState.gameOver}\n+                gameWon={gameState.gameWon}\n+            />\n+\n+            <GameBoard\n+                board={gameState.board}\n+                onCellClick={handleCellClick}\n+                onRightClick={handleRightClick}\n+                gameOver={gameState.gameOver}\n+                gameWon={gameState.gameWon}\n+            />\n+\n+            {(gameState.gameOver || gameState.gameWon) && (\n+                <div className=\"mt-6 text-center\">\n+                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n+                        }`}>\n+                        {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n+                    </div>\n+                    <button\n+                        onClick={handleResetGame}\n+                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n+                    >\n+                        Play Again\n+                    </button>\n+                </div>\n+            )}\n+        </div>\n+    );\n+};\n"
                },
                {
                    "date": 1756286397343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,10 @@\n \n     const handleRightClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n+        console.log('Right click on cell:', row, col, 'Current flagged:', gameState.board[row][col].isFlagged);\n+\n         setGameState(prev => {\n             const newBoard = [...prev.board];\n             const cell = newBoard[row][col];\n \n@@ -163,15 +165,17 @@\n \n             const newFlaggedCount = prev.flaggedCount + (cell.isFlagged ? -1 : 1);\n             newBoard[row][col] = { ...cell, isFlagged: !cell.isFlagged };\n \n+            console.log('New flagged count:', newFlaggedCount, 'Cell flagged:', newBoard[row][col].isFlagged);\n+\n             return {\n                 ...prev,\n                 board: newBoard,\n                 flaggedCount: newFlaggedCount\n             };\n         });\n-    }, [gameState.gameOver, gameState.gameWon]);\n+    }, [gameState.gameOver, gameState.gameWon, gameState.board]);\n \n     const revealAllMines = (board: Cell[][]) => {\n         for (let row = 0; row < board.length; row++) {\n             for (let col = 0; col < board[0].length; col++) {\n"
                },
                {
                    "date": 1756286519786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,15 @@\n \n export const MinesweeperGame: React.FC = () => {\n     const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n \n+    // Debug: Monitor board changes\n+    useEffect(() => {\n+        console.log('Board state changed:', gameState.board.map(row =>\n+            row.map(cell => ({ flagged: cell.isFlagged, revealed: cell.isRevealed }))\n+        ));\n+    }, [gameState.board]);\n+\n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n         setGameState(prev => {\n@@ -157,9 +164,9 @@\n \n         console.log('Right click on cell:', row, col, 'Current flagged:', gameState.board[row][col].isFlagged);\n \n         setGameState(prev => {\n-            const newBoard = [...prev.board];\n+            const newBoard = prev.board.map(row => [...row]);\n             const cell = newBoard[row][col];\n \n             if (cell.isRevealed) return prev;\n \n@@ -173,9 +180,9 @@\n                 board: newBoard,\n                 flaggedCount: newFlaggedCount\n             };\n         });\n-    }, [gameState.gameOver, gameState.gameWon, gameState.board]);\n+    }, [gameState.gameOver, gameState.gameWon]);\n \n     const revealAllMines = (board: Cell[][]) => {\n         for (let row = 0; row < board.length; row++) {\n             for (let col = 0; col < board[0].length; col++) {\n"
                },
                {
                    "date": 1756286685544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,15 +106,10 @@\n \n export const MinesweeperGame: React.FC = () => {\n     const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n \n-    // Debug: Monitor board changes\n-    useEffect(() => {\n-        console.log('Board state changed:', gameState.board.map(row =>\n-            row.map(cell => ({ flagged: cell.isFlagged, revealed: cell.isRevealed }))\n-        ));\n-    }, [gameState.board]);\n \n+\n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n         setGameState(prev => {\n@@ -161,10 +156,10 @@\n \n     const handleRightClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n-        console.log('Right click on cell:', row, col, 'Current flagged:', gameState.board[row][col].isFlagged);\n \n+\n         setGameState(prev => {\n             const newBoard = prev.board.map(row => [...row]);\n             const cell = newBoard[row][col];\n \n@@ -172,10 +167,10 @@\n \n             const newFlaggedCount = prev.flaggedCount + (cell.isFlagged ? -1 : 1);\n             newBoard[row][col] = { ...cell, isFlagged: !cell.isFlagged };\n \n-            console.log('New flagged count:', newFlaggedCount, 'Cell flagged:', newBoard[row][col].isFlagged);\n \n+\n             return {\n                 ...prev,\n                 board: newBoard,\n                 flaggedCount: newFlaggedCount\n"
                },
                {
                    "date": 1756287796600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,11 +180,10 @@\n \n     const revealAllMines = (board: Cell[][]) => {\n         for (let row = 0; row < board.length; row++) {\n             for (let col = 0; col < board[0].length; col++) {\n-                if (board[row][col].isMine) {\n-                    board[row][col].isRevealed = true;\n-                }\n+                // Reveal ALL cells when game is over\n+                board[row][col].isRevealed = true;\n             }\n         }\n     };\n \n"
                },
                {
                    "date": 1756288201267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,12 +119,11 @@\n             if (cell.isFlagged || cell.isRevealed) return prev;\n \n             // Start timer on first click\n             if (prev.startTime === null) {\n-                return {\n-                    ...prev,\n-                    startTime: Date.now()\n-                };\n+                // Don't return early - continue to reveal the cell\n+                // Just update the start time\n+                prev.startTime = Date.now();\n             }\n \n             if (cell.isMine) {\n                 // Game over - reveal all mines\n@@ -202,10 +201,10 @@\n \n             currentCell.isRevealed = true;\n             revealedCount++;\n \n+            // If this cell has no neighbor mines, reveal all its neighbors\n             if (currentCell.neighborMines === 0) {\n-                // Reveal neighbors if no adjacent mines\n                 for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\n                     for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\n                         if (!board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                             stack.push({ row: nr, col: nc });\n"
                },
                {
                    "date": 1756288558365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,11 +119,12 @@\n             if (cell.isFlagged || cell.isRevealed) return prev;\n \n             // Start timer on first click\n             if (prev.startTime === null) {\n-                // Don't return early - continue to reveal the cell\n-                // Just update the start time\n-                prev.startTime = Date.now();\n+                return {\n+                    ...prev,\n+                    startTime: Date.now()\n+                };\n             }\n \n             if (cell.isMine) {\n                 // Game over - reveal all mines\n@@ -135,11 +136,17 @@\n                     endTime: Date.now()\n                 };\n             }\n \n-            // Reveal cell and neighbors if no adjacent mines\n-            const newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n+            // Reveal the clicked cell\n+            cell.isRevealed = true;\n+            let newRevealedCount = prev.revealedCount + 1;\n \n+            // If this cell has no neighbor mines, cascade reveal neighbors\n+            if (cell.neighborMines === 0) {\n+                newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n+            }\n+\n             // Check if game is won\n             const totalCells = newBoard.length * newBoard[0].length;\n             const gameWon = newRevealedCount === totalCells - prev.mineCount;\n \n@@ -186,13 +193,20 @@\n         }\n     };\n \n     const revealCellAndNeighbors = (board: Cell[][], row: number, col: number): number => {\n-        const cell = board[row][col];\n-        if (cell.isRevealed || cell.isFlagged) return 0;\n+        // Start with the neighbors of the clicked cell (which is already revealed)\n+        let revealedCount = 1; // Start with 1 since the clicked cell is already revealed\n+        const stack: { row: number; col: number }[] = [];\n \n-        let revealedCount = 0;\n-        const stack = [{ row, col }];\n+        // Add all neighbors to the stack initially\n+        for (let r = Math.max(0, row - 1); r <= Math.min(board.length - 1, row + 1); r++) {\n+            for (let c = Math.max(0, col - 1); c <= Math.min(board[0].length - 1, col + 1); c++) {\n+                if (!board[r][c].isRevealed && !board[r][c].isFlagged) {\n+                    stack.push({ row: r, col: c });\n+                }\n+            }\n+        }\n \n         while (stack.length > 0) {\n             const { row: r, col: c } = stack.pop()!;\n             const currentCell = board[r][c];\n@@ -201,11 +215,11 @@\n \n             currentCell.isRevealed = true;\n             revealedCount++;\n \n-            // If this cell has no neighbor mines, reveal all its neighbors\n+            // If this neighbor also has no mines, add its neighbors to the stack\n             if (currentCell.neighborMines === 0) {\n-                for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\n+                for (let nr = Math.max(0, r - 1); nr <= Math.min(board[0].length - 1, r + 1); nr++) {\n                     for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\n                         if (!board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                             stack.push({ row: nr, col: nc });\n                         }\n"
                },
                {
                    "date": 1756288634425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n                     endTime: Date.now()\n                 };\n             }\n \n-            // Reveal the clicked cell\n+            // Always reveal the clicked cell first\n             cell.isRevealed = true;\n             let newRevealedCount = prev.revealedCount + 1;\n \n             // If this cell has no neighbor mines, cascade reveal neighbors\n@@ -215,11 +215,11 @@\n \n             currentCell.isRevealed = true;\n             revealedCount++;\n \n-            // If this neighbor also has no mines, add its neighbors to the stack\n             if (currentCell.neighborMines === 0) {\n-                for (let nr = Math.max(0, r - 1); nr <= Math.min(board[0].length - 1, r + 1); nr++) {\n+                // Reveal neighbors if no adjacent mines\n+                for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\n                     for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\n                         if (!board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n                             stack.push({ row: nr, col: nc });\n                         }\n"
                },
                {
                    "date": 1756288816827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,12 +140,13 @@\n             // Always reveal the clicked cell first\n             cell.isRevealed = true;\n             let newRevealedCount = prev.revealedCount + 1;\n \n-            // If this cell has no neighbor mines, cascade reveal neighbors\n+            // Only cascade reveal if this cell has no neighbor mines\n             if (cell.neighborMines === 0) {\n                 newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n             }\n+            // If it's a numbered cell, we're done - just the clicked cell is revealed\n \n             // Check if game is won\n             const totalCells = newBoard.length * newBoard[0].length;\n             const gameWon = newRevealedCount === totalCells - prev.mineCount;\n"
                },
                {
                    "date": 1756288891606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,45 +117,36 @@\n             const cell = newBoard[row][col];\n \n             if (cell.isFlagged || cell.isRevealed) return prev;\n \n-            // Start timer on first click\n-            if (prev.startTime === null) {\n-                return {\n-                    ...prev,\n-                    startTime: Date.now()\n-                };\n-            }\n+            // Start timer on first click but continue with the reveal\n+            const startTime = prev.startTime === null ? Date.now() : prev.startTime;\n \n             if (cell.isMine) {\n                 // Game over - reveal all mines\n                 revealAllMines(newBoard);\n                 return {\n                     ...prev,\n                     board: newBoard,\n                     gameOver: true,\n+                    startTime: startTime,\n                     endTime: Date.now()\n                 };\n             }\n \n-            // Always reveal the clicked cell first\n-            cell.isRevealed = true;\n-            let newRevealedCount = prev.revealedCount + 1;\n+            // Reveal cell and neighbors if no adjacent mines\n+            const newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n \n-            // Only cascade reveal if this cell has no neighbor mines\n-            if (cell.neighborMines === 0) {\n-                newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n-            }\n-            // If it's a numbered cell, we're done - just the clicked cell is revealed\n-\n             // Check if game is won\n             const totalCells = newBoard.length * newBoard[0].length;\n-            const gameWon = newRevealedCount === totalCells - prev.mineCount;\n+            const totalRevealed = prev.revealedCount + newRevealedCount;\n+            const gameWon = totalRevealed === totalCells - prev.mineCount;\n \n             return {\n                 ...prev,\n                 board: newBoard,\n-                revealedCount: newRevealedCount,\n+                startTime: startTime,\n+                revealedCount: prev.revealedCount + newRevealedCount,\n                 gameWon,\n                 endTime: gameWon ? Date.now() : null\n             };\n         });\n@@ -194,20 +185,13 @@\n         }\n     };\n \n     const revealCellAndNeighbors = (board: Cell[][], row: number, col: number): number => {\n-        // Start with the neighbors of the clicked cell (which is already revealed)\n-        let revealedCount = 1; // Start with 1 since the clicked cell is already revealed\n-        const stack: { row: number; col: number }[] = [];\n+        const cell = board[row][col];\n+        if (cell.isRevealed || cell.isFlagged) return 0;\n \n-        // Add all neighbors to the stack initially\n-        for (let r = Math.max(0, row - 1); r <= Math.min(board.length - 1, row + 1); r++) {\n-            for (let c = Math.max(0, col - 1); c <= Math.min(board[0].length - 1, col + 1); c++) {\n-                if (!board[r][c].isRevealed && !board[r][c].isFlagged) {\n-                    stack.push({ row: r, col: c });\n-                }\n-            }\n-        }\n+        let revealedCount = 0;\n+        const stack = [{ row, col }];\n \n         while (stack.length > 0) {\n             const { row: r, col: c } = stack.pop()!;\n             const currentCell = board[r][c];\n"
                },
                {
                    "date": 1756291220089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n             const cell = newBoard[row][col];\n \n             if (cell.isFlagged || cell.isRevealed) return prev;\n \n-            // Start timer on first click but continue with the reveal\n+            // Start timer on first click if not already started\n             const startTime = prev.startTime === null ? Date.now() : prev.startTime;\n \n             if (cell.isMine) {\n                 // Game over - reveal all mines\n@@ -127,9 +127,9 @@\n                 return {\n                     ...prev,\n                     board: newBoard,\n                     gameOver: true,\n-                    startTime: startTime,\n+                    startTime,\n                     endTime: Date.now()\n                 };\n             }\n \n@@ -137,21 +137,20 @@\n             const newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n \n             // Check if game is won\n             const totalCells = newBoard.length * newBoard[0].length;\n-            const totalRevealed = prev.revealedCount + newRevealedCount;\n-            const gameWon = totalRevealed === totalCells - prev.mineCount;\n+            const gameWon = prev.revealedCount + newRevealedCount === totalCells - prev.mineCount;\n \n             return {\n                 ...prev,\n                 board: newBoard,\n-                startTime: startTime,\n                 revealedCount: prev.revealedCount + newRevealedCount,\n                 gameWon,\n+                startTime,\n                 endTime: gameWon ? Date.now() : null\n             };\n         });\n-    }, [gameState.gameOver, gameState.gameWon, gameState.startTime]);\n+    }, [gameState.gameOver, gameState.gameWon]);\n \n     const handleRightClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n@@ -186,27 +185,43 @@\n     };\n \n     const revealCellAndNeighbors = (board: Cell[][], row: number, col: number): number => {\n         const cell = board[row][col];\n-        if (cell.isRevealed || cell.isFlagged) return 0;\n+        if (cell.isRevealed || cell.isFlagged || cell.isMine) return 0;\n \n         let revealedCount = 0;\n         const stack = [{ row, col }];\n+        const visited = new Set<string>();\n \n         while (stack.length > 0) {\n             const { row: r, col: c } = stack.pop()!;\n+            const cellKey = `${r}-${c}`;\n+\n+            // Skip if already visited or processed\n+            if (visited.has(cellKey)) continue;\n+            visited.add(cellKey);\n+\n             const currentCell = board[r][c];\n \n-            if (currentCell.isRevealed || currentCell.isFlagged) continue;\n+            // Skip if already revealed, flagged, or is a mine\n+            if (currentCell.isRevealed || currentCell.isFlagged || currentCell.isMine) continue;\n \n+            // Reveal the current cell\n             currentCell.isRevealed = true;\n             revealedCount++;\n \n+            // If this cell has no neighboring mines, cascade to reveal neighbors\n             if (currentCell.neighborMines === 0) {\n-                // Reveal neighbors if no adjacent mines\n                 for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\n                     for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\n-                        if (!board[nr][nc].isRevealed && !board[nr][nc].isFlagged) {\n+                        // Skip the current cell itself\n+                        if (nr === r && nc === c) continue;\n+\n+                        const neighborKey = `${nr}-${nc}`;\n+                        const neighbor = board[nr][nc];\n+\n+                        // Add neighbor to stack if it hasn't been visited and isn't revealed/flagged/mine\n+                        if (!visited.has(neighborKey) && !neighbor.isRevealed && !neighbor.isFlagged && !neighbor.isMine) {\n                             stack.push({ row: nr, col: nc });\n                         }\n                     }\n                 }\n"
                },
                {
                    "date": 1756291422430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,47 +111,96 @@\n \n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n-        setGameState(prev => {\n-            const newBoard = [...prev.board];\n-            const cell = newBoard[row][col];\n+        const cell = gameState.board[row][col];\n+        if (cell.isFlagged || cell.isRevealed) return;\n \n-            if (cell.isFlagged || cell.isRevealed) return prev;\n+        // Create completely new board\n+        const newBoard = gameState.board.map(row => row.map(cell => ({ ...cell })));\n \n-            // Start timer on first click if not already started\n-            const startTime = prev.startTime === null ? Date.now() : prev.startTime;\n+        // Start timer if first click\n+        const startTime = gameState.startTime || Date.now();\n \n-            if (cell.isMine) {\n-                // Game over - reveal all mines\n-                revealAllMines(newBoard);\n-                return {\n-                    ...prev,\n-                    board: newBoard,\n-                    gameOver: true,\n-                    startTime,\n-                    endTime: Date.now()\n-                };\n+        // If mine, game over\n+        if (cell.isMine) {\n+            // Reveal all cells\n+            for (let r = 0; r < newBoard.length; r++) {\n+                for (let c = 0; c < newBoard[0].length; c++) {\n+                    newBoard[r][c].isRevealed = true;\n+                }\n             }\n+            setGameState({\n+                ...gameState,\n+                board: newBoard,\n+                gameOver: true,\n+                startTime,\n+                endTime: Date.now()\n+            });\n+            return;\n+        }\n \n-            // Reveal cell and neighbors if no adjacent mines\n-            const newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\n+        // Reveal cells using flood fill\n+        const toReveal = [];\n+        const visited = new Set();\n+        const queue = [{ row, col }];\n \n-            // Check if game is won\n-            const totalCells = newBoard.length * newBoard[0].length;\n-            const gameWon = prev.revealedCount + newRevealedCount === totalCells - prev.mineCount;\n+        while (queue.length > 0) {\n+            const { row: r, col: c } = queue.shift()!;\n+            const key = `${r},${c}`;\n \n-            return {\n-                ...prev,\n-                board: newBoard,\n-                revealedCount: prev.revealedCount + newRevealedCount,\n-                gameWon,\n-                startTime,\n-                endTime: gameWon ? Date.now() : null\n-            };\n+            if (visited.has(key) || r < 0 || r >= newBoard.length || c < 0 || c >= newBoard[0].length) {\n+                continue;\n+            }\n+\n+            visited.add(key);\n+            const currentCell = newBoard[r][c];\n+\n+            if (currentCell.isFlagged || currentCell.isRevealed || currentCell.isMine) {\n+                continue;\n+            }\n+\n+            toReveal.push({ row: r, col: c });\n+\n+            // If empty cell, add neighbors to queue\n+            if (currentCell.neighborMines === 0) {\n+                for (let nr = r - 1; nr <= r + 1; nr++) {\n+                    for (let nc = c - 1; nc <= c + 1; nc++) {\n+                        if (nr !== r || nc !== c) {\n+                            queue.push({ row: nr, col: nc });\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Reveal all cells in toReveal array\n+        toReveal.forEach(({ row: r, col: c }) => {\n+            newBoard[r][c].isRevealed = true;\n         });\n-    }, [gameState.gameOver, gameState.gameWon]);\n \n+        // Count revealed cells\n+        let revealedCount = 0;\n+        for (let r = 0; r < newBoard.length; r++) {\n+            for (let c = 0; c < newBoard[0].length; c++) {\n+                if (newBoard[r][c].isRevealed) revealedCount++;\n+            }\n+        }\n+\n+        // Check win condition\n+        const totalCells = newBoard.length * newBoard[0].length;\n+        const gameWon = revealedCount === totalCells - gameState.mineCount;\n+\n+        setGameState({\n+            ...gameState,\n+            board: newBoard,\n+            revealedCount,\n+            gameWon,\n+            startTime,\n+            endTime: gameWon ? Date.now() : null\n+        });\n+    }, [gameState]);\n+\n     const handleRightClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n \n@@ -183,55 +232,10 @@\n             }\n         }\n     };\n \n-    const revealCellAndNeighbors = (board: Cell[][], row: number, col: number): number => {\n-        const cell = board[row][col];\n-        if (cell.isRevealed || cell.isFlagged || cell.isMine) return 0;\n \n-        let revealedCount = 0;\n-        const stack = [{ row, col }];\n-        const visited = new Set<string>();\n \n-        while (stack.length > 0) {\n-            const { row: r, col: c } = stack.pop()!;\n-            const cellKey = `${r}-${c}`;\n-\n-            // Skip if already visited or processed\n-            if (visited.has(cellKey)) continue;\n-            visited.add(cellKey);\n-\n-            const currentCell = board[r][c];\n-\n-            // Skip if already revealed, flagged, or is a mine\n-            if (currentCell.isRevealed || currentCell.isFlagged || currentCell.isMine) continue;\n-\n-            // Reveal the current cell\n-            currentCell.isRevealed = true;\n-            revealedCount++;\n-\n-            // If this cell has no neighboring mines, cascade to reveal neighbors\n-            if (currentCell.neighborMines === 0) {\n-                for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\n-                    for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\n-                        // Skip the current cell itself\n-                        if (nr === r && nc === c) continue;\n-\n-                        const neighborKey = `${nr}-${nc}`;\n-                        const neighbor = board[nr][nc];\n-\n-                        // Add neighbor to stack if it hasn't been visited and isn't revealed/flagged/mine\n-                        if (!visited.has(neighborKey) && !neighbor.isRevealed && !neighbor.isFlagged && !neighbor.isMine) {\n-                            stack.push({ row: nr, col: nc });\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        return revealedCount;\n-    };\n-\n     const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\n         setGameState(initializeGame(difficulty));\n     };\n \n"
                },
                {
                    "date": 1756292076553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n     isMine: boolean;\n     isRevealed: boolean;\n     isFlagged: boolean;\n     neighborMines: number;\n+    isClickedMine?: boolean; // Track if this mine caused game over\n }\n \n export interface GameState {\n     board: Cell[][];\n@@ -47,9 +48,10 @@\n                 col,\n                 isMine: false,\n                 isRevealed: false,\n                 isFlagged: false,\n-                neighborMines: 0\n+                neighborMines: 0,\n+                isClickedMine: false\n             };\n         }\n     }\n \n@@ -122,8 +124,11 @@\n         const startTime = gameState.startTime || Date.now();\n \n         // If mine, game over\n         if (cell.isMine) {\n+            // Mark this mine as the clicked one\n+            newBoard[row][col].isClickedMine = true;\n+\n             // Reveal all cells\n             for (let r = 0; r < newBoard.length; r++) {\n                 for (let c = 0; c < newBoard[0].length; c++) {\n                     newBoard[r][c].isRevealed = true;\n"
                },
                {
                    "date": 1756292175886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,21 +272,24 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {(gameState.gameOver || gameState.gameWon) && (\n-                <div className=\"mt-6 text-center\">\n-                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n-                        }`}>\n-                        {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n-                    </div>\n-                    <button\n-                        onClick={handleResetGame}\n-                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n-                    >\n-                        Play Again\n-                    </button>\n-                </div>\n-            )}\n+            {/* Always reserve space for game end message to prevent layout shift */}\n+            <div className=\"mt-6 text-center min-h-[120px] flex flex-col justify-center\">\n+                {(gameState.gameOver || gameState.gameWon) && (\n+                    <>\n+                        <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n+                            }`}>\n+                            {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n+                        </div>\n+                        <button\n+                            onClick={handleResetGame}\n+                            className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n+                        >\n+                            Play Again\n+                        </button>\n+                    </>\n+                )}\n+            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756292417116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,25 @@\n };\n \n export const MinesweeperGame: React.FC = () => {\n     const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n+    const [currentTime, setCurrentTime] = useState(0);\n \n+    // Update timer every second when game is running\n+    useEffect(() => {\n+        let interval: NodeJS.Timeout;\n+        if (gameState.startTime && !gameState.endTime && !gameState.gameOver && !gameState.gameWon) {\n+            interval = setInterval(() => {\n+                setCurrentTime(Math.floor((Date.now() - gameState.startTime!) / 1000));\n+            }, 1000);\n+        }\n+        return () => {\n+            if (interval) clearInterval(interval);\n+        };\n+    }, [gameState.startTime, gameState.endTime, gameState.gameOver, gameState.gameWon]);\n \n \n+\n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n         const cell = gameState.board[row][col];\n@@ -241,55 +255,118 @@\n \n \n     const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\n         setGameState(initializeGame(difficulty));\n+        setCurrentTime(0);\n     };\n \n     const handleResetGame = () => {\n         setGameState(initializeGame(gameState.difficulty));\n+        setCurrentTime(0);\n     };\n \n+    const getCurrentTime = () => {\n+        if (!gameState.startTime) return 0;\n+        if (gameState.endTime) return Math.floor((gameState.endTime - gameState.startTime) / 1000);\n+        return currentTime;\n+    };\n+\n+    const getSmileyFace = () => {\n+        if (gameState.gameWon) return '😎';\n+        if (gameState.gameOver) return '😵';\n+        return '🙂';\n+    };\n+\n+    const formatDigitalDisplay = (num: number, digits: number = 3) => {\n+        return num.toString().padStart(digits, '0');\n+    };\n+\n     return (\n-        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n-            <GameControls\n-                onNewGame={handleNewGame}\n-                onResetGame={handleResetGame}\n-                currentDifficulty={gameState.difficulty}\n-            />\n+        <div className=\"inline-block bg-gray-300 p-3\" style={{\n+            border: '3px outset #c0c0c0',\n+            borderRadius: '0',\n+            fontFamily: 'MS Sans Serif, sans-serif'\n+        }}>\n+            {/* Classic Minesweeper Header */}\n+            <div className=\"bg-gray-300 p-2 mb-2\" style={{\n+                border: '2px inset #c0c0c0'\n+            }}>\n+                <div className=\"flex justify-between items-center\">\n+                    {/* Mine Counter */}\n+                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n+                        border: '1px inset #808080',\n+                        minWidth: '60px',\n+                        textAlign: 'center'\n+                    }}>\n+                        {formatDigitalDisplay(Math.max(0, gameState.mineCount - gameState.flaggedCount))}\n+                    </div>\n \n-            <GameStats\n-                mineCount={gameState.mineCount}\n-                flaggedCount={gameState.flaggedCount}\n-                startTime={gameState.startTime}\n-                endTime={gameState.endTime}\n-                gameOver={gameState.gameOver}\n-                gameWon={gameState.gameWon}\n-            />\n+                    {/* Smiley Face Button */}\n+                    <button\n+                        onClick={handleResetGame}\n+                        className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\n+                        style={{\n+                            border: '2px outset #c0c0c0'\n+                        }}\n+                        onMouseDown={(e) => {\n+                            e.currentTarget.style.border = '2px inset #c0c0c0';\n+                        }}\n+                        onMouseUp={(e) => {\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n+                        }}\n+                        onMouseLeave={(e) => {\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n+                        }}\n+                    >\n+                        {getSmileyFace()}\n+                    </button>\n \n-            <GameBoard\n-                board={gameState.board}\n-                onCellClick={handleCellClick}\n-                onRightClick={handleRightClick}\n-                gameOver={gameState.gameOver}\n-                gameWon={gameState.gameWon}\n-            />\n+                    {/* Timer */}\n+                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n+                        border: '1px inset #808080',\n+                        minWidth: '60px',\n+                        textAlign: 'center'\n+                    }}>\n+                        {formatDigitalDisplay(Math.min(999, getCurrentTime()))}\n+                    </div>\n+                </div>\n+            </div>\n \n-            {/* Always reserve space for game end message to prevent layout shift */}\n-            <div className=\"mt-6 text-center min-h-[120px] flex flex-col justify-center\">\n-                {(gameState.gameOver || gameState.gameWon) && (\n-                    <>\n-                        <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n-                            }`}>\n-                            {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n-                        </div>\n+            {/* Game Board */}\n+            <div className=\"bg-gray-300\" style={{\n+                border: '3px inset #c0c0c0'\n+            }}>\n+                <GameBoard\n+                    board={gameState.board}\n+                    onCellClick={handleCellClick}\n+                    onRightClick={handleRightClick}\n+                    gameOver={gameState.gameOver}\n+                    gameWon={gameState.gameWon}\n+                />\n+            </div>\n+\n+            {/* Difficulty Controls (moved to bottom) */}\n+            <div className=\"mt-2 text-center\">\n+                <div className=\"inline-flex bg-gray-300 p-1\" style={{ border: '1px inset #c0c0c0' }}>\n+                    {(['beginner', 'intermediate', 'expert'] as const).map((difficulty) => (\n                         <button\n-                            onClick={handleResetGame}\n-                            className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n+                            key={difficulty}\n+                            onClick={() => handleNewGame(difficulty)}\n+                            className={`px-2 py-1 text-xs font-bold ${gameState.difficulty === difficulty\n+                                    ? 'bg-gray-500 text-white'\n+                                    : 'bg-gray-300 text-black hover:bg-gray-400'\n+                                }`}\n+                            style={{\n+                                border: gameState.difficulty === difficulty\n+                                    ? '1px inset #c0c0c0'\n+                                    : '1px outset #c0c0c0',\n+                                marginRight: difficulty !== 'expert' ? '1px' : '0'\n+                            }}\n                         >\n-                            Play Again\n+                            {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}\n                         </button>\n-                    </>\n-                )}\n+                    ))}\n+                </div>\n             </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756292593537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,25 +107,11 @@\n };\n \n export const MinesweeperGame: React.FC = () => {\n     const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n-    const [currentTime, setCurrentTime] = useState(0);\n \n-    // Update timer every second when game is running\n-    useEffect(() => {\n-        let interval: NodeJS.Timeout;\n-        if (gameState.startTime && !gameState.endTime && !gameState.gameOver && !gameState.gameWon) {\n-            interval = setInterval(() => {\n-                setCurrentTime(Math.floor((Date.now() - gameState.startTime!) / 1000));\n-            }, 1000);\n-        }\n-        return () => {\n-            if (interval) clearInterval(interval);\n-        };\n-    }, [gameState.startTime, gameState.endTime, gameState.gameOver, gameState.gameWon]);\n \n \n-\n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n         const cell = gameState.board[row][col];\n@@ -255,118 +241,51 @@\n \n \n     const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\n         setGameState(initializeGame(difficulty));\n-        setCurrentTime(0);\n     };\n \n     const handleResetGame = () => {\n         setGameState(initializeGame(gameState.difficulty));\n-        setCurrentTime(0);\n     };\n \n-    const getCurrentTime = () => {\n-        if (!gameState.startTime) return 0;\n-        if (gameState.endTime) return Math.floor((gameState.endTime - gameState.startTime) / 1000);\n-        return currentTime;\n-    };\n-\n-    const getSmileyFace = () => {\n-        if (gameState.gameWon) return '😎';\n-        if (gameState.gameOver) return '😵';\n-        return '🙂';\n-    };\n-\n-    const formatDigitalDisplay = (num: number, digits: number = 3) => {\n-        return num.toString().padStart(digits, '0');\n-    };\n-\n     return (\n         <div className=\"inline-block bg-gray-300 p-3\" style={{\n             border: '3px outset #c0c0c0',\n-            borderRadius: '0',\n             fontFamily: 'MS Sans Serif, sans-serif'\n         }}>\n-            {/* Classic Minesweeper Header */}\n-            <div className=\"bg-gray-300 p-2 mb-2\" style={{\n-                border: '2px inset #c0c0c0'\n-            }}>\n-                <div className=\"flex justify-between items-center\">\n-                    {/* Mine Counter */}\n-                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n-                        border: '1px inset #808080',\n-                        minWidth: '60px',\n-                        textAlign: 'center'\n-                    }}>\n-                        {formatDigitalDisplay(Math.max(0, gameState.mineCount - gameState.flaggedCount))}\n-                    </div>\n+            <GameStats\n+                mineCount={gameState.mineCount}\n+                flaggedCount={gameState.flaggedCount}\n+                startTime={gameState.startTime}\n+                endTime={gameState.endTime}\n+                gameOver={gameState.gameOver}\n+                gameWon={gameState.gameWon}\n+                onResetGame={handleResetGame}\n+            />\n \n-                    {/* Smiley Face Button */}\n-                    <button\n-                        onClick={handleResetGame}\n-                        className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\n-                        style={{\n-                            border: '2px outset #c0c0c0'\n-                        }}\n-                        onMouseDown={(e) => {\n-                            e.currentTarget.style.border = '2px inset #c0c0c0';\n-                        }}\n-                        onMouseUp={(e) => {\n-                            e.currentTarget.style.border = '2px outset #c0c0c0';\n-                        }}\n-                        onMouseLeave={(e) => {\n-                            e.currentTarget.style.border = '2px outset #c0c0c0';\n-                        }}\n-                    >\n-                        {getSmileyFace()}\n-                    </button>\n+            <GameBoard\n+                board={gameState.board}\n+                onCellClick={handleCellClick}\n+                onRightClick={handleRightClick}\n+                gameOver={gameState.gameOver}\n+                gameWon={gameState.gameWon}\n+            />\n \n-                    {/* Timer */}\n-                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n-                        border: '1px inset #808080',\n-                        minWidth: '60px',\n-                        textAlign: 'center'\n-                    }}>\n-                        {formatDigitalDisplay(Math.min(999, getCurrentTime()))}\n+            <GameControls\n+                onNewGame={handleNewGame}\n+                onResetGame={handleResetGame}\n+                currentDifficulty={gameState.difficulty}\n+            />\n+\n+            {/* Always reserve space for game end message to prevent layout shift */}\n+            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n+                {(gameState.gameOver || gameState.gameWon) && (\n+                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n+                        }`}>\n+                        {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                </div>\n+                )}\n             </div>\n-\n-            {/* Game Board */}\n-            <div className=\"bg-gray-300\" style={{\n-                border: '3px inset #c0c0c0'\n-            }}>\n-                <GameBoard\n-                    board={gameState.board}\n-                    onCellClick={handleCellClick}\n-                    onRightClick={handleRightClick}\n-                    gameOver={gameState.gameOver}\n-                    gameWon={gameState.gameWon}\n-                />\n-            </div>\n-\n-            {/* Difficulty Controls (moved to bottom) */}\n-            <div className=\"mt-2 text-center\">\n-                <div className=\"inline-flex bg-gray-300 p-1\" style={{ border: '1px inset #c0c0c0' }}>\n-                    {(['beginner', 'intermediate', 'expert'] as const).map((difficulty) => (\n-                        <button\n-                            key={difficulty}\n-                            onClick={() => handleNewGame(difficulty)}\n-                            className={`px-2 py-1 text-xs font-bold ${gameState.difficulty === difficulty\n-                                    ? 'bg-gray-500 text-white'\n-                                    : 'bg-gray-300 text-black hover:bg-gray-400'\n-                                }`}\n-                            style={{\n-                                border: gameState.difficulty === difficulty\n-                                    ? '1px inset #c0c0c0'\n-                                    : '1px outset #c0c0c0',\n-                                marginRight: difficulty !== 'expert' ? '1px' : '0'\n-                            }}\n-                        >\n-                            {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}\n-                        </button>\n-                    ))}\n-                </div>\n-            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756293185987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,20 +248,22 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"inline-block bg-gray-300 p-3\" style={{\n-            border: '3px outset #c0c0c0',\n-            fontFamily: 'MS Sans Serif, sans-serif'\n-        }}>\n+        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n+            <GameControls\n+                onNewGame={handleNewGame}\n+                onResetGame={handleResetGame}\n+                currentDifficulty={gameState.difficulty}\n+            />\n+\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n-                onResetGame={handleResetGame}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -270,22 +272,21 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            <GameControls\n-                onNewGame={handleNewGame}\n-                onResetGame={handleResetGame}\n-                currentDifficulty={gameState.difficulty}\n-            />\n-\n-            {/* Always reserve space for game end message to prevent layout shift */}\n-            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n-                {(gameState.gameOver || gameState.gameWon) && (\n-                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n+            {(gameState.gameOver || gameState.gameWon) && (\n+                <div className=\"mt-6 text-center\">\n+                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                )}\n-            </div>\n+                    <button\n+                        onClick={handleResetGame}\n+                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n+                    >\n+                        Play Again\n+                    </button>\n+                </div>\n+            )}\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756293281289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,23 +247,29 @@\n     const handleResetGame = () => {\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n+    const getBoardWidth = () => {\n+        if (gameState.board.length === 0) return 180; // Default width\n+        const cols = gameState.board[0].length;\n+        const cellSize = 20;\n+        return cols * cellSize;\n+    };\n+\n     return (\n-        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n-            <GameControls\n-                onNewGame={handleNewGame}\n-                onResetGame={handleResetGame}\n-                currentDifficulty={gameState.difficulty}\n-            />\n-\n+        <div className=\"inline-block bg-gray-300 p-3\" style={{\n+            border: '3px outset #c0c0c0',\n+            fontFamily: 'MS Sans Serif, sans-serif'\n+        }}>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n+                onResetGame={handleResetGame}\n+                boardWidth={getBoardWidth()}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -272,21 +278,22 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {(gameState.gameOver || gameState.gameWon) && (\n-                <div className=\"mt-6 text-center\">\n-                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n+            <GameControls\n+                onNewGame={handleNewGame}\n+                onResetGame={handleResetGame}\n+                currentDifficulty={gameState.difficulty}\n+            />\n+\n+            {/* Always reserve space for game end message to prevent layout shift */}\n+            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n+                {(gameState.gameOver || gameState.gameWon) && (\n+                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                    <button\n-                        onClick={handleResetGame}\n-                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n-                    >\n-                        Play Again\n-                    </button>\n-                </div>\n-            )}\n+                )}\n+            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756293324242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,29 +247,23 @@\n     const handleResetGame = () => {\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n-    const getBoardWidth = () => {\n-        if (gameState.board.length === 0) return 180; // Default width\n-        const cols = gameState.board[0].length;\n-        const cellSize = 20;\n-        return cols * cellSize;\n-    };\n+    return (\n+        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n+            <GameControls\n+                onNewGame={handleNewGame}\n+                onResetGame={handleResetGame}\n+                currentDifficulty={gameState.difficulty}\n+            />\n \n-    return (\n-        <div className=\"inline-block bg-gray-300 p-3\" style={{\n-            border: '3px outset #c0c0c0',\n-            fontFamily: 'MS Sans Serif, sans-serif'\n-        }}>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n-                onResetGame={handleResetGame}\n-                boardWidth={getBoardWidth()}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -278,22 +272,21 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            <GameControls\n-                onNewGame={handleNewGame}\n-                onResetGame={handleResetGame}\n-                currentDifficulty={gameState.difficulty}\n-            />\n-\n-            {/* Always reserve space for game end message to prevent layout shift */}\n-            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n-                {(gameState.gameOver || gameState.gameWon) && (\n-                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n+            {(gameState.gameOver || gameState.gameWon) && (\n+                <div className=\"mt-6 text-center\">\n+                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                )}\n-            </div>\n+                    <button\n+                        onClick={handleResetGame}\n+                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n+                    >\n+                        Play Again\n+                    </button>\n+                </div>\n+            )}\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756293425121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,8 +262,10 @@\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n+                onResetGame={handleResetGame}\n+                boardWidth={gameState.board.length > 0 ? gameState.board[0].length * 20 : 180}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n"
                },
                {
                    "date": 1756293613640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,10 +262,8 @@\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n-                onResetGame={handleResetGame}\n-                boardWidth={gameState.board.length > 0 ? gameState.board[0].length * 20 : 180}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n"
                },
                {
                    "date": 1756294195338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n };\n \n // Helper functions moved outside component\n const createBoard = (rows: number, cols: number, mines: number): Cell[][] => {\n+    console.log('Creating board with dimensions:', { rows, cols, mines });\n     const board: Cell[][] = [];\n \n     // Initialize empty board\n     for (let row = 0; row < rows; row++) {\n@@ -54,8 +55,10 @@\n             };\n         }\n     }\n \n+    console.log('Board created with actual dimensions:', board.length, 'x', board[0]?.length);\n+\n     // Place mines randomly\n     let minesPlaced = 0;\n     while (minesPlaced < mines) {\n         const row = Math.floor(Math.random() * rows);\n"
                },
                {
                    "date": 1756295743833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n };\n \n // Helper functions moved outside component\n const createBoard = (rows: number, cols: number, mines: number): Cell[][] => {\n-    console.log('Creating board with dimensions:', { rows, cols, mines });\n     const board: Cell[][] = [];\n \n     // Initialize empty board\n     for (let row = 0; row < rows; row++) {\n@@ -55,10 +54,8 @@\n             };\n         }\n     }\n \n-    console.log('Board created with actual dimensions:', board.length, 'x', board[0]?.length);\n-\n     // Place mines randomly\n     let minesPlaced = 0;\n     while (minesPlaced < mines) {\n         const row = Math.floor(Math.random() * rows);\n"
                },
                {
                    "date": 1756296560718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n 'use client';\n \n import React, { useState, useEffect, useCallback } from 'react';\n import { GameBoard } from './GameBoard';\n-import { GameControls } from './GameControls';\n import { GameStats } from './GameStats';\n \n export interface Cell {\n     id: string;\n@@ -248,22 +247,22 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n-            <GameControls\n-                onNewGame={handleNewGame}\n-                onResetGame={handleResetGame}\n-                currentDifficulty={gameState.difficulty}\n-            />\n-\n+        <div className=\"inline-block bg-gray-300 p-3\" style={{\n+            border: '3px outset #c0c0c0',\n+            fontFamily: 'MS Sans Serif, sans-serif'\n+        }}>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n+                onResetGame={handleResetGame}\n+                onNewGame={handleNewGame}\n+                currentDifficulty={gameState.difficulty}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -272,21 +271,16 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {(gameState.gameOver || gameState.gameWon) && (\n-                <div className=\"mt-6 text-center\">\n-                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n+            {/* Always reserve space for game end message to prevent layout shift */}\n+            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n+                {(gameState.gameOver || gameState.gameWon) && (\n+                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                    <button\n-                        onClick={handleResetGame}\n-                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n-                    >\n-                        Play Again\n-                    </button>\n-                </div>\n-            )}\n+                )}\n+            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756296631193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n 'use client';\n \n import React, { useState, useEffect, useCallback } from 'react';\n import { GameBoard } from './GameBoard';\n+import { GameControls } from './GameControls';\n import { GameStats } from './GameStats';\n \n export interface Cell {\n     id: string;\n@@ -247,22 +248,22 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"inline-block bg-gray-300 p-3\" style={{\n-            border: '3px outset #c0c0c0',\n-            fontFamily: 'MS Sans Serif, sans-serif'\n-        }}>\n+        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n+            <GameControls\n+                onNewGame={handleNewGame}\n+                onResetGame={handleResetGame}\n+                currentDifficulty={gameState.difficulty}\n+            />\n+\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n-                onResetGame={handleResetGame}\n-                onNewGame={handleNewGame}\n-                currentDifficulty={gameState.difficulty}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -271,16 +272,21 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {/* Always reserve space for game end message to prevent layout shift */}\n-            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n-                {(gameState.gameOver || gameState.gameWon) && (\n-                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n+            {(gameState.gameOver || gameState.gameWon) && (\n+                <div className=\"mt-6 text-center\">\n+                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                )}\n-            </div>\n+                    <button\n+                        onClick={handleResetGame}\n+                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n+                    >\n+                        Play Again\n+                    </button>\n+                </div>\n+            )}\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756296786909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n 'use client';\n \n import React, { useState, useEffect, useCallback } from 'react';\n import { GameBoard } from './GameBoard';\n-import { GameControls } from './GameControls';\n import { GameStats } from './GameStats';\n \n export interface Cell {\n     id: string;\n@@ -105,13 +104,22 @@\n         difficulty\n     };\n };\n \n-export const MinesweeperGame: React.FC = () => {\n-    const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n+interface MinesweeperGameProps {\n+    difficulty?: 'beginner' | 'intermediate' | 'expert';\n+}\n \n+export const MinesweeperGame: React.FC<MinesweeperGameProps> = ({ difficulty = 'beginner' }) => {\n+    const [gameState, setGameState] = useState<GameState>(() => initializeGame(difficulty));\n \n+    // Update game when difficulty changes\n+    useEffect(() => {\n+        setGameState(initializeGame(difficulty));\n+    }, [difficulty]);\n \n+\n+\n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n         const cell = gameState.board[row][col];\n"
                },
                {
                    "date": 1756296877721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,42 +236,29 @@\n             };\n         });\n     }, [gameState.gameOver, gameState.gameWon]);\n \n-    const revealAllMines = (board: Cell[][]) => {\n-        for (let row = 0; row < board.length; row++) {\n-            for (let col = 0; col < board[0].length; col++) {\n-                // Reveal ALL cells when game is over\n-                board[row][col].isRevealed = true;\n-            }\n-        }\n-    };\n \n \n \n-    const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\n-        setGameState(initializeGame(difficulty));\n-    };\n \n     const handleResetGame = () => {\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n-            <GameControls\n-                onNewGame={handleNewGame}\n-                onResetGame={handleResetGame}\n-                currentDifficulty={gameState.difficulty}\n-            />\n-\n+        <div className=\"inline-block bg-gray-300 p-3\" style={{\n+            border: '3px outset #c0c0c0',\n+            fontFamily: 'MS Sans Serif, sans-serif'\n+        }}>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n+                onResetGame={handleResetGame}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -280,21 +267,16 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {(gameState.gameOver || gameState.gameWon) && (\n-                <div className=\"mt-6 text-center\">\n-                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n+            {/* Always reserve space for game end message to prevent layout shift */}\n+            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n+                {(gameState.gameOver || gameState.gameWon) && (\n+                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                    <button\n-                        onClick={handleResetGame}\n-                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n-                    >\n-                        Play Again\n-                    </button>\n-                </div>\n-            )}\n+                )}\n+            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756297153824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,12 +245,9 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"inline-block bg-gray-300 p-3\" style={{\n-            border: '3px outset #c0c0c0',\n-            fontFamily: 'MS Sans Serif, sans-serif'\n-        }}>\n+        <div>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n"
                },
                {
                    "date": 1756297202034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n 'use client';\n \n import React, { useState, useEffect, useCallback } from 'react';\n import { GameBoard } from './GameBoard';\n+import { GameControls } from './GameControls';\n import { GameStats } from './GameStats';\n \n export interface Cell {\n     id: string;\n@@ -104,22 +105,13 @@\n         difficulty\n     };\n };\n \n-interface MinesweeperGameProps {\n-    difficulty?: 'beginner' | 'intermediate' | 'expert';\n-}\n+export const MinesweeperGame: React.FC = () => {\n+    const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n \n-export const MinesweeperGame: React.FC<MinesweeperGameProps> = ({ difficulty = 'beginner' }) => {\n-    const [gameState, setGameState] = useState<GameState>(() => initializeGame(difficulty));\n \n-    // Update game when difficulty changes\n-    useEffect(() => {\n-        setGameState(initializeGame(difficulty));\n-    }, [difficulty]);\n \n-\n-\n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n         const cell = gameState.board[row][col];\n@@ -236,26 +228,42 @@\n             };\n         });\n     }, [gameState.gameOver, gameState.gameWon]);\n \n+    const revealAllMines = (board: Cell[][]) => {\n+        for (let row = 0; row < board.length; row++) {\n+            for (let col = 0; col < board[0].length; col++) {\n+                // Reveal ALL cells when game is over\n+                board[row][col].isRevealed = true;\n+            }\n+        }\n+    };\n \n \n \n+    const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\n+        setGameState(initializeGame(difficulty));\n+    };\n \n     const handleResetGame = () => {\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div>\n+        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n+            <GameControls\n+                onNewGame={handleNewGame}\n+                onResetGame={handleResetGame}\n+                currentDifficulty={gameState.difficulty}\n+            />\n+\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n-                onResetGame={handleResetGame}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -264,16 +272,21 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {/* Always reserve space for game end message to prevent layout shift */}\n-            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n-                {(gameState.gameOver || gameState.gameWon) && (\n-                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n+            {(gameState.gameOver || gameState.gameWon) && (\n+                <div className=\"mt-6 text-center\">\n+                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                )}\n-            </div>\n+                    <button\n+                        onClick={handleResetGame}\n+                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n+                    >\n+                        Play Again\n+                    </button>\n+                </div>\n+            )}\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756297627027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n 'use client';\n \n import React, { useState, useEffect, useCallback } from 'react';\n import { GameBoard } from './GameBoard';\n-import { GameControls } from './GameControls';\n import { GameStats } from './GameStats';\n \n export interface Cell {\n     id: string;\n@@ -105,13 +104,17 @@\n         difficulty\n     };\n };\n \n-export const MinesweeperGame: React.FC = () => {\n-    const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\n+interface MinesweeperGameProps {\n+    initialDifficulty: 'beginner' | 'intermediate' | 'expert';\n+}\n \n+export const MinesweeperGame: React.FC<MinesweeperGameProps> = ({ initialDifficulty }) => {\n+    const [gameState, setGameState] = useState<GameState>(() => initializeGame(initialDifficulty));\n \n \n+\n     const handleCellClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n         const cell = gameState.board[row][col];\n@@ -239,31 +242,22 @@\n     };\n \n \n \n-    const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\n-        setGameState(initializeGame(difficulty));\n-    };\n-\n     const handleResetGame = () => {\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\n-            <GameControls\n-                onNewGame={handleNewGame}\n-                onResetGame={handleResetGame}\n-                currentDifficulty={gameState.difficulty}\n-            />\n-\n+        <div>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n+                onResetGame={handleResetGame}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -272,21 +266,16 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {(gameState.gameOver || gameState.gameWon) && (\n-                <div className=\"mt-6 text-center\">\n-                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\n+            {/* Always reserve space for game end message to prevent layout shift */}\n+            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n+                {(gameState.gameOver || gameState.gameWon) && (\n+                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n                         }`}>\n                         {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n                     </div>\n-                    <button\n-                        onClick={handleResetGame}\n-                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\n-                    >\n-                        Play Again\n-                    </button>\n-                </div>\n-            )}\n+                )}\n+            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756298091738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,16 +266,8 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n             />\n \n-            {/* Always reserve space for game end message to prevent layout shift */}\n-            <div className=\"mt-2 text-center min-h-[60px] flex flex-col justify-center\">\n-                {(gameState.gameOver || gameState.gameWon) && (\n-                    <div className={`text-lg font-bold ${gameState.gameWon ? 'text-green-700' : 'text-red-700'\n-                        }`}>\n-                        {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\n-                    </div>\n-                )}\n-            </div>\n+\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756315930780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,12 +130,14 @@\n         if (cell.isMine) {\n             // Mark this mine as the clicked one\n             newBoard[row][col].isClickedMine = true;\n \n-            // Reveal all cells\n+            // Only reveal mines, not all cells\n             for (let r = 0; r < newBoard.length; r++) {\n                 for (let c = 0; c < newBoard[0].length; c++) {\n-                    newBoard[r][c].isRevealed = true;\n+                    if (newBoard[r][c].isMine) {\n+                        newBoard[r][c].isRevealed = true;\n+                    }\n                 }\n             }\n             setGameState({\n                 ...gameState,\n@@ -231,16 +233,9 @@\n             };\n         });\n     }, [gameState.gameOver, gameState.gameWon]);\n \n-    const revealAllMines = (board: Cell[][]) => {\n-        for (let row = 0; row < board.length; row++) {\n-            for (let col = 0; col < board[0].length; col++) {\n-                // Reveal ALL cells when game is over\n-                board[row][col].isRevealed = true;\n-            }\n-        }\n-    };\n+    // Function removed - not needed anymore\n \n \n \n     const handleResetGame = () => {\n"
                },
                {
                    "date": 1756316238237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,10 @@\n     revealedCount: number;\n     startTime: number | null;\n     endTime: number | null;\n     difficulty: 'beginner' | 'intermediate' | 'expert';\n+    isDragging: boolean;\n+    dragStartCell: { row: number; col: number } | null;\n }\n \n const DIFFICULTY_CONFIGS = {\n     beginner: { rows: 9, cols: 9, mines: 10 },\n@@ -100,9 +102,11 @@\n         flaggedCount: 0,\n         revealedCount: 0,\n         startTime: null,\n         endTime: null,\n-        difficulty\n+        difficulty,\n+        isDragging: false,\n+        dragStartCell: null\n     };\n };\n \n interface MinesweeperGameProps {\n@@ -209,8 +213,51 @@\n             endTime: gameWon ? Date.now() : null\n         });\n     }, [gameState]);\n \n+    const handleCellMouseDown = useCallback((row: number, col: number) => {\n+        if (gameState.gameOver || gameState.gameWon) return;\n+\n+        const cell = gameState.board[row][col];\n+        if (cell.isFlagged || cell.isRevealed) return;\n+\n+        // Start drag operation\n+        setGameState(prev => ({\n+            ...prev,\n+            isDragging: true,\n+            dragStartCell: { row, col }\n+        }));\n+    }, [gameState.gameOver, gameState.gameWon]);\n+\n+    const handleCellMouseUp = useCallback((row: number, col: number) => {\n+        if (gameState.gameOver || gameState.gameWon) return;\n+\n+        // If we were dragging and mouse up is on a different cell, reveal that cell\n+        if (gameState.isDragging && gameState.dragStartCell) {\n+            const startCell = gameState.dragStartCell;\n+            if (startCell.row !== row || startCell.col !== col) {\n+                // Reveal the cell where mouse was released\n+                handleCellClick(row, col);\n+            }\n+        }\n+\n+        // End drag operation\n+        setGameState(prev => ({\n+            ...prev,\n+            isDragging: false,\n+            dragStartCell: null\n+        }));\n+    }, [gameState.gameOver, gameState.gameWon, gameState.isDragging, gameState.dragStartCell, handleCellClick]);\n+\n+    const handleCellMouseEnter = useCallback((row: number, col: number) => {\n+        if (gameState.gameOver || gameState.gameWon) return;\n+\n+        // If dragging, show hover effect on cells\n+        if (gameState.isDragging) {\n+            // This will be handled by the GameCell component to show hover styles\n+        }\n+    }, [gameState.gameOver, gameState.gameWon, gameState.isDragging]);\n+\n     const handleRightClick = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n \n@@ -257,10 +304,14 @@\n             <GameBoard\n                 board={gameState.board}\n                 onCellClick={handleCellClick}\n                 onRightClick={handleRightClick}\n+                onCellMouseDown={handleCellMouseDown}\n+                onCellMouseUp={handleCellMouseUp}\n+                onCellMouseEnter={handleCellMouseEnter}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n+                isDragging={gameState.isDragging}\n             />\n \n \n         </div>\n"
                },
                {
                    "date": 1756316747971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,9 @@\n }\n \n export const MinesweeperGame: React.FC<MinesweeperGameProps> = ({ initialDifficulty }) => {\n     const [gameState, setGameState] = useState<GameState>(() => initializeGame(initialDifficulty));\n+    const [isAnyCellPressed, setIsAnyCellPressed] = useState<boolean>(false);\n \n \n \n     const handleCellClick = useCallback((row: number, col: number) => {\n@@ -219,8 +220,11 @@\n \n         const cell = gameState.board[row][col];\n         if (cell.isFlagged || cell.isRevealed) return;\n \n+        // Set cell pressed state for shocked emoji\n+        setIsAnyCellPressed(true);\n+\n         // Start drag operation\n         setGameState(prev => ({\n             ...prev,\n             isDragging: true,\n@@ -230,8 +234,11 @@\n \n     const handleCellMouseUp = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n+        // Reset cell pressed state\n+        setIsAnyCellPressed(false);\n+\n         // If we were dragging and mouse up is on a different cell, reveal that cell\n         if (gameState.isDragging && gameState.dragStartCell) {\n             const startCell = gameState.dragStartCell;\n             if (startCell.row !== row || startCell.col !== col) {\n@@ -298,8 +305,9 @@\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n                 onResetGame={handleResetGame}\n+                isAnyCellPressed={isAnyCellPressed}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n"
                },
                {
                    "date": 1756317054153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div>\n+        <div className=\"p-4\">\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n"
                },
                {
                    "date": 1756317286890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"p-4\">\n+        <div>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n@@ -306,19 +306,14 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n                 onResetGame={handleResetGame}\n                 isAnyCellPressed={isAnyCellPressed}\n-            />\n-\n-            <GameBoard\n                 board={gameState.board}\n                 onCellClick={handleCellClick}\n                 onRightClick={handleRightClick}\n                 onCellMouseDown={handleCellMouseDown}\n                 onCellMouseUp={handleCellMouseUp}\n                 onCellMouseEnter={handleCellMouseEnter}\n-                gameOver={gameState.gameOver}\n-                gameWon={gameState.gameWon}\n                 isDragging={gameState.isDragging}\n             />\n \n \n"
                },
                {
                    "date": 1756317303940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,8 @@\n }\n \n export const MinesweeperGame: React.FC<MinesweeperGameProps> = ({ initialDifficulty }) => {\n     const [gameState, setGameState] = useState<GameState>(() => initializeGame(initialDifficulty));\n-    const [isAnyCellPressed, setIsAnyCellPressed] = useState<boolean>(false);\n \n \n \n     const handleCellClick = useCallback((row: number, col: number) => {\n@@ -220,11 +219,8 @@\n \n         const cell = gameState.board[row][col];\n         if (cell.isFlagged || cell.isRevealed) return;\n \n-        // Set cell pressed state for shocked emoji\n-        setIsAnyCellPressed(true);\n-\n         // Start drag operation\n         setGameState(prev => ({\n             ...prev,\n             isDragging: true,\n@@ -234,11 +230,8 @@\n \n     const handleCellMouseUp = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n-        // Reset cell pressed state\n-        setIsAnyCellPressed(false);\n-\n         // If we were dragging and mouse up is on a different cell, reveal that cell\n         if (gameState.isDragging && gameState.dragStartCell) {\n             const startCell = gameState.dragStartCell;\n             if (startCell.row !== row || startCell.col !== col) {\n@@ -305,15 +298,19 @@\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n                 onResetGame={handleResetGame}\n-                isAnyCellPressed={isAnyCellPressed}\n+            />\n+\n+            <GameBoard\n                 board={gameState.board}\n                 onCellClick={handleCellClick}\n                 onRightClick={handleRightClick}\n                 onCellMouseDown={handleCellMouseDown}\n                 onCellMouseUp={handleCellMouseUp}\n                 onCellMouseEnter={handleCellMouseEnter}\n+                gameOver={gameState.gameOver}\n+                gameWon={gameState.gameWon}\n                 isDragging={gameState.isDragging}\n             />\n \n \n"
                },
                {
                    "date": 1756317423983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,9 @@\n }\n \n export const MinesweeperGame: React.FC<MinesweeperGameProps> = ({ initialDifficulty }) => {\n     const [gameState, setGameState] = useState<GameState>(() => initializeGame(initialDifficulty));\n+    const [isAnyCellPressed, setIsAnyCellPressed] = useState<boolean>(false);\n \n \n \n     const handleCellClick = useCallback((row: number, col: number) => {\n@@ -219,8 +220,11 @@\n \n         const cell = gameState.board[row][col];\n         if (cell.isFlagged || cell.isRevealed) return;\n \n+        // Set cell pressed state for shocked emoji\n+        setIsAnyCellPressed(true);\n+\n         // Start drag operation\n         setGameState(prev => ({\n             ...prev,\n             isDragging: true,\n@@ -230,8 +234,11 @@\n \n     const handleCellMouseUp = useCallback((row: number, col: number) => {\n         if (gameState.gameOver || gameState.gameWon) return;\n \n+        // Reset cell pressed state\n+        setIsAnyCellPressed(false);\n+\n         // If we were dragging and mouse up is on a different cell, reveal that cell\n         if (gameState.isDragging && gameState.dragStartCell) {\n             const startCell = gameState.dragStartCell;\n             if (startCell.row !== row || startCell.col !== col) {\n@@ -289,17 +296,18 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div>\n+        <div className=\"flex flex-col space-y-4 p-4\">\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n                 endTime={gameState.endTime}\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n                 onResetGame={handleResetGame}\n+                isAnyCellPressed={isAnyCellPressed}\n             />\n \n             <GameBoard\n                 board={gameState.board}\n@@ -311,9 +319,7 @@\n                 gameOver={gameState.gameOver}\n                 gameWon={gameState.gameWon}\n                 isDragging={gameState.isDragging}\n             />\n-\n-\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756317480303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"flex flex-col space-y-4 p-4\">\n+        <div className=\"flex flex-col space-y-4\">\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n"
                },
                {
                    "date": 1756317546710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,12 @@\n         setGameState(initializeGame(gameState.difficulty));\n     };\n \n     return (\n-        <div className=\"flex flex-col space-y-4\">\n+        <div className=\"flex flex-col space-y-4\" style={{\n+            backgroundColor: '#e0e0e0',\n+            minHeight: '200px'\n+        }}>\n             <GameStats\n                 mineCount={gameState.mineCount}\n                 flaggedCount={gameState.flaggedCount}\n                 startTime={gameState.startTime}\n"
                }
            ],
            "date": 1756285607768,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { GameBoard } from './GameBoard';\r\nimport { GameControls } from './GameControls';\r\nimport { GameStats } from './GameStats';\r\n\r\nexport interface Cell {\r\n    id: string;\r\n    row: number;\r\n    col: number;\r\n    isMine: boolean;\r\n    isRevealed: boolean;\r\n    isFlagged: boolean;\r\n    neighborMines: number;\r\n}\r\n\r\nexport interface GameState {\r\n    board: Cell[][];\r\n    gameOver: boolean;\r\n    gameWon: boolean;\r\n    mineCount: number;\r\n    flaggedCount: number;\r\n    revealedCount: number;\r\n    startTime: number | null;\r\n    endTime: number | null;\r\n    difficulty: 'beginner' | 'intermediate' | 'expert';\r\n}\r\n\r\nconst DIFFICULTY_CONFIGS = {\r\n    beginner: { rows: 9, cols: 9, mines: 10 },\r\n    intermediate: { rows: 16, cols: 16, mines: 40 },\r\n    expert: { rows: 16, cols: 30, mines: 99 }\r\n};\r\n\r\n// Helper functions moved outside component\r\nconst createBoard = (rows: number, cols: number, mines: number): Cell[][] => {\r\n    const board: Cell[][] = [];\r\n\r\n    // Initialize empty board\r\n    for (let row = 0; row < rows; row++) {\r\n        board[row] = [];\r\n        for (let col = 0; col < cols; col++) {\r\n            board[row][col] = {\r\n                id: `${row}-${col}`,\r\n                row,\r\n                col,\r\n                isMine: false,\r\n                isRevealed: false,\r\n                isFlagged: false,\r\n                neighborMines: 0\r\n            };\r\n        }\r\n    }\r\n\r\n    // Place mines randomly\r\n    let minesPlaced = 0;\r\n    while (minesPlaced < mines) {\r\n        const row = Math.floor(Math.random() * rows);\r\n        const col = Math.floor(Math.random() * cols);\r\n\r\n        if (!board[row][col].isMine) {\r\n            board[row][col].isMine = true;\r\n            minesPlaced++;\r\n        }\r\n    }\r\n\r\n    // Calculate neighbor mines for each cell\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            if (!board[row][col].isMine) {\r\n                board[row][col].neighborMines = countNeighborMines(board, row, col);\r\n            }\r\n        }\r\n    }\r\n\r\n    return board;\r\n};\r\n\r\nconst countNeighborMines = (board: Cell[][], row: number, col: number): number => {\r\n    let count = 0;\r\n    for (let r = Math.max(0, row - 1); r <= Math.min(board.length - 1, row + 1); r++) {\r\n        for (let c = Math.max(0, col - 1); c <= Math.min(board[0].length - 1, col + 1); c++) {\r\n            if (board[r][c].isMine) count++;\r\n        }\r\n    }\r\n    return count;\r\n};\r\n\r\nconst initializeGame = (difficulty: 'beginner' | 'intermediate' | 'expert'): GameState => {\r\n    const config = DIFFICULTY_CONFIGS[difficulty];\r\n    const board = createBoard(config.rows, config.cols, config.mines);\r\n\r\n    return {\r\n        board,\r\n        gameOver: false,\r\n        gameWon: false,\r\n        mineCount: config.mines,\r\n        flaggedCount: 0,\r\n        revealedCount: 0,\r\n        startTime: null,\r\n        endTime: null,\r\n        difficulty\r\n    };\r\n};\r\n\r\nexport const MinesweeperGame: React.FC = () => {\r\n    const [gameState, setGameState] = useState<GameState>(() => initializeGame('beginner'));\r\n\r\n    const handleCellClick = useCallback((row: number, col: number) => {\r\n        if (gameState.gameOver || gameState.gameWon) return;\r\n\r\n        setGameState(prev => {\r\n            const newBoard = [...prev.board];\r\n            const cell = newBoard[row][col];\r\n\r\n            if (cell.isFlagged || cell.isRevealed) return prev;\r\n\r\n            // Start timer on first click\r\n            if (prev.startTime === null) {\r\n                return {\r\n                    ...prev,\r\n                    startTime: Date.now()\r\n                };\r\n            }\r\n\r\n            if (cell.isMine) {\r\n                // Game over - reveal all mines\r\n                revealAllMines(newBoard);\r\n                return {\r\n                    ...prev,\r\n                    board: newBoard,\r\n                    gameOver: true,\r\n                    endTime: Date.now()\r\n                };\r\n            }\r\n\r\n            // Reveal cell and neighbors if no adjacent mines\r\n            const newRevealedCount = revealCellAndNeighbors(newBoard, row, col);\r\n\r\n            // Check if game is won\r\n            const totalCells = newBoard.length * newBoard[0].length;\r\n            const gameWon = newRevealedCount === totalCells - prev.mineCount;\r\n\r\n            return {\r\n                ...prev,\r\n                board: newBoard,\r\n                revealedCount: newRevealedCount,\r\n                gameWon,\r\n                endTime: gameWon ? Date.now() : null\r\n            };\r\n        });\r\n    }, [gameState.gameOver, gameState.gameWon, gameState.startTime]);\r\n\r\n    const handleRightClick = useCallback((row: number, col: number) => {\r\n        if (gameState.gameOver || gameState.gameWon) return;\r\n\r\n        setGameState(prev => {\r\n            const newBoard = [...prev.board];\r\n            const cell = newBoard[row][col];\r\n\r\n            if (cell.isRevealed) return prev;\r\n\r\n            const newFlaggedCount = prev.flaggedCount + (cell.isFlagged ? -1 : 1);\r\n            newBoard[row][col] = { ...cell, isFlagged: !cell.isFlagged };\r\n\r\n            return {\r\n                ...prev,\r\n                board: newBoard,\r\n                flaggedCount: newFlaggedCount\r\n            };\r\n        });\r\n    }, [gameState.gameOver, gameState.gameWon]);\r\n\r\n    const revealAllMines = (board: Cell[][]) => {\r\n        for (let row = 0; row < board.length; row++) {\r\n            for (let col = 0; col < board[0].length; col++) {\r\n                if (board[row][col].isMine) {\r\n                    board[row][col].isRevealed = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const revealCellAndNeighbors = (board: Cell[][], row: number, col: number): number => {\r\n        const cell = board[row][col];\r\n        if (cell.isRevealed || cell.isFlagged) return 0;\r\n\r\n        let revealedCount = 0;\r\n        const queue = [{ row, col }];\r\n        const visited = new Set<string>();\r\n\r\n        while (queue.length > 0) {\r\n            const { row: r, col: c } = queue.shift()!;\r\n            const currentCell = board[r][c];\r\n            const cellKey = `${r}-${c}`;\r\n\r\n            if (currentCell.isRevealed || currentCell.isFlagged || visited.has(cellKey)) continue;\r\n\r\n            visited.add(cellKey);\r\n            currentCell.isRevealed = true;\r\n            revealedCount++;\r\n\r\n            // If this cell has no adjacent mines, reveal all its neighbors\r\n            if (currentCell.neighborMines === 0) {\r\n                // Check all 8 adjacent cells (including diagonals)\r\n                for (let nr = Math.max(0, r - 1); nr <= Math.min(board.length - 1, r + 1); nr++) {\r\n                    for (let nc = Math.max(0, c - 1); nc <= Math.min(board[0].length - 1, c + 1); nc++) {\r\n                        const neighborKey = `${nr}-${nc}`;\r\n                        const neighbor = board[nr][nc];\r\n\r\n                        // Only add unvisited, unrevealed, unflagged neighbors to the queue\r\n                        if (!neighbor.isRevealed && !neighbor.isFlagged && !visited.has(neighborKey)) {\r\n                            queue.push({ row: nr, col: nc });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return revealedCount;\r\n    };\r\n\r\n    const handleNewGame = (difficulty: 'beginner' | 'intermediate' | 'expert') => {\r\n        setGameState(initializeGame(difficulty));\r\n    };\r\n\r\n    const handleResetGame = () => {\r\n        setGameState(initializeGame(gameState.difficulty));\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20\">\r\n            <GameControls\r\n                onNewGame={handleNewGame}\r\n                onResetGame={handleResetGame}\r\n                currentDifficulty={gameState.difficulty}\r\n            />\r\n\r\n            <GameStats\r\n                mineCount={gameState.mineCount}\r\n                flaggedCount={gameState.flaggedCount}\r\n                startTime={gameState.startTime}\r\n                endTime={gameState.endTime}\r\n                gameOver={gameState.gameOver}\r\n                gameWon={gameState.gameWon}\r\n            />\r\n\r\n            <GameBoard\r\n                board={gameState.board}\r\n                onCellClick={handleCellClick}\r\n                onRightClick={handleRightClick}\r\n                gameOver={gameState.gameOver}\r\n                gameWon={gameState.gameWon}\r\n            />\r\n\r\n            {(gameState.gameOver || gameState.gameWon) && (\r\n                <div className=\"mt-6 text-center\">\r\n                    <div className={`text-2xl font-bold mb-4 ${gameState.gameWon ? 'text-green-400' : 'text-red-400'\r\n                        }`}>\r\n                        {gameState.gameWon ? '🎉 You Won! 🎉' : '💥 Game Over! 💥'}\r\n                    </div>\r\n                    <button\r\n                        onClick={handleResetGame}\r\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200\"\r\n                    >\r\n                        Play Again\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n"
        }
    ]
}