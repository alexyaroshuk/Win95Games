{
    "sourceFile": "src/components/GameCell.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1756284470229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756284692303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,53 +62,43 @@\n         if (cell.isRevealed) {\r\n             if (cell.isMine) {\r\n                 return gameOver ? 'bg-red-500' : 'bg-gray-300';\r\n             }\r\n-            return 'bg-gray-100';\r\n+            return 'bg-gray-200';\r\n         }\r\n \r\n         if (cell.isFlagged) {\r\n             return 'bg-yellow-400';\r\n         }\r\n \r\n-        return 'bg-gray-500 hover:bg-gray-600';\r\n+        return 'bg-gray-400 hover:bg-gray-500';\r\n     };\r\n \r\n     const getCellBorder = () => {\r\n         if (cell.isRevealed) {\r\n-            return 'border-gray-300';\r\n+            return 'border-gray-400';\r\n         }\r\n         return 'border-gray-600';\r\n     };\r\n \r\n     return (\r\n         <button\r\n             className={`\r\n-        w-12 h-12 md:w-14 md:h-14 lg:w-16 lg:h-16\r\n+        w-8 h-8 md:w-10 md:h-10\r\n         border-2 ${getCellBorder()}\r\n         ${getCellBackground()}\r\n         flex items-center justify-center\r\n-        font-bold text-lg md:text-xl lg:text-2xl\r\n-        transition-all duration-200 ease-in-out\r\n+        font-bold text-sm md:text-base\r\n+        transition-all duration-150\r\n         ${getCellColor()}\r\n         ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\r\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\r\n-        min-w-0 min-h-0\r\n-        shadow-md hover:shadow-lg\r\n-        rounded-sm\r\n-        transform-gpu\r\n-        focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\r\n-        focus:ring-offset-2 focus:ring-offset-gray-800\r\n-        relative overflow-hidden\r\n       `}\r\n             onClick={onClick}\r\n             onContextMenu={onRightClick}\r\n             disabled={cell.isRevealed || gameOver || gameWon}\r\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\r\n         >\r\n-            {!cell.isRevealed && !gameOver && !gameWon && (\r\n-                <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-white/5 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-200\"></div>\r\n-            )}\r\n             {getCellContent()}\r\n         </button>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1756284722315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,104 @@\n-'use client';\r\n-\r\n-import React from 'react';\r\n-import { Cell } from './MinesweeperGame';\r\n-\r\n-interface GameCellProps {\r\n-    cell: Cell;\r\n-    onClick: () => void;\r\n-    onRightClick: (e: React.MouseEvent) => void;\r\n-    gameOver: boolean;\r\n-    gameWon: boolean;\r\n-}\r\n-\r\n-export const GameCell: React.FC<GameCellProps> = ({\r\n-    cell,\r\n-    onClick,\r\n-    onRightClick,\r\n-    gameOver,\r\n-    gameWon\r\n-}) => {\r\n-    const getCellContent = () => {\r\n-        if (cell.isFlagged) {\r\n-            return 'ðŸš©';\r\n-        }\r\n-\r\n-        if (!cell.isRevealed) {\r\n-            return '';\r\n-        }\r\n-\r\n-        if (cell.isMine) {\r\n-            return 'ðŸ’£';\r\n-        }\r\n-\r\n-        if (cell.neighborMines === 0) {\r\n-            return '';\r\n-        }\r\n-\r\n-        return cell.neighborMines.toString();\r\n-    };\r\n-\r\n-    const getCellColor = () => {\r\n-        if (!cell.isRevealed) return '';\r\n-\r\n-        if (cell.isMine) return 'text-red-600';\r\n-\r\n-        const colors = [\r\n-            '', // 0 - no color\r\n-            'text-blue-600', // 1\r\n-            'text-green-600', // 2\r\n-            'text-red-600', // 3\r\n-            'text-purple-600', // 4\r\n-            'text-yellow-600', // 5\r\n-            'text-cyan-600', // 6\r\n-            'text-pink-600', // 7\r\n-            'text-orange-600' // 8\r\n-        ];\r\n-\r\n-        return colors[cell.neighborMines] || '';\r\n-    };\r\n-\r\n-    const getCellBackground = () => {\r\n-        if (cell.isRevealed) {\r\n-            if (cell.isMine) {\r\n-                return gameOver ? 'bg-red-500' : 'bg-gray-300';\r\n-            }\r\n-            return 'bg-gray-200';\r\n-        }\r\n-\r\n-        if (cell.isFlagged) {\r\n-            return 'bg-yellow-400';\r\n-        }\r\n-\r\n-        return 'bg-gray-400 hover:bg-gray-500';\r\n-    };\r\n-\r\n-    const getCellBorder = () => {\r\n-        if (cell.isRevealed) {\r\n-            return 'border-gray-400';\r\n-        }\r\n-        return 'border-gray-600';\r\n-    };\r\n-\r\n-    return (\r\n-        <button\r\n-            className={`\r\n-        w-8 h-8 md:w-10 md:h-10\r\n-        border-2 ${getCellBorder()}\r\n-        ${getCellBackground()}\r\n-        flex items-center justify-center\r\n-        font-bold text-sm md:text-base\r\n-        transition-all duration-150\r\n-        ${getCellColor()}\r\n-        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\r\n-        ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\r\n-      `}\r\n-            onClick={onClick}\r\n-            onContextMenu={onRightClick}\r\n-            disabled={cell.isRevealed || gameOver || gameWon}\r\n-            aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\r\n-        >\r\n-            {getCellContent()}\r\n-        </button>\r\n-    );\r\n-};\r\n+'use client';\n+\n+import React from 'react';\n+import { Cell } from './MinesweeperGame';\n+\n+interface GameCellProps {\n+    cell: Cell;\n+    onClick: () => void;\n+    onRightClick: (e: React.MouseEvent) => void;\n+    gameOver: boolean;\n+    gameWon: boolean;\n+}\n+\n+export const GameCell: React.FC<GameCellProps> = ({\n+    cell,\n+    onClick,\n+    onRightClick,\n+    gameOver,\n+    gameWon\n+}) => {\n+    const getCellContent = () => {\n+        if (cell.isFlagged) {\n+            return 'ðŸš©';\n+        }\n+\n+        if (!cell.isRevealed) {\n+            return '';\n+        }\n+\n+        if (cell.isMine) {\n+            return 'ðŸ’£';\n+        }\n+\n+        if (cell.neighborMines === 0) {\n+            return '';\n+        }\n+\n+        return cell.neighborMines.toString();\n+    };\n+\n+    const getCellColor = () => {\n+        if (!cell.isRevealed) return '';\n+\n+        if (cell.isMine) return 'text-red-600';\n+\n+        const colors = [\n+            '', // 0 - no color\n+            'text-blue-600', // 1\n+            'text-green-600', // 2\n+            'text-red-600', // 3\n+            'text-purple-600', // 4\n+            'text-yellow-600', // 5\n+            'text-cyan-600', // 6\n+            'text-pink-600', // 7\n+            'text-orange-600' // 8\n+        ];\n+\n+        return colors[cell.neighborMines] || '';\n+    };\n+\n+    const getCellBackground = () => {\n+        if (cell.isRevealed) {\n+            if (cell.isMine) {\n+                return gameOver ? 'bg-red-500' : 'bg-gray-300';\n+            }\n+            return 'bg-gray-200';\n+        }\n+\n+        if (cell.isFlagged) {\n+            return 'bg-yellow-400';\n+        }\n+\n+        return 'bg-gray-400 hover:bg-gray-500';\n+    };\n+\n+    const getCellBorder = () => {\n+        if (cell.isRevealed) {\n+            return 'border-gray-400';\n+        }\n+        return 'border-gray-600';\n+    };\n+\n+    return (\n+        <button\n+            className={`\n+        w-8 h-8 md:w-10 md:h-10\n+        border-2 ${getCellBorder()}\n+        ${getCellBackground()}\n+        flex items-center justify-center\n+        font-bold text-sm md:text-base\n+        transition-all duration-150\n+        ${getCellColor()}\n+        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\n+        ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n+      `}\n+            onClick={onClick}\n+            onContextMenu={onRightClick}\n+            disabled={cell.isRevealed || gameOver || gameWon}\n+            aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n+        >\n+            {getCellContent()}\n+        </button>\n+    );\n+};\n"
                },
                {
                    "date": 1756284817296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,16 +62,16 @@\n         if (cell.isRevealed) {\n             if (cell.isMine) {\n                 return gameOver ? 'bg-red-500' : 'bg-gray-300';\n             }\n-            return 'bg-gray-200';\n+            return 'bg-gray-100';\n         }\n \n         if (cell.isFlagged) {\n             return 'bg-yellow-400';\n         }\n \n-        return 'bg-gray-400 hover:bg-gray-500';\n+        return 'bg-gray-600 hover:bg-gray-500';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n@@ -82,17 +82,19 @@\n \n     return (\n         <button\n             className={`\n-        w-8 h-8 md:w-10 md:h-10\n+        w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16\n         border-2 ${getCellBorder()}\n         ${getCellBackground()}\n         flex items-center justify-center\n-        font-bold text-sm md:text-base\n+        font-bold text-base sm:text-lg md:text-xl\n         transition-all duration-150\n+        rounded-sm\n         ${getCellColor()}\n         ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n+        aspect-square\n       `}\n             onClick={onClick}\n             onContextMenu={onRightClick}\n             disabled={cell.isRevealed || gameOver || gameWon}\n"
                },
                {
                    "date": 1756285074672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \n     return (\n         <button\n             className={`\n-        w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16\n+        w-full h-full\n         border-2 ${getCellBorder()}\n         ${getCellBackground()}\n         flex items-center justify-center\n         font-bold text-base sm:text-lg md:text-xl\n@@ -93,8 +93,9 @@\n         ${getCellColor()}\n         ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n         aspect-square\n+        box-border\n       `}\n             onClick={onClick}\n             onContextMenu={onRightClick}\n             disabled={cell.isRevealed || gameOver || gameWon}\n"
                },
                {
                    "date": 1756285788243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,27 +60,34 @@\n \n     const getCellBackground = () => {\n         if (cell.isRevealed) {\n             if (cell.isMine) {\n-                return gameOver ? 'bg-red-500' : 'bg-gray-300';\n+                return gameOver ? 'bg-red-500' : 'bg-gray-200';\n             }\n-            return 'bg-gray-100';\n+            return 'bg-gray-50';\n         }\n \n         if (cell.isFlagged) {\n             return 'bg-yellow-400';\n         }\n \n-        return 'bg-gray-600 hover:bg-gray-500';\n+        return 'bg-gray-500';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n-            return 'border-gray-400';\n+            return 'border-gray-300';\n         }\n-        return 'border-gray-600';\n+        return 'border-gray-700';\n     };\n \n+    const getCellStyle = () => {\n+        if (cell.isRevealed) {\n+            return 'shadow-inner border-t-gray-200 border-l-gray-200 border-r-gray-400 border-b-gray-400';\n+        }\n+        return 'shadow-lg border-t-gray-300 border-l-gray-300 border-r-gray-700 border-b-gray-700';\n+    };\n+\n     return (\n         <button\n             className={`\n         w-full h-full\n@@ -90,9 +97,10 @@\n         font-bold text-base sm:text-lg md:text-xl\n         transition-all duration-150\n         rounded-sm\n         ${getCellColor()}\n-        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\n+        ${getCellStyle()}\n+        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95 hover:shadow-xl' : ''}\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n         aspect-square\n         box-border\n       `}\n"
                },
                {
                    "date": 1756285963958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,26 +34,31 @@\n         if (cell.neighborMines === 0) {\n             return '';\n         }\n \n-        return cell.neighborMines.toString();\n+        return (\n+            <span className=\"cell-number text-2xl\">\n+                {cell.neighborMines.toString()}\n+            </span>\n+        );\n     };\n \n     const getCellColor = () => {\n         if (!cell.isRevealed) return '';\n \n         if (cell.isMine) return 'text-red-600';\n \n+        // Microsoft Minesweeper classic colors\n         const colors = [\n             '', // 0 - no color\n-            'text-blue-600', // 1\n-            'text-green-600', // 2\n-            'text-red-600', // 3\n-            'text-purple-600', // 4\n-            'text-yellow-600', // 5\n-            'text-cyan-600', // 6\n-            'text-pink-600', // 7\n-            'text-orange-600' // 8\n+            'text-blue-600', // 1 - Blue\n+            'text-green-600', // 2 - Green\n+            'text-red-600', // 3 - Red\n+            'text-purple-800', // 4 - Dark Purple\n+            'text-red-800', // 5 - Dark Red\n+            'text-cyan-600', // 6 - Cyan\n+            'text-black', // 7 - Black\n+            'text-gray-600' // 8 - Gray\n         ];\n \n         return colors[cell.neighborMines] || '';\n     };\n@@ -69,41 +74,46 @@\n         if (cell.isFlagged) {\n             return 'bg-yellow-400';\n         }\n \n-        return 'bg-gray-500';\n+        return 'bg-gray-300';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n             return 'border-gray-300';\n         }\n-        return 'border-gray-700';\n+        return 'border-gray-500';\n     };\n \n     const getCellStyle = () => {\n         if (cell.isRevealed) {\n-            return 'shadow-inner border-t-gray-200 border-l-gray-200 border-r-gray-400 border-b-gray-400';\n+            return 'border-2 border-gray-300 shadow-inner bg-gray-50';\n         }\n-        return 'shadow-lg border-t-gray-300 border-l-gray-300 border-r-gray-700 border-b-gray-700';\n+\n+        if (cell.isFlagged) {\n+            return 'border-2 border-gray-500 shadow-inner bg-yellow-400';\n+        }\n+\n+        // 3D embossed effect for unrevealed cells\n+        return 'border-2 border-gray-400 cell-3d shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.3),inset_2px_2px_4px_rgba(255,255,255,0.3)]';\n     };\n \n     return (\n         <button\n             className={`\n         w-full h-full\n-        border-2 ${getCellBorder()}\n         ${getCellBackground()}\n         flex items-center justify-center\n         font-bold text-base sm:text-lg md:text-xl\n         transition-all duration-150\n         rounded-sm\n         ${getCellColor()}\n-        ${getCellStyle()}\n-        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95 hover:shadow-xl' : ''}\n+        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n         aspect-square\n         box-border\n+        ${getCellStyle()}\n       `}\n             onClick={onClick}\n             onContextMenu={onRightClick}\n             disabled={cell.isRevealed || gameOver || gameWon}\n"
                },
                {
                    "date": 1756286009789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         if (cell.isFlagged) {\n             return 'bg-yellow-400';\n         }\n \n-        return 'bg-gray-300';\n+        return 'bg-gray-600';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n@@ -94,9 +94,9 @@\n             return 'border-2 border-gray-500 shadow-inner bg-yellow-400';\n         }\n \n         // 3D embossed effect for unrevealed cells\n-        return 'border-2 border-gray-400 cell-3d shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.3),inset_2px_2px_4px_rgba(255,255,255,0.3)]';\n+        return 'border-2 border-gray-500 cell-3d shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.4),inset_2px_2px_4px_rgba(255,255,255,0.2)]';\n     };\n \n     return (\n         <button\n"
                },
                {
                    "date": 1756286215342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,12 +111,19 @@\n         ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n         aspect-square\n         box-border\n+        game-cell\n         ${getCellStyle()}\n       `}\n             onClick={onClick}\n             onContextMenu={onRightClick}\n+            onMouseDown={(e) => {\n+                if (e.button === 2) { // Right mouse button\n+                    e.preventDefault();\n+                    onRightClick(e);\n+                }\n+            }}\n             disabled={cell.isRevealed || gameOver || gameWon}\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n         >\n             {getCellContent()}\n"
                },
                {
                    "date": 1756286397232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     gameWon\n }) => {\n     const getCellContent = () => {\n         if (cell.isFlagged) {\n-            return 'ðŸš©';\n+            return <span className=\"text-2xl\">ðŸš©</span>;\n         }\n \n         if (!cell.isRevealed) {\n             return '';\n@@ -86,13 +86,13 @@\n     };\n \n     const getCellStyle = () => {\n         if (cell.isRevealed) {\n-            return 'border-2 border-gray-300 shadow-inner bg-gray-50';\n+            return 'border-2 border-gray-300 shadow-inner';\n         }\n \n         if (cell.isFlagged) {\n-            return 'border-2 border-gray-500 shadow-inner bg-yellow-400';\n+            return 'border-2 border-gray-500 shadow-inner';\n         }\n \n         // 3D embossed effect for unrevealed cells\n         return 'border-2 border-gray-500 cell-3d shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.4),inset_2px_2px_4px_rgba(255,255,255,0.2)]';\n@@ -116,14 +116,8 @@\n         ${getCellStyle()}\n       `}\n             onClick={onClick}\n             onContextMenu={onRightClick}\n-            onMouseDown={(e) => {\n-                if (e.button === 2) { // Right mouse button\n-                    e.preventDefault();\n-                    onRightClick(e);\n-                }\n-            }}\n             disabled={cell.isRevealed || gameOver || gameWon}\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n         >\n             {getCellContent()}\n"
                },
                {
                    "date": 1756286519394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,10 @@\n     onRightClick,\n     gameOver,\n     gameWon\n }) => {\n+    // Debug logging\n+    console.log('GameCell render:', cell.row, cell.col, 'flagged:', cell.isFlagged, 'revealed:', cell.isRevealed);\n     const getCellContent = () => {\n         if (cell.isFlagged) {\n             return <span className=\"text-2xl\">ðŸš©</span>;\n         }\n@@ -115,9 +117,13 @@\n         game-cell\n         ${getCellStyle()}\n       `}\n             onClick={onClick}\n-            onContextMenu={onRightClick}\n+            onContextMenu={(e) => {\n+                e.preventDefault();\n+                console.log('Context menu event on cell:', cell.row, cell.col);\n+                onRightClick(e);\n+            }}\n             disabled={cell.isRevealed || gameOver || gameWon}\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n         >\n             {getCellContent()}\n"
                },
                {
                    "date": 1756286685519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,9 @@\n     onRightClick,\n     gameOver,\n     gameWon\n }) => {\n-    // Debug logging\n-    console.log('GameCell render:', cell.row, cell.col, 'flagged:', cell.isFlagged, 'revealed:', cell.isRevealed);\n+\n     const getCellContent = () => {\n         if (cell.isFlagged) {\n             return <span className=\"text-2xl\">ðŸš©</span>;\n         }\n@@ -76,9 +75,9 @@\n         if (cell.isFlagged) {\n             return 'bg-yellow-400';\n         }\n \n-        return 'bg-gray-600';\n+        return 'bg-gray-800';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n@@ -106,12 +105,10 @@\n         w-full h-full\n         ${getCellBackground()}\n         flex items-center justify-center\n         font-bold text-base sm:text-lg md:text-xl\n-        transition-all duration-150\n         rounded-sm\n         ${getCellColor()}\n-        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n         aspect-square\n         box-border\n         game-cell\n@@ -119,9 +116,8 @@\n       `}\n             onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n-                console.log('Context menu event on cell:', cell.row, cell.col);\n                 onRightClick(e);\n             }}\n             disabled={cell.isRevealed || gameOver || gameWon}\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n"
                },
                {
                    "date": 1756286825770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,13 +71,10 @@\n             }\n             return 'bg-gray-50';\n         }\n \n-        if (cell.isFlagged) {\n-            return 'bg-yellow-400';\n-        }\n-\n-        return 'bg-gray-800';\n+        // Flagged cells keep unrevealed background style\n+        return 'bg-gray-900';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n@@ -106,8 +103,9 @@\n         ${getCellBackground()}\n         flex items-center justify-center\n         font-bold text-base sm:text-lg md:text-xl\n         rounded-sm\n+        ${cell.isRevealed ? 'animate-reveal' : ''}\n         ${getCellColor()}\n         ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n         aspect-square\n         box-border\n"
                },
                {
                    "date": 1756286882224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n             return 'bg-gray-50';\n         }\n \n         // Flagged cells keep unrevealed background style\n-        return 'bg-gray-900';\n+        return 'bg-red-800';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n"
                },
                {
                    "date": 1756286971770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n             return 'border-2 border-gray-500 shadow-inner';\n         }\n \n         // 3D embossed effect for unrevealed cells\n-        return 'border-2 border-gray-500 cell-3d shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.4),inset_2px_2px_4px_rgba(255,255,255,0.2)]';\n+        return 'border-2 border-gray-500 shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.4),inset_2px_2px_4px_rgba(255,255,255,0.2)]';\n     };\n \n     return (\n         <button\n"
                },
                {
                    "date": 1756287138871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,10 +71,14 @@\n             }\n             return 'bg-gray-50';\n         }\n \n-        // Flagged cells keep unrevealed background style\n-        return 'bg-red-800';\n+        // Unrevealed cells should have a dark background\n+        if (cell.isFlagged) {\n+            return 'bg-red-800';\n+        }\n+\n+        return 'bg-gray-700';\n     };\n \n     const getCellBorder = () => {\n         if (cell.isRevealed) {\n"
                },
                {
                    "date": 1756287336942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,114 +17,48 @@\n     onRightClick,\n     gameOver,\n     gameWon\n }) => {\n+    // Simple styling based on cell state\n+    const getStyles = () => {\n+        const base = 'w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 transition-all';\n \n-    const getCellContent = () => {\n-        if (cell.isFlagged) {\n-            return <span className=\"text-2xl\">ðŸš©</span>;\n-        }\n-\n-        if (!cell.isRevealed) {\n-            return '';\n-        }\n-\n-        if (cell.isMine) {\n-            return 'ðŸ’£';\n-        }\n-\n-        if (cell.neighborMines === 0) {\n-            return '';\n-        }\n-\n-        return (\n-            <span className=\"cell-number text-2xl\">\n-                {cell.neighborMines.toString()}\n-            </span>\n-        );\n-    };\n-\n-    const getCellColor = () => {\n-        if (!cell.isRevealed) return '';\n-\n-        if (cell.isMine) return 'text-red-600';\n-\n-        // Microsoft Minesweeper classic colors\n-        const colors = [\n-            '', // 0 - no color\n-            'text-blue-600', // 1 - Blue\n-            'text-green-600', // 2 - Green\n-            'text-red-600', // 3 - Red\n-            'text-purple-800', // 4 - Dark Purple\n-            'text-red-800', // 5 - Dark Red\n-            'text-cyan-600', // 6 - Cyan\n-            'text-black', // 7 - Black\n-            'text-gray-600' // 8 - Gray\n-        ];\n-\n-        return colors[cell.neighborMines] || '';\n-    };\n-\n-    const getCellBackground = () => {\n         if (cell.isRevealed) {\n             if (cell.isMine) {\n-                return gameOver ? 'bg-red-500' : 'bg-gray-200';\n+                return `${base} bg-red-500 border-red-600 cursor-default`;\n             }\n-            return 'bg-gray-50';\n+            return `${base} bg-gray-50 border-gray-300 shadow-inner cursor-default`;\n         }\n \n-        // Unrevealed cells should have a dark background\n         if (cell.isFlagged) {\n-            return 'bg-red-800';\n+            return `${base} bg-red-800 border-red-900 shadow-inner cursor-pointer`;\n         }\n \n-        return 'bg-gray-700';\n+        // Unrevealed cell - dark and raised\n+        return `${base} bg-gray-800 border-gray-600 cursor-pointer hover:bg-gray-700`;\n     };\n \n-    const getCellBorder = () => {\n-        if (cell.isRevealed) {\n-            return 'border-gray-300';\n-        }\n-        return 'border-gray-500';\n-    };\n+    const getContent = () => {\n+        if (cell.isFlagged) return 'ðŸš©';\n+        if (!cell.isRevealed) return '';\n+        if (cell.isMine) return 'ðŸ’£';\n+        if (cell.neighborMines === 0) return '';\n \n-    const getCellStyle = () => {\n-        if (cell.isRevealed) {\n-            return 'border-2 border-gray-300 shadow-inner';\n-        }\n-\n-        if (cell.isFlagged) {\n-            return 'border-2 border-gray-500 shadow-inner';\n-        }\n-\n-        // 3D embossed effect for unrevealed cells\n-        return 'border-2 border-gray-500 shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.4),inset_2px_2px_4px_rgba(255,255,255,0.2)]';\n+        const colors = ['', 'text-blue-600', 'text-green-600', 'text-red-600', 'text-purple-800', 'text-red-800', 'text-cyan-600', 'text-black', 'text-gray-600'];\n+        return <span className={colors[cell.neighborMines]}>{cell.neighborMines}</span>;\n     };\n \n     return (\n         <button\n-            className={`\n-        w-full h-full\n-        ${getCellBackground()}\n-        flex items-center justify-center\n-        font-bold text-base sm:text-lg md:text-xl\n-        rounded-sm\n-        ${cell.isRevealed ? 'animate-reveal' : ''}\n-        ${getCellColor()}\n-        ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n-        aspect-square\n-        box-border\n-        game-cell\n-        ${getCellStyle()}\n-      `}\n+            className={getStyles()}\n             onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n                 onRightClick(e);\n             }}\n             disabled={cell.isRevealed || gameOver || gameWon}\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n         >\n-            {getCellContent()}\n+            {getContent()}\n         </button>\n     );\n };\n"
                },
                {
                    "date": 1756287471924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,27 +17,8 @@\n     onRightClick,\n     gameOver,\n     gameWon\n }) => {\n-    // Simple styling based on cell state\n-    const getStyles = () => {\n-        const base = 'w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 transition-all';\n-\n-        if (cell.isRevealed) {\n-            if (cell.isMine) {\n-                return `${base} bg-red-500 border-red-600 cursor-default`;\n-            }\n-            return `${base} bg-gray-50 border-gray-300 shadow-inner cursor-default`;\n-        }\n-\n-        if (cell.isFlagged) {\n-            return `${base} bg-red-800 border-red-900 shadow-inner cursor-pointer`;\n-        }\n-\n-        // Unrevealed cell - dark and raised\n-        return `${base} bg-gray-800 border-gray-600 cursor-pointer hover:bg-gray-700`;\n-    };\n-\n     const getContent = () => {\n         if (cell.isFlagged) return 'ðŸš©';\n         if (!cell.isRevealed) return '';\n         if (cell.isMine) return 'ðŸ’£';\n@@ -48,9 +29,13 @@\n     };\n \n     return (\n         <button\n-            className={getStyles()}\n+            className={`\n+                w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2\n+                ${cell.isRevealed ? 'bg-white border-gray-300' : 'bg-gray-600 border-gray-500'}\n+                ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n+            `}\n             onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n                 onRightClick(e);\n"
                },
                {
                    "date": 1756287583568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,18 @@\n         const colors = ['', 'text-blue-600', 'text-green-600', 'text-red-600', 'text-purple-800', 'text-red-800', 'text-cyan-600', 'text-black', 'text-gray-600'];\n         return <span className={colors[cell.neighborMines]}>{cell.neighborMines}</span>;\n     };\n \n+    const backgroundColor = cell.isRevealed ? '#ffffff' : '#4b5563'; // white vs gray-600\n+    const borderColor = cell.isRevealed ? '#d1d5db' : '#6b7280'; // gray-300 vs gray-500\n+\n     return (\n         <button\n-            className={`\n-                w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2\n-                ${cell.isRevealed ? 'bg-white border-gray-300' : 'bg-gray-600 border-gray-500'}\n-                ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\n-            `}\n+            className=\"w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 cursor-pointer\"\n+            style={{\n+                backgroundColor: backgroundColor,\n+                borderColor: borderColor\n+            }}\n             onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n                 onRightClick(e);\n"
                },
                {
                    "date": 1756287652044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,17 +27,23 @@\n         const colors = ['', 'text-blue-600', 'text-green-600', 'text-red-600', 'text-purple-800', 'text-red-800', 'text-cyan-600', 'text-black', 'text-gray-600'];\n         return <span className={colors[cell.neighborMines]}>{cell.neighborMines}</span>;\n     };\n \n-    const backgroundColor = cell.isRevealed ? '#ffffff' : '#4b5563'; // white vs gray-600\n+    const backgroundColor = cell.isRevealed ? '#ffffff' : '#9ca3af'; // white vs gray-400 (lighter)\n     const borderColor = cell.isRevealed ? '#d1d5db' : '#6b7280'; // gray-300 vs gray-500\n \n+    // 3D embossed effect for unrevealed cells\n+    const boxShadow = cell.isRevealed\n+        ? 'none'\n+        : 'inset -2px -2px 4px rgba(0,0,0,0.3), inset 2px 2px 4px rgba(255,255,255,0.4)';\n+\n     return (\n         <button\n-            className=\"w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 cursor-pointer\"\n+            className=\"w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 cursor-pointer transition-all\"\n             style={{\n                 backgroundColor: backgroundColor,\n-                borderColor: borderColor\n+                borderColor: borderColor,\n+                boxShadow: boxShadow\n             }}\n             onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n"
                },
                {
                    "date": 1756287748787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,15 +35,20 @@\n     const boxShadow = cell.isRevealed\n         ? 'none'\n         : 'inset -2px -2px 4px rgba(0,0,0,0.3), inset 2px 2px 4px rgba(255,255,255,0.4)';\n \n+    // Smooth reveal animation\n+    const transform = cell.isRevealed ? 'scale(0.95)' : 'scale(1)';\n+\n     return (\n         <button\n-            className=\"w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 cursor-pointer transition-all\"\n+            className=\"w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 cursor-pointer\"\n             style={{\n                 backgroundColor: backgroundColor,\n                 borderColor: borderColor,\n-                boxShadow: boxShadow\n+                boxShadow: boxShadow,\n+                transform: transform,\n+                transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)'\n             }}\n             onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n"
                },
                {
                    "date": 1756291892985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,28 @@\n         if (!cell.isRevealed) return '';\n         if (cell.isMine) return 'ðŸ’£';\n         if (cell.neighborMines === 0) return '';\n \n-        const colors = ['', 'text-blue-600', 'text-green-600', 'text-red-600', 'text-purple-800', 'text-red-800', 'text-cyan-600', 'text-black', 'text-gray-600'];\n-        return <span className={colors[cell.neighborMines]}>{cell.neighborMines}</span>;\n+        // Classic Minesweeper colors - bold numbers\n+        const getNumberStyle = (num: number) => {\n+            const colors = {\n+                1: '#0000FF', // Blue\n+                2: '#008000', // Green\n+                3: '#FF0000', // Red\n+                4: '#000080', // Navy/Dark Blue\n+                5: '#800000', // Maroon/Dark Red\n+                6: '#008080', // Teal\n+                7: '#000000', // Black\n+                8: '#808080'  // Gray\n+            };\n+            return {\n+                color: colors[num as keyof typeof colors] || '#000000',\n+                fontWeight: 'bold',\n+                fontSize: '18px'\n+            };\n+        };\n+\n+        return <span style={getNumberStyle(cell.neighborMines)}>{cell.neighborMines}</span>;\n     };\n \n     const backgroundColor = cell.isRevealed ? '#ffffff' : '#9ca3af'; // white vs gray-400 (lighter)\n     const borderColor = cell.isRevealed ? '#d1d5db' : '#6b7280'; // gray-300 vs gray-500\n"
                },
                {
                    "date": 1756292076464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n }) => {\n     const getContent = () => {\n         if (cell.isFlagged) return 'ðŸš©';\n         if (!cell.isRevealed) return '';\n-        if (cell.isMine) return 'ðŸ’£';\n+        if (cell.isMine) return 'âš«'; // Changed from ðŸ’£ to âš«\n         if (cell.neighborMines === 0) return '';\n \n         // Classic Minesweeper colors - bold numbers\n         const getNumberStyle = (num: number) => {\n@@ -45,9 +45,10 @@\n \n         return <span style={getNumberStyle(cell.neighborMines)}>{cell.neighborMines}</span>;\n     };\n \n-    const backgroundColor = cell.isRevealed ? '#ffffff' : '#9ca3af'; // white vs gray-400 (lighter)\n+    // Background color logic - red for clicked mine, white for revealed, gray for unrevealed\n+    const backgroundColor = cell.isClickedMine ? '#ff4444' : (cell.isRevealed ? '#ffffff' : '#9ca3af');\n     const borderColor = cell.isRevealed ? '#d1d5db' : '#6b7280'; // gray-300 vs gray-500\n \n     // 3D embossed effect for unrevealed cells\n     const boxShadow = cell.isRevealed\n"
                },
                {
                    "date": 1756292175623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n }) => {\n     const getContent = () => {\n         if (cell.isFlagged) return 'ðŸš©';\n         if (!cell.isRevealed) return '';\n-        if (cell.isMine) return 'âš«'; // Changed from ðŸ’£ to âš«\n+        if (cell.isMine) return 'ðŸ’£';\n         if (cell.neighborMines === 0) return '';\n \n         // Classic Minesweeper colors - bold numbers\n         const getNumberStyle = (num: number) => {\n"
                },
                {
                    "date": 1756292417159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,35 +45,69 @@\n \n         return <span style={getNumberStyle(cell.neighborMines)}>{cell.neighborMines}</span>;\n     };\n \n-    // Background color logic - red for clicked mine, white for revealed, gray for unrevealed\n-    const backgroundColor = cell.isClickedMine ? '#ff4444' : (cell.isRevealed ? '#ffffff' : '#9ca3af');\n-    const borderColor = cell.isRevealed ? '#d1d5db' : '#6b7280'; // gray-300 vs gray-500\n+    // Classic Minesweeper cell styling\n+    const getCellStyle = () => {\n+        const baseStyle = {\n+            width: '20px',\n+            height: '20px',\n+            margin: '0',\n+            padding: '0',\n+            fontSize: '12px',\n+            fontWeight: 'bold',\n+            fontFamily: 'MS Sans Serif, sans-serif',\n+            display: 'flex',\n+            alignItems: 'center',\n+            justifyContent: 'center',\n+            cursor: cell.isRevealed ? 'default' : 'pointer'\n+        };\n \n-    // 3D embossed effect for unrevealed cells\n-    const boxShadow = cell.isRevealed\n-        ? 'none'\n-        : 'inset -2px -2px 4px rgba(0,0,0,0.3), inset 2px 2px 4px rgba(255,255,255,0.4)';\n+        if (cell.isRevealed) {\n+            return {\n+                ...baseStyle,\n+                backgroundColor: cell.isClickedMine ? '#ff0000' : '#c0c0c0',\n+                border: '1px solid #808080',\n+                color: cell.isMine ? '#000000' : 'inherit'\n+            };\n+        } else {\n+            return {\n+                ...baseStyle,\n+                backgroundColor: '#c0c0c0',\n+                border: '2px outset #c0c0c0'\n+            };\n+        }\n+    };\n \n-    // Smooth reveal animation\n-    const transform = cell.isRevealed ? 'scale(0.95)' : 'scale(1)';\n+    const handleMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n+        if (!cell.isRevealed && !gameOver && !gameWon) {\n+            e.currentTarget.style.border = '1px inset #c0c0c0';\n+        }\n+    };\n \n+    const handleMouseUp = (e: React.MouseEvent<HTMLButtonElement>) => {\n+        if (!cell.isRevealed && !gameOver && !gameWon) {\n+            e.currentTarget.style.border = '2px outset #c0c0c0';\n+        }\n+    };\n+\n+    const handleMouseLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n+        if (!cell.isRevealed && !gameOver && !gameWon) {\n+            e.currentTarget.style.border = '2px outset #c0c0c0';\n+        }\n+    };\n+\n     return (\n         <button\n-            className=\"w-full h-full flex items-center justify-center font-bold text-2xl rounded-sm aspect-square border-2 cursor-pointer\"\n-            style={{\n-                backgroundColor: backgroundColor,\n-                borderColor: borderColor,\n-                boxShadow: boxShadow,\n-                transform: transform,\n-                transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)'\n-            }}\n+            style={getCellStyle()}\n             onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n                 onRightClick(e);\n             }}\n+            onMouseDown={handleMouseDown}\n+            onMouseUp={handleMouseUp}\n+            onMouseLeave={handleMouseLeave}\n             disabled={cell.isRevealed || gameOver || gameWon}\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n         >\n             {getContent()}\n"
                },
                {
                    "date": 1756293909537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,10 @@\n             fontFamily: 'MS Sans Serif, sans-serif',\n             display: 'flex',\n             alignItems: 'center',\n             justifyContent: 'center',\n-            cursor: cell.isRevealed ? 'default' : 'pointer'\n+            cursor: cell.isRevealed ? 'default' : 'pointer',\n+            boxSizing: 'border-box' as const\n         };\n \n         if (cell.isRevealed) {\n             return {\n"
                },
                {
                    "date": 1756296026304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,9 @@\n             fontFamily: 'MS Sans Serif, sans-serif',\n             display: 'flex',\n             alignItems: 'center',\n             justifyContent: 'center',\n-            cursor: cell.isRevealed ? 'default' : 'pointer',\n-            boxSizing: 'border-box' as const\n+            cursor: cell.isRevealed ? 'default' : 'pointer'\n         };\n \n         if (cell.isRevealed) {\n             return {\n"
                },
                {
                    "date": 1756298144823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,10 @@\n \n         if (cell.isRevealed) {\n             return {\n                 ...baseStyle,\n-                backgroundColor: cell.isClickedMine ? '#ff0000' : '#c0c0c0',\n-                border: '1px solid #808080',\n+                backgroundColor: cell.isClickedMine ? '#ff0000' : '#f0f0f0',\n+                border: '1px solid #d0d0d0',\n                 color: cell.isMine ? '#000000' : 'inherit'\n             };\n         } else {\n             return {\n"
                },
                {
                    "date": 1756315617225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React from 'react';\n+import React, { useState, useEffect } from 'react';\n import { Cell } from './MinesweeperGame';\n \n interface GameCellProps {\n     cell: Cell;\n@@ -17,8 +17,23 @@\n     onRightClick,\n     gameOver,\n     gameWon\n }) => {\n+    const [isClicking, setIsClicking] = useState(false);\n+\n+    // Handle click animation\n+    const handleClick = () => {\n+        if (!cell.isRevealed && !gameOver && !gameWon) {\n+            setIsClicking(true);\n+            // Show reveal style briefly (100ms) before calling onClick\n+            setTimeout(() => {\n+                setIsClicking(false);\n+                onClick();\n+            }, 100);\n+        } else {\n+            onClick();\n+        }\n+    };\n     const getContent = () => {\n         if (cell.isFlagged) return 'ðŸš©';\n         if (!cell.isRevealed) return '';\n         if (cell.isMine) return 'ðŸ’£';\n@@ -68,8 +83,15 @@\n                 backgroundColor: cell.isClickedMine ? '#ff0000' : '#f0f0f0',\n                 border: '1px solid #d0d0d0',\n                 color: cell.isMine ? '#000000' : 'inherit'\n             };\n+        } else if (isClicking) {\n+            // Brief reveal style when clicking\n+            return {\n+                ...baseStyle,\n+                backgroundColor: '#f0f0f0',\n+                border: '1px solid #d0d0d0'\n+            };\n         } else {\n             return {\n                 ...baseStyle,\n                 backgroundColor: '#c0c0c0',\n@@ -98,9 +120,9 @@\n \n     return (\n         <button\n             style={getCellStyle()}\n-            onClick={onClick}\n+            onClick={handleClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n                 onRightClick(e);\n             }}\n"
                },
                {
                    "date": 1756315782905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,20 +102,23 @@\n \n     const handleMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n         if (!cell.isRevealed && !gameOver && !gameWon) {\n             e.currentTarget.style.border = '1px inset #c0c0c0';\n+            e.currentTarget.style.backgroundColor = '#f0f0f0';\n         }\n     };\n \n     const handleMouseUp = (e: React.MouseEvent<HTMLButtonElement>) => {\n         if (!cell.isRevealed && !gameOver && !gameWon) {\n             e.currentTarget.style.border = '2px outset #c0c0c0';\n+            e.currentTarget.style.backgroundColor = '#c0c0c0';\n         }\n     };\n \n     const handleMouseLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n         if (!cell.isRevealed && !gameOver && !gameWon) {\n             e.currentTarget.style.border = '2px outset #c0c0c0';\n+            e.currentTarget.style.backgroundColor = '#c0c0c0';\n         }\n     };\n \n     return (\n"
                },
                {
                    "date": 1756315837283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React, { useState, useEffect } from 'react';\n+import React from 'react';\n import { Cell } from './MinesweeperGame';\n \n interface GameCellProps {\n     cell: Cell;\n@@ -17,23 +17,8 @@\n     onRightClick,\n     gameOver,\n     gameWon\n }) => {\n-    const [isClicking, setIsClicking] = useState(false);\n-\n-    // Handle click animation\n-    const handleClick = () => {\n-        if (!cell.isRevealed && !gameOver && !gameWon) {\n-            setIsClicking(true);\n-            // Show reveal style briefly (100ms) before calling onClick\n-            setTimeout(() => {\n-                setIsClicking(false);\n-                onClick();\n-            }, 100);\n-        } else {\n-            onClick();\n-        }\n-    };\n     const getContent = () => {\n         if (cell.isFlagged) return 'ðŸš©';\n         if (!cell.isRevealed) return '';\n         if (cell.isMine) return 'ðŸ’£';\n@@ -83,15 +68,8 @@\n                 backgroundColor: cell.isClickedMine ? '#ff0000' : '#f0f0f0',\n                 border: '1px solid #d0d0d0',\n                 color: cell.isMine ? '#000000' : 'inherit'\n             };\n-        } else if (isClicking) {\n-            // Brief reveal style when clicking\n-            return {\n-                ...baseStyle,\n-                backgroundColor: '#f0f0f0',\n-                border: '1px solid #d0d0d0'\n-            };\n         } else {\n             return {\n                 ...baseStyle,\n                 backgroundColor: '#c0c0c0',\n@@ -123,9 +101,9 @@\n \n     return (\n         <button\n             style={getCellStyle()}\n-            onClick={handleClick}\n+            onClick={onClick}\n             onContextMenu={(e) => {\n                 e.preventDefault();\n                 onRightClick(e);\n             }}\n"
                },
                {
                    "date": 1756316238223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,26 @@\n interface GameCellProps {\n     cell: Cell;\n     onClick: () => void;\n     onRightClick: (e: React.MouseEvent) => void;\n+    onMouseDown: () => void;\n+    onMouseUp: () => void;\n+    onMouseEnter: () => void;\n     gameOver: boolean;\n     gameWon: boolean;\n+    isDragging: boolean;\n }\n \n export const GameCell: React.FC<GameCellProps> = ({\n     cell,\n     onClick,\n     onRightClick,\n+    onMouseDown,\n+    onMouseUp,\n+    onMouseEnter,\n     gameOver,\n-    gameWon\n+    gameWon,\n+    isDragging\n }) => {\n     const getContent = () => {\n         if (cell.isFlagged) return 'ðŸš©';\n         if (!cell.isRevealed) return '';\n@@ -106,10 +114,25 @@\n             onContextMenu={(e) => {\n                 e.preventDefault();\n                 onRightClick(e);\n             }}\n-            onMouseDown={handleMouseDown}\n-            onMouseUp={handleMouseUp}\n+            onMouseDown={(e) => {\n+                handleMouseDown(e);\n+                onMouseDown();\n+            }}\n+            onMouseUp={(e) => {\n+                handleMouseUp(e);\n+                onMouseUp();\n+            }}\n+            onMouseEnter={(e) => {\n+                if (isDragging && !cell.isRevealed && !gameOver && !gameWon) {\n+                    // Show hover effect when dragging over cells\n+                    const button = e.currentTarget as HTMLButtonElement;\n+                    button.style.backgroundColor = '#f0f0f0';\n+                    button.style.border = '1px inset #c0c0c0';\n+                }\n+                onMouseEnter();\n+            }}\n             onMouseLeave={handleMouseLeave}\n             disabled={cell.isRevealed || gameOver || gameWon}\n             aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\n         >\n"
                }
            ],
            "date": 1756284470229,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport React from 'react';\r\nimport { Cell } from './MinesweeperGame';\r\n\r\ninterface GameCellProps {\r\n    cell: Cell;\r\n    onClick: () => void;\r\n    onRightClick: (e: React.MouseEvent) => void;\r\n    gameOver: boolean;\r\n    gameWon: boolean;\r\n}\r\n\r\nexport const GameCell: React.FC<GameCellProps> = ({\r\n    cell,\r\n    onClick,\r\n    onRightClick,\r\n    gameOver,\r\n    gameWon\r\n}) => {\r\n    const getCellContent = () => {\r\n        if (cell.isFlagged) {\r\n            return 'ðŸš©';\r\n        }\r\n\r\n        if (!cell.isRevealed) {\r\n            return '';\r\n        }\r\n\r\n        if (cell.isMine) {\r\n            return 'ðŸ’£';\r\n        }\r\n\r\n        if (cell.neighborMines === 0) {\r\n            return '';\r\n        }\r\n\r\n        return cell.neighborMines.toString();\r\n    };\r\n\r\n    const getCellColor = () => {\r\n        if (!cell.isRevealed) return '';\r\n\r\n        if (cell.isMine) return 'text-red-600';\r\n\r\n        const colors = [\r\n            '', // 0 - no color\r\n            'text-blue-600', // 1\r\n            'text-green-600', // 2\r\n            'text-red-600', // 3\r\n            'text-purple-600', // 4\r\n            'text-yellow-600', // 5\r\n            'text-cyan-600', // 6\r\n            'text-pink-600', // 7\r\n            'text-orange-600' // 8\r\n        ];\r\n\r\n        return colors[cell.neighborMines] || '';\r\n    };\r\n\r\n    const getCellBackground = () => {\r\n        if (cell.isRevealed) {\r\n            if (cell.isMine) {\r\n                return gameOver ? 'bg-red-500' : 'bg-gray-300';\r\n            }\r\n            return 'bg-gray-100';\r\n        }\r\n\r\n        if (cell.isFlagged) {\r\n            return 'bg-yellow-400';\r\n        }\r\n\r\n        return 'bg-gray-500 hover:bg-gray-600';\r\n    };\r\n\r\n    const getCellBorder = () => {\r\n        if (cell.isRevealed) {\r\n            return 'border-gray-300';\r\n        }\r\n        return 'border-gray-600';\r\n    };\r\n\r\n    return (\r\n        <button\r\n            className={`\r\n        w-12 h-12 md:w-14 md:h-14 lg:w-16 lg:h-16\r\n        border-2 ${getCellBorder()}\r\n        ${getCellBackground()}\r\n        flex items-center justify-center\r\n        font-bold text-lg md:text-xl lg:text-2xl\r\n        transition-all duration-200 ease-in-out\r\n        ${getCellColor()}\r\n        ${!cell.isRevealed && !gameOver && !gameWon ? 'hover:scale-105 active:scale-95' : ''}\r\n        ${cell.isRevealed ? 'cursor-default' : 'cursor-pointer'}\r\n        min-w-0 min-h-0\r\n        shadow-md hover:shadow-lg\r\n        rounded-sm\r\n        transform-gpu\r\n        focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\r\n        focus:ring-offset-2 focus:ring-offset-gray-800\r\n        relative overflow-hidden\r\n      `}\r\n            onClick={onClick}\r\n            onContextMenu={onRightClick}\r\n            disabled={cell.isRevealed || gameOver || gameWon}\r\n            aria-label={`Cell ${cell.row + 1}, ${cell.col + 1}`}\r\n        >\r\n            {!cell.isRevealed && !gameOver && !gameWon && (\r\n                <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-white/5 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-200\"></div>\r\n            )}\r\n            {getCellContent()}\r\n        </button>\r\n    );\r\n};\r\n"
        }
    ]
}