{
    "sourceFile": "src/components/GameStats.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1756292593865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756293139526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,98 +1,99 @@\n-'use client';\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-\r\n-interface GameStatsProps {\r\n-    mineCount: number;\r\n-    flaggedCount: number;\r\n-    startTime: number | null;\r\n-    endTime: number | null;\r\n-    gameOver: boolean;\r\n-    gameWon: boolean;\r\n-    onResetGame: () => void;\r\n-}\r\n-\r\n-export const GameStats: React.FC<GameStatsProps> = ({\r\n-    mineCount,\r\n-    flaggedCount,\r\n-    startTime,\r\n-    endTime,\r\n-    gameOver,\r\n-    gameWon,\r\n-    onResetGame\r\n-}) => {\r\n-    const [currentTime, setCurrentTime] = useState<number>(Date.now());\r\n-\r\n-    useEffect(() => {\r\n-        if (startTime && !gameOver && !gameWon) {\r\n-            const interval = setInterval(() => {\r\n-                setCurrentTime(Date.now());\r\n-            }, 1000);\r\n-            return () => clearInterval(interval);\r\n-        }\r\n-    }, [startTime, gameOver, gameWon]);\r\n-\r\n-    const getElapsedTime = () => {\r\n-        if (!startTime) return 0;\r\n-        const end = endTime || currentTime;\r\n-        return Math.floor((end - startTime) / 1000);\r\n-    };\r\n-\r\n-    const formatDigitalDisplay = (num: number, digits: number = 3) => {\r\n-        return Math.min(999, Math.max(0, num)).toString().padStart(digits, '0');\r\n-    };\r\n-\r\n-    const getSmileyFace = () => {\r\n-        if (gameWon) return 'ðŸ˜Ž';\r\n-        if (gameOver) return 'ðŸ˜µ';\r\n-        return 'ðŸ™‚';\r\n-    };\r\n-\r\n-    const remainingMines = mineCount - flaggedCount;\r\n-\r\n-    return (\r\n-        <div className=\"bg-gray-300 p-2 mb-2\" style={{\r\n-            border: '2px inset #c0c0c0'\r\n-        }}>\r\n-            <div className=\"flex justify-between items-center\">\r\n-                {/* Mine Counter */}\r\n-                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\r\n-                    border: '1px inset #808080',\r\n-                    minWidth: '60px',\r\n-                    textAlign: 'center'\r\n-                }}>\r\n-                    {formatDigitalDisplay(remainingMines)}\r\n-                </div>\r\n-\r\n-                {/* Smiley Face Button */}\r\n-                <button\r\n-                    onClick={onResetGame}\r\n-                    className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\r\n-                    style={{\r\n-                        border: '2px outset #c0c0c0'\r\n-                    }}\r\n-                    onMouseDown={(e) => {\r\n-                        e.currentTarget.style.border = '2px inset #c0c0c0';\r\n-                    }}\r\n-                    onMouseUp={(e) => {\r\n-                        e.currentTarget.style.border = '2px outset #c0c0c0';\r\n-                    }}\r\n-                    onMouseLeave={(e) => {\r\n-                        e.currentTarget.style.border = '2px outset #c0c0c0';\r\n-                    }}\r\n-                >\r\n-                    {getSmileyFace()}\r\n-                </button>\r\n-\r\n-                {/* Timer */}\r\n-                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\r\n-                    border: '1px inset #808080',\r\n-                    minWidth: '60px',\r\n-                    textAlign: 'center'\r\n-                }}>\r\n-                    {formatDigitalDisplay(getElapsedTime())}\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n+'use client';\n+\n+import React, { useState, useEffect } from 'react';\n+\n+interface GameStatsProps {\n+    mineCount: number;\n+    flaggedCount: number;\n+    startTime: number | null;\n+    endTime: number | null;\n+    gameOver: boolean;\n+    gameWon: boolean;\n+    onResetGame: () => void;\n+}\n+\n+export const GameStats: React.FC<GameStatsProps> = ({\n+    mineCount,\n+    flaggedCount,\n+    startTime,\n+    endTime,\n+    gameOver,\n+    gameWon,\n+    onResetGame\n+}) => {\n+    const [currentTime, setCurrentTime] = useState<number>(Date.now());\n+\n+    useEffect(() => {\n+        if (startTime && !gameOver && !gameWon) {\n+            const interval = setInterval(() => {\n+                setCurrentTime(Date.now());\n+            }, 1000);\n+            return () => clearInterval(interval);\n+        }\n+    }, [startTime, gameOver, gameWon]);\n+\n+    const getElapsedTime = () => {\n+        if (!startTime) return 0;\n+        const end = endTime || currentTime;\n+        return Math.floor((end - startTime) / 1000);\n+    };\n+\n+    const formatDigitalDisplay = (num: number, digits: number = 3) => {\n+        return Math.min(999, Math.max(0, num)).toString().padStart(digits, '0');\n+    };\n+\n+    const getSmileyFace = () => {\n+        if (gameWon) return 'ðŸ˜Ž';\n+        if (gameOver) return 'ðŸ˜µ';\n+        return 'ðŸ™‚';\n+    };\n+\n+    const remainingMines = mineCount - flaggedCount;\n+\n+    return (\n+        <div className=\"bg-gray-300 p-2 mb-2\" style={{\n+            border: '2px inset #c0c0c0',\n+            width: '100%'\n+        }}>\n+            <div className=\"flex justify-between items-center\">\n+                {/* Mine Counter */}\n+                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n+                    border: '1px inset #808080',\n+                    minWidth: '60px',\n+                    textAlign: 'center'\n+                }}>\n+                    {formatDigitalDisplay(remainingMines)}\n+                </div>\n+\n+                {/* Smiley Face Button */}\n+                <button\n+                    onClick={onResetGame}\n+                    className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\n+                    style={{\n+                        border: '2px outset #c0c0c0'\n+                    }}\n+                    onMouseDown={(e) => {\n+                        e.currentTarget.style.border = '2px inset #c0c0c0';\n+                    }}\n+                    onMouseUp={(e) => {\n+                        e.currentTarget.style.border = '2px outset #c0c0c0';\n+                    }}\n+                    onMouseLeave={(e) => {\n+                        e.currentTarget.style.border = '2px outset #c0c0c0';\n+                    }}\n+                >\n+                    {getSmileyFace()}\n+                </button>\n+\n+                {/* Timer */}\n+                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n+                    border: '1px inset #808080',\n+                    minWidth: '60px',\n+                    textAlign: 'center'\n+                }}>\n+                    {formatDigitalDisplay(getElapsedTime())}\n+                </div>\n+            </div>\n+        </div>\n+    );\n+};\n"
                },
                {
                    "date": 1756293281204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n     endTime: number | null;\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n+    boardWidth?: number;\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -18,9 +19,10 @@\n     startTime,\n     endTime,\n     gameOver,\n     gameWon,\n-    onResetGame\n+    onResetGame,\n+    boardWidth\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n \n     useEffect(() => {\n@@ -52,9 +54,9 @@\n \n     return (\n         <div className=\"bg-gray-300 p-2 mb-2\" style={{\n             border: '2px inset #c0c0c0',\n-            width: '100%'\n+            width: boardWidth ? `${boardWidth}px` : 'auto'\n         }}>\n             <div className=\"flex justify-between items-center\">\n                 {/* Mine Counter */}\n                 <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n"
                },
                {
                    "date": 1756293425065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     endTime: number | null;\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n-    boardWidth?: number;\n+    boardWidth: number;\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -54,9 +54,9 @@\n \n     return (\n         <div className=\"bg-gray-300 p-2 mb-2\" style={{\n             border: '2px inset #c0c0c0',\n-            width: boardWidth ? `${boardWidth}px` : 'auto'\n+            width: `${boardWidth + 6}px` // Match board width plus border\n         }}>\n             <div className=\"flex justify-between items-center\">\n                 {/* Mine Counter */}\n                 <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n"
                },
                {
                    "date": 1756296560782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n     endTime: number | null;\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n-    boardWidth: number;\n+    onNewGame: (difficulty: 'beginner' | 'intermediate' | 'expert') => void;\n+    currentDifficulty: 'beginner' | 'intermediate' | 'expert';\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -20,9 +21,10 @@\n     endTime,\n     gameOver,\n     gameWon,\n     onResetGame,\n-    boardWidth\n+    onNewGame,\n+    currentDifficulty\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n \n     useEffect(() => {\n@@ -52,50 +54,76 @@\n \n     const remainingMines = mineCount - flaggedCount;\n \n     return (\n-        <div className=\"bg-gray-300 p-2 mb-2\" style={{\n-            border: '2px inset #c0c0c0',\n-            width: `${boardWidth + 6}px` // Match board width plus border\n-        }}>\n-            <div className=\"flex justify-between items-center\">\n-                {/* Mine Counter */}\n-                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n-                    border: '1px inset #808080',\n-                    minWidth: '60px',\n-                    textAlign: 'center'\n-                }}>\n-                    {formatDigitalDisplay(remainingMines)}\n+        <>\n+            {/* Difficulty Selector */}\n+            <div className=\"mb-2 text-center\">\n+                <div className=\"inline-flex bg-gray-300 p-1\" style={{ border: '1px inset #c0c0c0' }}>\n+                    {(['beginner', 'intermediate', 'expert'] as const).map((difficulty) => (\n+                        <button\n+                            key={difficulty}\n+                            onClick={() => onNewGame(difficulty)}\n+                            className={`px-2 py-1 text-xs font-bold ${currentDifficulty === difficulty\n+                                    ? 'bg-gray-500 text-white'\n+                                    : 'bg-gray-300 text-black hover:bg-gray-400'\n+                                }`}\n+                            style={{\n+                                border: currentDifficulty === difficulty\n+                                    ? '1px inset #c0c0c0'\n+                                    : '1px outset #c0c0c0',\n+                                marginRight: difficulty !== 'expert' ? '1px' : '0'\n+                            }}\n+                        >\n+                            {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}\n+                        </button>\n+                    ))}\n                 </div>\n+            </div>\n \n-                {/* Smiley Face Button */}\n-                <button\n-                    onClick={onResetGame}\n-                    className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\n-                    style={{\n-                        border: '2px outset #c0c0c0'\n-                    }}\n-                    onMouseDown={(e) => {\n-                        e.currentTarget.style.border = '2px inset #c0c0c0';\n-                    }}\n-                    onMouseUp={(e) => {\n-                        e.currentTarget.style.border = '2px outset #c0c0c0';\n-                    }}\n-                    onMouseLeave={(e) => {\n-                        e.currentTarget.style.border = '2px outset #c0c0c0';\n-                    }}\n-                >\n-                    {getSmileyFace()}\n-                </button>\n+            {/* Main Game Header */}\n+            <div className=\"bg-gray-300 p-2 mb-2\" style={{\n+                border: '2px inset #c0c0c0'\n+            }}>\n+                <div className=\"flex justify-between items-center\">\n+                    {/* Mine Counter */}\n+                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n+                        border: '1px inset #808080',\n+                        minWidth: '60px',\n+                        textAlign: 'center'\n+                    }}>\n+                        {formatDigitalDisplay(remainingMines)}\n+                    </div>\n \n-                {/* Timer */}\n-                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n-                    border: '1px inset #808080',\n-                    minWidth: '60px',\n-                    textAlign: 'center'\n-                }}>\n-                    {formatDigitalDisplay(getElapsedTime())}\n+                    {/* Smiley Face Button */}\n+                    <button\n+                        onClick={onResetGame}\n+                        className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\n+                        style={{\n+                            border: '2px outset #c0c0c0'\n+                        }}\n+                        onMouseDown={(e) => {\n+                            e.currentTarget.style.border = '2px inset #c0c0c0';\n+                        }}\n+                        onMouseUp={(e) => {\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n+                        }}\n+                        onMouseLeave={(e) => {\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n+                        }}\n+                    >\n+                        {getSmileyFace()}\n+                    </button>\n+\n+                    {/* Timer */}\n+                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n+                        border: '1px inset #808080',\n+                        minWidth: '60px',\n+                        textAlign: 'center'\n+                    }}>\n+                        {formatDigitalDisplay(getElapsedTime())}\n+                    </div>\n                 </div>\n             </div>\n-        </div>\n+        </>\n     );\n };\n"
                },
                {
                    "date": 1756298241302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,8 @@\n     endTime: number | null;\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n-    onNewGame: (difficulty: 'beginner' | 'intermediate' | 'expert') => void;\n-    currentDifficulty: 'beginner' | 'intermediate' | 'expert';\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -20,11 +18,9 @@\n     startTime,\n     endTime,\n     gameOver,\n     gameWon,\n-    onResetGame,\n-    onNewGame,\n-    currentDifficulty\n+    onResetGame\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n \n     useEffect(() => {\n@@ -54,76 +50,69 @@\n \n     const remainingMines = mineCount - flaggedCount;\n \n     return (\n-        <>\n-            {/* Difficulty Selector */}\n-            <div className=\"mb-2 text-center\">\n-                <div className=\"inline-flex bg-gray-300 p-1\" style={{ border: '1px inset #c0c0c0' }}>\n-                    {(['beginner', 'intermediate', 'expert'] as const).map((difficulty) => (\n-                        <button\n-                            key={difficulty}\n-                            onClick={() => onNewGame(difficulty)}\n-                            className={`px-2 py-1 text-xs font-bold ${currentDifficulty === difficulty\n-                                    ? 'bg-gray-500 text-white'\n-                                    : 'bg-gray-300 text-black hover:bg-gray-400'\n-                                }`}\n-                            style={{\n-                                border: currentDifficulty === difficulty\n-                                    ? '1px inset #c0c0c0'\n-                                    : '1px outset #c0c0c0',\n-                                marginRight: difficulty !== 'expert' ? '1px' : '0'\n-                            }}\n-                        >\n-                            {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}\n-                        </button>\n-                    ))}\n+        <div className=\"bg-gray-300 p-2 mb-2\" style={{\n+            border: '2px inset #c0c0c0'\n+        }}>\n+            <div className=\"flex justify-between items-center\">\n+                {/* Mine Counter - Classic Windows 95 LED Display */}\n+                <div className=\"px-2 py-1 font-mono text-xl font-bold\" style={{\n+                    border: '2px inset #808080',\n+                    minWidth: '60px',\n+                    textAlign: 'center',\n+                    backgroundColor: '#000000',\n+                    color: '#ff0000',\n+                    fontFamily: 'MS Sans Serif, Arial, sans-serif',\n+                    fontSize: '20px',\n+                    fontWeight: 'bold',\n+                    padding: '4px 8px',\n+                    textShadow: '0 0 2px #ff0000'\n+                }}>\n+                    {formatDigitalDisplay(remainingMines)}\n                 </div>\n-            </div>\n \n-            {/* Main Game Header */}\n-            <div className=\"bg-gray-300 p-2 mb-2\" style={{\n-                border: '2px inset #c0c0c0'\n-            }}>\n-                <div className=\"flex justify-between items-center\">\n-                    {/* Mine Counter */}\n-                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n-                        border: '1px inset #808080',\n-                        minWidth: '60px',\n-                        textAlign: 'center'\n-                    }}>\n-                        {formatDigitalDisplay(remainingMines)}\n-                    </div>\n+                {/* Smiley Face Button - Classic Windows 95 Style */}\n+                <button\n+                    onClick={onResetGame}\n+                    className=\"text-2xl\"\n+                    style={{\n+                        width: '48px',\n+                        height: '48px',\n+                        border: '2px outset #c0c0c0',\n+                        backgroundColor: '#c0c0c0',\n+                        fontFamily: 'MS Sans Serif, Arial, sans-serif',\n+                        fontSize: '24px',\n+                        cursor: 'pointer'\n+                    }}\n+                    onMouseDown={(e) => {\n+                        e.currentTarget.style.border = '2px inset #c0c0c0';\n+                    }}\n+                    onMouseUp={(e) => {\n+                        e.currentTarget.style.border = '2px outset #c0c0c0';\n+                    }}\n+                    onMouseLeave={(e) => {\n+                        e.currentTarget.style.border = '2px outset #c0c0c0';\n+                    }}\n+                >\n+                    {getSmileyFace()}\n+                </button>\n \n-                    {/* Smiley Face Button */}\n-                    <button\n-                        onClick={onResetGame}\n-                        className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\n-                        style={{\n-                            border: '2px outset #c0c0c0'\n-                        }}\n-                        onMouseDown={(e) => {\n-                            e.currentTarget.style.border = '2px inset #c0c0c0';\n-                        }}\n-                        onMouseUp={(e) => {\n-                            e.currentTarget.style.border = '2px outset #c0c0c0';\n-                        }}\n-                        onMouseLeave={(e) => {\n-                            e.currentTarget.style.border = '2px outset #c0c0c0';\n-                        }}\n-                    >\n-                        {getSmileyFace()}\n-                    </button>\n-\n-                    {/* Timer */}\n-                    <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\n-                        border: '1px inset #808080',\n-                        minWidth: '60px',\n-                        textAlign: 'center'\n-                    }}>\n-                        {formatDigitalDisplay(getElapsedTime())}\n-                    </div>\n+                {/* Timer - Classic Windows 95 LED Display */}\n+                <div className=\"px-2 py-1 font-mono text-xl font-bold\" style={{\n+                    border: '2px inset #808080',\n+                    minWidth: '60px',\n+                    textAlign: 'center',\n+                    backgroundColor: '#000000',\n+                    color: '#ff0000',\n+                    fontFamily: 'MS Sans Serif, Arial, sans-serif',\n+                    fontSize: '20px',\n+                    fontWeight: 'bold',\n+                    padding: '4px 8px',\n+                    textShadow: '0 0 2px #ff0000'\n+                }}>\n+                    {formatDigitalDisplay(getElapsedTime())}\n                 </div>\n             </div>\n-        </>\n+        </div>\n     );\n };\n"
                },
                {
                    "date": 1756298333239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,13 +61,15 @@\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n                     color: '#ff0000',\n-                    fontFamily: 'MS Sans Serif, Arial, sans-serif',\n-                    fontSize: '20px',\n-                    fontWeight: 'bold',\n-                    padding: '4px 8px',\n-                    textShadow: '0 0 2px #ff0000'\n+                    fontFamily: 'Digital-7, MS Sans Serif, Arial, monospace',\n+                    fontSize: '24px',\n+                    fontWeight: 'normal',\n+                    padding: '6px 8px',\n+                    textShadow: '0 0 3px #ff0000, 0 0 6px #ff0000',\n+                    letterSpacing: '2px',\n+                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n                     {formatDigitalDisplay(remainingMines)}\n                 </div>\n \n@@ -103,13 +105,15 @@\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n                     color: '#ff0000',\n-                    fontFamily: 'MS Sans Serif, Arial, sans-serif',\n-                    fontSize: '20px',\n-                    fontWeight: 'bold',\n-                    padding: '4px 8px',\n-                    textShadow: '0 0 2px #ff0000'\n+                    fontFamily: 'Digital-7, MS Sans Serif, Arial, monospace',\n+                    fontSize: '24px',\n+                    fontWeight: 'normal',\n+                    padding: '6px 8px',\n+                    textShadow: '0 0 3px #ff0000, 0 0 6px #ff0000',\n+                    letterSpacing: '2px',\n+                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n                     {formatDigitalDisplay(getElapsedTime())}\n                 </div>\n             </div>\n"
                },
                {
                    "date": 1756298455786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,101 @@\n     const formatDigitalDisplay = (num: number, digits: number = 3) => {\n         return Math.min(999, Math.max(0, num)).toString().padStart(digits, '0');\n     };\n \n+    // LED digit component\n+    const LEDDigit = ({ digit }: { digit: string }) => {\n+        const segments = {\n+            '0': '1111110',\n+            '1': '0110000',\n+            '2': '1101101',\n+            '3': '1111001',\n+            '4': '0110011',\n+            '5': '1011011',\n+            '6': '1011111',\n+            '7': '1110000',\n+            '8': '1111111',\n+            '9': '1111011'\n+        };\n+\n+        const segmentPattern = segments[digit as keyof typeof segments] || '0000000';\n+\n+        return (\n+            <div className=\"inline-block mx-1\" style={{\n+                width: '16px',\n+                height: '24px',\n+                position: 'relative'\n+            }}>\n+                {/* Horizontal segments */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '0',\n+                    left: '2px',\n+                    width: '12px',\n+                    height: '2px',\n+                    backgroundColor: segmentPattern[0] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[0] === '1' ? '0 0 4px #ff0000' : 'none'\n+                }}></div>\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '10px',\n+                    left: '2px',\n+                    width: '12px',\n+                    height: '2px',\n+                    backgroundColor: segmentPattern[1] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[1] === '1' ? '0 0 4px #ff0000' : 'none'\n+                }}></div>\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '20px',\n+                    left: '2px',\n+                    width: '12px',\n+                    height: '2px',\n+                    backgroundColor: segmentPattern[2] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[2] === '1' ? '0 0 4px #ff0000' : 'none'\n+                }}></div>\n+\n+                {/* Vertical segments */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '2px',\n+                    left: '0',\n+                    width: '2px',\n+                    height: '8px',\n+                    backgroundColor: segmentPattern[3] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[3] === '1' ? '0 0 4px #ff0000' : 'none'\n+                }}></div>\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '2px',\n+                    right: '0',\n+                    width: '2px',\n+                    height: '8px',\n+                    backgroundColor: segmentPattern[4] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[4] === '1' ? '0 0 4px #ff0000' : 'none'\n+                }}></div>\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '12px',\n+                    left: '0',\n+                    width: '2px',\n+                    height: '8px',\n+                    backgroundColor: segmentPattern[5] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[5] === '1' ? '0 0 4px #ff0000' : 'none'\n+                }}></div>\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '12px',\n+                    right: '0',\n+                    width: '2px',\n+                    height: '8px',\n+                    backgroundColor: segmentPattern[6] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[6] === '1' ? '0 0 4px #ff0000' : 'none'\n+                }}></div>\n+            </div>\n+        );\n+    };\n+\n     const getSmileyFace = () => {\n         if (gameWon) return 'ðŸ˜Ž';\n         if (gameOver) return 'ðŸ˜µ';\n         return 'ðŸ™‚';\n@@ -55,23 +148,19 @@\n             border: '2px inset #c0c0c0'\n         }}>\n             <div className=\"flex justify-between items-center\">\n                 {/* Mine Counter - Classic Windows 95 LED Display */}\n-                <div className=\"px-2 py-1 font-mono text-xl font-bold\" style={{\n+                <div className=\"px-2 py-1\" style={{\n                     border: '2px inset #808080',\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n-                    color: '#ff0000',\n-                    fontFamily: 'Digital-7, MS Sans Serif, Arial, monospace',\n-                    fontSize: '24px',\n-                    fontWeight: 'normal',\n                     padding: '6px 8px',\n-                    textShadow: '0 0 3px #ff0000, 0 0 6px #ff0000',\n-                    letterSpacing: '2px',\n                     background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n-                    {formatDigitalDisplay(remainingMines)}\n+                    {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n+                        <LEDDigit key={index} digit={digit} />\n+                    ))}\n                 </div>\n \n                 {/* Smiley Face Button - Classic Windows 95 Style */}\n                 <button\n@@ -99,23 +188,19 @@\n                     {getSmileyFace()}\n                 </button>\n \n                 {/* Timer - Classic Windows 95 LED Display */}\n-                <div className=\"px-2 py-1 font-mono text-xl font-bold\" style={{\n+                <div className=\"px-2 py-1\" style={{\n                     border: '2px inset #808080',\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n-                    color: '#ff0000',\n-                    fontFamily: 'Digital-7, MS Sans Serif, Arial, monospace',\n-                    fontSize: '24px',\n-                    fontWeight: 'normal',\n                     padding: '6px 8px',\n-                    textShadow: '0 0 3px #ff0000, 0 0 6px #ff0000',\n-                    letterSpacing: '2px',\n                     background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n-                    {formatDigitalDisplay(getElapsedTime())}\n+                    {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n+                        <LEDDigit key={index} digit={digit} />\n+                    ))}\n                 </div>\n             </div>\n         </div>\n     );\n"
                },
                {
                    "date": 1756298817049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,101 +41,10 @@\n     const formatDigitalDisplay = (num: number, digits: number = 3) => {\n         return Math.min(999, Math.max(0, num)).toString().padStart(digits, '0');\n     };\n \n-    // LED digit component\n-    const LEDDigit = ({ digit }: { digit: string }) => {\n-        const segments = {\n-            '0': '1111110',\n-            '1': '0110000',\n-            '2': '1101101',\n-            '3': '1111001',\n-            '4': '0110011',\n-            '5': '1011011',\n-            '6': '1011111',\n-            '7': '1110000',\n-            '8': '1111111',\n-            '9': '1111011'\n-        };\n \n-        const segmentPattern = segments[digit as keyof typeof segments] || '0000000';\n \n-        return (\n-            <div className=\"inline-block mx-1\" style={{\n-                width: '16px',\n-                height: '24px',\n-                position: 'relative'\n-            }}>\n-                {/* Horizontal segments */}\n-                <div style={{\n-                    position: 'absolute',\n-                    top: '0',\n-                    left: '2px',\n-                    width: '12px',\n-                    height: '2px',\n-                    backgroundColor: segmentPattern[0] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[0] === '1' ? '0 0 4px #ff0000' : 'none'\n-                }}></div>\n-                <div style={{\n-                    position: 'absolute',\n-                    top: '10px',\n-                    left: '2px',\n-                    width: '12px',\n-                    height: '2px',\n-                    backgroundColor: segmentPattern[1] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[1] === '1' ? '0 0 4px #ff0000' : 'none'\n-                }}></div>\n-                <div style={{\n-                    position: 'absolute',\n-                    top: '20px',\n-                    left: '2px',\n-                    width: '12px',\n-                    height: '2px',\n-                    backgroundColor: segmentPattern[2] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[2] === '1' ? '0 0 4px #ff0000' : 'none'\n-                }}></div>\n-\n-                {/* Vertical segments */}\n-                <div style={{\n-                    position: 'absolute',\n-                    top: '2px',\n-                    left: '0',\n-                    width: '2px',\n-                    height: '8px',\n-                    backgroundColor: segmentPattern[3] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[3] === '1' ? '0 0 4px #ff0000' : 'none'\n-                }}></div>\n-                <div style={{\n-                    position: 'absolute',\n-                    top: '2px',\n-                    right: '0',\n-                    width: '2px',\n-                    height: '8px',\n-                    backgroundColor: segmentPattern[4] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[4] === '1' ? '0 0 4px #ff0000' : 'none'\n-                }}></div>\n-                <div style={{\n-                    position: 'absolute',\n-                    top: '12px',\n-                    left: '0',\n-                    width: '2px',\n-                    height: '8px',\n-                    backgroundColor: segmentPattern[5] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[5] === '1' ? '0 0 4px #ff0000' : 'none'\n-                }}></div>\n-                <div style={{\n-                    position: 'absolute',\n-                    top: '12px',\n-                    right: '0',\n-                    width: '2px',\n-                    height: '8px',\n-                    backgroundColor: segmentPattern[6] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[6] === '1' ? '0 0 4px #ff0000' : 'none'\n-                }}></div>\n-            </div>\n-        );\n-    };\n-\n     const getSmileyFace = () => {\n         if (gameWon) return 'ðŸ˜Ž';\n         if (gameOver) return 'ðŸ˜µ';\n         return 'ðŸ™‚';\n@@ -154,13 +63,17 @@\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n                     padding: '6px 8px',\n-                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n+                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)',\n+                    color: '#ff0000',\n+                    fontFamily: 'Courier New, monospace',\n+                    fontSize: '24px',\n+                    fontWeight: 'bold',\n+                    textShadow: '0 0 6px #ff0000',\n+                    letterSpacing: '2px'\n                 }}>\n-                    {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n-                        <LEDDigit key={index} digit={digit} />\n-                    ))}\n+                    {formatDigitalDisplay(remainingMines)}\n                 </div>\n \n                 {/* Smiley Face Button - Classic Windows 95 Style */}\n                 <button\n@@ -194,13 +107,17 @@\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n                     padding: '6px 8px',\n-                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n+                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)',\n+                    color: '#ff0000',\n+                    fontFamily: 'Courier New, monospace',\n+                    fontSize: '24px',\n+                    fontWeight: 'bold',\n+                    textShadow: '0 0 6px #ff0000',\n+                    letterSpacing: '2px'\n                 }}>\n-                    {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n-                        <LEDDigit key={index} digit={digit} />\n-                    ))}\n+                    {formatDigitalDisplay(getElapsedTime())}\n                 </div>\n             </div>\n         </div>\n     );\n"
                },
                {
                    "date": 1756298949728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,112 @@\n     const formatDigitalDisplay = (num: number, digits: number = 3) => {\n         return Math.min(999, Math.max(0, num)).toString().padStart(digits, '0');\n     };\n \n+    // LED digit component\n+    const LEDDigit = ({ digit }: { digit: string }) => {\n+        // Standard 7-segment patterns (a=top, b=top-right, c=bottom-right, d=bottom, e=bottom-left, f=top-left, g=middle)\n+        const segments = {\n+            '0': '1111110', // a,b,c,d,e,f (no g)\n+            '1': '0110000', // b,c only\n+            '2': '1101101', // a,b,d,e,g (no c,f)\n+            '3': '1111001', // a,b,c,d,g (no e,f)\n+            '4': '0110011', // b,c,f,g (no a,d,e)\n+            '5': '1011011', // a,c,d,f,g (no b,e)\n+            '6': '1011111', // a,c,d,e,f,g (no b)\n+            '7': '1110000', // a,b,c only\n+            '8': '1111111', // All segments\n+            '9': '1111011'  // a,b,c,d,f,g (no e)\n+        };\n \n+        const segmentPattern = segments[digit as keyof typeof segments] || '0000000';\n \n+        return (\n+            <div className=\"inline-block mx-1\" style={{\n+                width: '20px',\n+                height: '32px',\n+                position: 'relative'\n+            }}>\n+                {/* Segment a (top horizontal) */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '0',\n+                    left: '2px',\n+                    width: '16px',\n+                    height: '3px',\n+                    backgroundColor: segmentPattern[0] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[0] === '1' ? '0 0 6px #ff0000' : 'none'\n+                }}></div>\n+\n+                {/* Segment b (top-right vertical) */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '2px',\n+                    right: '0',\n+                    width: '3px',\n+                    height: '12px',\n+                    backgroundColor: segmentPattern[1] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[1] === '1' ? '0 0 6px #ff0000' : 'none'\n+                }}></div>\n+\n+                {/* Segment c (bottom-right vertical) */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '16px',\n+                    right: '0',\n+                    width: '3px',\n+                    height: '12px',\n+                    backgroundColor: segmentPattern[2] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[2] === '1' ? '0 0 6px #ff0000' : 'none'\n+                }}></div>\n+\n+                {/* Segment d (bottom horizontal) */}\n+                <div style={{\n+                    position: 'absolute',\n+                    bottom: '0',\n+                    left: '2px',\n+                    width: '16px',\n+                    height: '3px',\n+                    backgroundColor: segmentPattern[3] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[3] === '1' ? '0 0 6px #ff0000' : 'none'\n+                }}></div>\n+\n+                {/* Segment e (bottom-left vertical) */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '16px',\n+                    left: '0',\n+                    width: '3px',\n+                    height: '12px',\n+                    backgroundColor: segmentPattern[4] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[4] === '1' ? '0 0 6px #ff0000' : 'none'\n+                }}></div>\n+\n+                {/* Segment f (top-left vertical) */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '2px',\n+                    left: '0',\n+                    width: '3px',\n+                    height: '12px',\n+                    backgroundColor: segmentPattern[5] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[5] === '1' ? '0 0 6px #ff0000' : 'none'\n+                }}></div>\n+\n+                {/* Segment g (middle horizontal) */}\n+                <div style={{\n+                    position: 'absolute',\n+                    top: '14px',\n+                    left: '2px',\n+                    width: '16px',\n+                    height: '3px',\n+                    backgroundColor: segmentPattern[6] === '1' ? '#ff0000' : '#330000',\n+                    boxShadow: segmentPattern[6] === '1' ? '0 0 6px #ff0000' : 'none'\n+                }}></div>\n+            </div>\n+        );\n+    };\n+\n     const getSmileyFace = () => {\n         if (gameWon) return 'ðŸ˜Ž';\n         if (gameOver) return 'ðŸ˜µ';\n         return 'ðŸ™‚';\n@@ -63,17 +165,13 @@\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n                     padding: '6px 8px',\n-                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)',\n-                    color: '#ff0000',\n-                    fontFamily: 'Courier New, monospace',\n-                    fontSize: '24px',\n-                    fontWeight: 'bold',\n-                    textShadow: '0 0 6px #ff0000',\n-                    letterSpacing: '2px'\n+                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n-                    {formatDigitalDisplay(remainingMines)}\n+                    {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n+                        <LEDDigit key={index} digit={digit} />\n+                    ))}\n                 </div>\n \n                 {/* Smiley Face Button - Classic Windows 95 Style */}\n                 <button\n@@ -107,17 +205,13 @@\n                     minWidth: '60px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n                     padding: '6px 8px',\n-                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)',\n-                    color: '#ff0000',\n-                    fontFamily: 'Courier New, monospace',\n-                    fontSize: '24px',\n-                    fontWeight: 'bold',\n-                    textShadow: '0 0 6px #ff0000',\n-                    letterSpacing: '2px'\n+                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n-                    {formatDigitalDisplay(getElapsedTime())}\n+                    {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n+                        <LEDDigit key={index} digit={digit} />\n+                    ))}\n                 </div>\n             </div>\n         </div>\n     );\n"
                },
                {
                    "date": 1756299156507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,88 +60,96 @@\n \n         const segmentPattern = segments[digit as keyof typeof segments] || '0000000';\n \n         return (\n-            <div className=\"inline-block mx-1\" style={{\n-                width: '20px',\n-                height: '32px',\n-                position: 'relative'\n+            <div className=\"inline-block\" style={{\n+                width: '24px',\n+                height: '36px',\n+                position: 'relative',\n+                marginRight: '4px'\n             }}>\n-                {/* Segment a (top horizontal) */}\n+                {/* Segment a (top horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     top: '0',\n                     left: '2px',\n-                    width: '16px',\n-                    height: '3px',\n+                    width: '20px',\n+                    height: '4px',\n                     backgroundColor: segmentPattern[0] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[0] === '1' ? '0 0 6px #ff0000' : 'none'\n+                    boxShadow: segmentPattern[0] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    clipPath: 'polygon(0% 0%, 100% 0%, 95% 100%, 5% 100%)'\n                 }}></div>\n \n-                {/* Segment b (top-right vertical) */}\n+                {/* Segment b (top-right vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     top: '2px',\n                     right: '0',\n-                    width: '3px',\n-                    height: '12px',\n+                    width: '4px',\n+                    height: '14px',\n                     backgroundColor: segmentPattern[1] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[1] === '1' ? '0 0 6px #ff0000' : 'none'\n+                    boxShadow: segmentPattern[1] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    clipPath: 'polygon(0% 0%, 100% 20%, 100% 80%, 0% 100%)'\n                 }}></div>\n \n-                {/* Segment c (bottom-right vertical) */}\n+                {/* Segment c (bottom-right vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '16px',\n+                    top: '18px',\n                     right: '0',\n-                    width: '3px',\n-                    height: '12px',\n+                    width: '4px',\n+                    height: '14px',\n                     backgroundColor: segmentPattern[2] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[2] === '1' ? '0 0 6px #ff0000' : 'none'\n+                    boxShadow: segmentPattern[2] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    clipPath: 'polygon(0% 20%, 100% 0%, 100% 100%, 0% 80%)'\n                 }}></div>\n \n-                {/* Segment d (bottom horizontal) */}\n+                {/* Segment d (bottom horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     bottom: '0',\n                     left: '2px',\n-                    width: '16px',\n-                    height: '3px',\n+                    width: '20px',\n+                    height: '4px',\n                     backgroundColor: segmentPattern[3] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[3] === '1' ? '0 0 6px #ff0000' : 'none'\n+                    boxShadow: segmentPattern[3] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    clipPath: 'polygon(5% 0%, 95% 0%, 100% 100%, 0% 100%)'\n                 }}></div>\n \n-                {/* Segment e (bottom-left vertical) */}\n+                {/* Segment e (bottom-left vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '16px',\n+                    top: '18px',\n                     left: '0',\n-                    width: '3px',\n-                    height: '12px',\n+                    width: '4px',\n+                    height: '14px',\n                     backgroundColor: segmentPattern[4] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[4] === '1' ? '0 0 6px #ff0000' : 'none'\n+                    boxShadow: segmentPattern[4] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    clipPath: 'polygon(0% 0%, 100% 20%, 100% 80%, 0% 100%)'\n                 }}></div>\n \n-                {/* Segment f (top-left vertical) */}\n+                {/* Segment f (top-left vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     top: '2px',\n                     left: '0',\n-                    width: '3px',\n-                    height: '12px',\n+                    width: '4px',\n+                    height: '14px',\n                     backgroundColor: segmentPattern[5] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[5] === '1' ? '0 0 6px #ff0000' : 'none'\n+                    boxShadow: segmentPattern[5] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    clipPath: 'polygon(0% 20%, 100% 0%, 100% 100%, 0% 80%)'\n                 }}></div>\n \n-                {/* Segment g (middle horizontal) */}\n+                {/* Segment g (middle horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '14px',\n+                    top: '16px',\n                     left: '2px',\n-                    width: '16px',\n-                    height: '3px',\n+                    width: '20px',\n+                    height: '4px',\n                     backgroundColor: segmentPattern[6] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[6] === '1' ? '0 0 6px #ff0000' : 'none'\n+                    boxShadow: segmentPattern[6] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    clipPath: 'polygon(0% 0%, 100% 0%, 95% 100%, 5% 100%)'\n                 }}></div>\n             </div>\n         );\n     };\n"
                },
                {
                    "date": 1756306231731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n             <div className=\"flex justify-between items-center\">\n                 {/* Mine Counter - Classic Windows 95 LED Display */}\n                 <div className=\"px-2 py-1\" style={{\n                     border: '2px inset #808080',\n-                    minWidth: '60px',\n+                    minWidth: '32px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n                     padding: '6px 8px',\n                     background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n"
                },
                {
                    "date": 1756306365241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,94 +61,94 @@\n         const segmentPattern = segments[digit as keyof typeof segments] || '0000000';\n \n         return (\n             <div className=\"inline-block\" style={{\n-                width: '24px',\n-                height: '36px',\n+                width: '18px',\n+                height: '28px',\n                 position: 'relative',\n-                marginRight: '4px'\n+                marginRight: '3px'\n             }}>\n                 {/* Segment a (top horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     top: '0',\n-                    left: '2px',\n-                    width: '20px',\n-                    height: '4px',\n+                    left: '1px',\n+                    width: '16px',\n+                    height: '3px',\n                     backgroundColor: segmentPattern[0] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[0] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[0] === '1' ? '0 0 6px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 0%, 95% 100%, 5% 100%)'\n                 }}></div>\n \n                 {/* Segment b (top-right vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '2px',\n+                    top: '1px',\n                     right: '0',\n-                    width: '4px',\n-                    height: '14px',\n+                    width: '3px',\n+                    height: '11px',\n                     backgroundColor: segmentPattern[1] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[1] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[1] === '1' ? '0 0 6px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 20%, 100% 80%, 0% 100%)'\n                 }}></div>\n \n                 {/* Segment c (bottom-right vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '18px',\n+                    top: '14px',\n                     right: '0',\n-                    width: '4px',\n-                    height: '14px',\n+                    width: '3px',\n+                    height: '11px',\n                     backgroundColor: segmentPattern[2] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[2] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[2] === '1' ? '0 0 6px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 20%, 100% 0%, 100% 100%, 0% 80%)'\n                 }}></div>\n \n                 {/* Segment d (bottom horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     bottom: '0',\n-                    left: '2px',\n-                    width: '20px',\n-                    height: '4px',\n+                    left: '1px',\n+                    width: '16px',\n+                    height: '3px',\n                     backgroundColor: segmentPattern[3] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[3] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[3] === '1' ? '0 0 6px #ff0000' : 'none',\n                     clipPath: 'polygon(5% 0%, 95% 0%, 100% 100%, 0% 100%)'\n                 }}></div>\n \n                 {/* Segment e (bottom-left vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '18px',\n+                    top: '14px',\n                     left: '0',\n-                    width: '4px',\n-                    height: '14px',\n+                    width: '3px',\n+                    height: '11px',\n                     backgroundColor: segmentPattern[4] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[4] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[4] === '1' ? '0 0 6px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 20%, 100% 80%, 0% 100%)'\n                 }}></div>\n \n                 {/* Segment f (top-left vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '2px',\n+                    top: '1px',\n                     left: '0',\n-                    width: '4px',\n-                    height: '14px',\n+                    width: '3px',\n+                    height: '11px',\n                     backgroundColor: segmentPattern[5] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[5] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[5] === '1' ? '0 0 6px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 20%, 100% 0%, 100% 100%, 0% 80%)'\n                 }}></div>\n \n                 {/* Segment g (middle horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '16px',\n-                    left: '2px',\n-                    width: '20px',\n-                    height: '4px',\n+                    top: '12px',\n+                    left: '1px',\n+                    width: '16px',\n+                    height: '3px',\n                     backgroundColor: segmentPattern[6] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[6] === '1' ? '0 0 8px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[6] === '1' ? '0 0 6px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 0%, 95% 100%, 5% 100%)'\n                 }}></div>\n             </div>\n         );\n@@ -169,12 +169,12 @@\n             <div className=\"flex justify-between items-center\">\n                 {/* Mine Counter - Classic Windows 95 LED Display */}\n                 <div className=\"px-2 py-1\" style={{\n                     border: '2px inset #808080',\n-                    minWidth: '32px',\n+                    minWidth: '50px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n-                    padding: '6px 8px',\n+                    padding: '4px 6px',\n                     background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n                     {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n                         <LEDDigit key={index} digit={digit} />\n@@ -185,14 +185,14 @@\n                 <button\n                     onClick={onResetGame}\n                     className=\"text-2xl\"\n                     style={{\n-                        width: '48px',\n-                        height: '48px',\n+                        width: '32px',\n+                        height: '32px',\n                         border: '2px outset #c0c0c0',\n                         backgroundColor: '#c0c0c0',\n                         fontFamily: 'MS Sans Serif, Arial, sans-serif',\n-                        fontSize: '24px',\n+                        fontSize: '16px',\n                         cursor: 'pointer'\n                     }}\n                     onMouseDown={(e) => {\n                         e.currentTarget.style.border = '2px inset #c0c0c0';\n@@ -209,12 +209,12 @@\n \n                 {/* Timer - Classic Windows 95 LED Display */}\n                 <div className=\"px-2 py-1\" style={{\n                     border: '2px inset #808080',\n-                    minWidth: '60px',\n+                    minWidth: '50px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n-                    padding: '6px 8px',\n+                    padding: '4px 6px',\n                     background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n                     {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n                         <LEDDigit key={index} digit={digit} />\n"
                },
                {
                    "date": 1756306560333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,94 +61,94 @@\n         const segmentPattern = segments[digit as keyof typeof segments] || '0000000';\n \n         return (\n             <div className=\"inline-block\" style={{\n-                width: '18px',\n-                height: '28px',\n+                width: '14px',\n+                height: '22px',\n                 position: 'relative',\n-                marginRight: '3px'\n+                marginRight: '2px'\n             }}>\n                 {/* Segment a (top horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     top: '0',\n                     left: '1px',\n-                    width: '16px',\n-                    height: '3px',\n+                    width: '12px',\n+                    height: '2px',\n                     backgroundColor: segmentPattern[0] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[0] === '1' ? '0 0 6px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[0] === '1' ? '0 0 4px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 0%, 95% 100%, 5% 100%)'\n                 }}></div>\n \n                 {/* Segment b (top-right vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     top: '1px',\n                     right: '0',\n-                    width: '3px',\n-                    height: '11px',\n+                    width: '2px',\n+                    height: '8px',\n                     backgroundColor: segmentPattern[1] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[1] === '1' ? '0 0 6px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[1] === '1' ? '0 0 4px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 20%, 100% 80%, 0% 100%)'\n                 }}></div>\n \n                 {/* Segment c (bottom-right vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '14px',\n+                    top: '11px',\n                     right: '0',\n-                    width: '3px',\n-                    height: '11px',\n+                    width: '2px',\n+                    height: '8px',\n                     backgroundColor: segmentPattern[2] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[2] === '1' ? '0 0 6px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[2] === '1' ? '0 0 4px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 20%, 100% 0%, 100% 100%, 0% 80%)'\n                 }}></div>\n \n                 {/* Segment d (bottom horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     bottom: '0',\n                     left: '1px',\n-                    width: '16px',\n-                    height: '3px',\n+                    width: '12px',\n+                    height: '2px',\n                     backgroundColor: segmentPattern[3] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[3] === '1' ? '0 0 6px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[3] === '1' ? '0 0 4px #ff0000' : 'none',\n                     clipPath: 'polygon(5% 0%, 95% 0%, 100% 100%, 0% 100%)'\n                 }}></div>\n \n                 {/* Segment e (bottom-left vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '14px',\n+                    top: '11px',\n                     left: '0',\n-                    width: '3px',\n-                    height: '11px',\n+                    width: '2px',\n+                    height: '8px',\n                     backgroundColor: segmentPattern[4] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[4] === '1' ? '0 0 6px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[4] === '1' ? '0 0 4px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 20%, 100% 80%, 0% 100%)'\n                 }}></div>\n \n                 {/* Segment f (top-left vertical) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n                     top: '1px',\n                     left: '0',\n-                    width: '3px',\n-                    height: '11px',\n+                    width: '2px',\n+                    height: '8px',\n                     backgroundColor: segmentPattern[5] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[5] === '1' ? '0 0 6px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[5] === '1' ? '0 0 4px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 20%, 100% 0%, 100% 100%, 0% 80%)'\n                 }}></div>\n \n                 {/* Segment g (middle horizontal) - trapezoid */}\n                 <div style={{\n                     position: 'absolute',\n-                    top: '12px',\n+                    top: '9px',\n                     left: '1px',\n-                    width: '16px',\n-                    height: '3px',\n+                    width: '12px',\n+                    height: '2px',\n                     backgroundColor: segmentPattern[6] === '1' ? '#ff0000' : '#330000',\n-                    boxShadow: segmentPattern[6] === '1' ? '0 0 6px #ff0000' : 'none',\n+                    boxShadow: segmentPattern[6] === '1' ? '0 0 4px #ff0000' : 'none',\n                     clipPath: 'polygon(0% 0%, 100% 0%, 95% 100%, 5% 100%)'\n                 }}></div>\n             </div>\n         );\n@@ -169,12 +169,12 @@\n             <div className=\"flex justify-between items-center\">\n                 {/* Mine Counter - Classic Windows 95 LED Display */}\n                 <div className=\"px-2 py-1\" style={{\n                     border: '2px inset #808080',\n-                    minWidth: '50px',\n+                    minWidth: '42px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n-                    padding: '4px 6px',\n+                    padding: '3px 4px',\n                     background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n                     {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n                         <LEDDigit key={index} digit={digit} />\n@@ -209,12 +209,12 @@\n \n                 {/* Timer - Classic Windows 95 LED Display */}\n                 <div className=\"px-2 py-1\" style={{\n                     border: '2px inset #808080',\n-                    minWidth: '50px',\n+                    minWidth: '42px',\n                     textAlign: 'center',\n                     backgroundColor: '#000000',\n-                    padding: '4px 6px',\n+                    padding: '3px 4px',\n                     background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                 }}>\n                     {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n                         <LEDDigit key={index} digit={digit} />\n"
                },
                {
                    "date": 1756313337275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,61 +165,68 @@\n     return (\n         <div className=\"bg-gray-300 p-2 mb-2\" style={{\n             border: '2px inset #c0c0c0'\n         }}>\n-            <div className=\"flex justify-between items-center\">\n-                {/* Mine Counter - Classic Windows 95 LED Display */}\n-                <div className=\"px-2 py-1\" style={{\n-                    border: '2px inset #808080',\n-                    minWidth: '42px',\n-                    textAlign: 'center',\n-                    backgroundColor: '#000000',\n-                    padding: '3px 4px',\n-                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n-                }}>\n-                    {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n-                        <LEDDigit key={index} digit={digit} />\n-                    ))}\n-                </div>\n+            {/* Embossed Container for Counters and Smiley Face */}\n+            <div className=\"p-2\" style={{\n+                border: '3px inset #c0c0c0',\n+                backgroundColor: '#c0c0c0',\n+                borderRadius: '2px'\n+            }}>\n+                <div className=\"flex justify-between items-center\">\n+                    {/* Mine Counter - Classic Windows 95 LED Display */}\n+                    <div className=\"px-2 py-1\" style={{\n+                        border: '2px inset #808080',\n+                        minWidth: '42px',\n+                        textAlign: 'center',\n+                        backgroundColor: '#000000',\n+                        padding: '3px 4px',\n+                        background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n+                    }}>\n+                        {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n+                            <LEDDigit key={index} digit={digit} />\n+                        ))}\n+                    </div>\n \n-                {/* Smiley Face Button - Classic Windows 95 Style */}\n-                <button\n-                    onClick={onResetGame}\n-                    className=\"text-2xl\"\n-                    style={{\n-                        width: '32px',\n-                        height: '32px',\n-                        border: '2px outset #c0c0c0',\n-                        backgroundColor: '#c0c0c0',\n-                        fontFamily: 'MS Sans Serif, Arial, sans-serif',\n-                        fontSize: '16px',\n-                        cursor: 'pointer'\n-                    }}\n-                    onMouseDown={(e) => {\n-                        e.currentTarget.style.border = '2px inset #c0c0c0';\n-                    }}\n-                    onMouseUp={(e) => {\n-                        e.currentTarget.style.border = '2px outset #c0c0c0';\n-                    }}\n-                    onMouseLeave={(e) => {\n-                        e.currentTarget.style.border = '2px outset #c0c0c0';\n-                    }}\n-                >\n-                    {getSmileyFace()}\n-                </button>\n+                    {/* Smiley Face Button - Classic Windows 95 Style */}\n+                    <button\n+                        onClick={onResetGame}\n+                        className=\"text-2xl\"\n+                        style={{\n+                            width: '32px',\n+                            height: '32px',\n+                            border: '2px outset #c0c0c0',\n+                            backgroundColor: '#c0c0c0',\n+                            fontFamily: 'MS Sans Serif, Arial, sans-serif',\n+                            fontSize: '16px',\n+                            cursor: 'pointer'\n+                        }}\n+                        onMouseDown={(e) => {\n+                            e.currentTarget.style.border = '2px inset #c0c0c0';\n+                        }}\n+                        onMouseUp={(e) => {\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n+                        }}\n+                        onMouseLeave={(e) => {\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n+                        }}\n+                    >\n+                        {getSmileyFace()}\n+                    </button>\n \n-                {/* Timer - Classic Windows 95 LED Display */}\n-                <div className=\"px-2 py-1\" style={{\n-                    border: '2px inset #808080',\n-                    minWidth: '42px',\n-                    textAlign: 'center',\n-                    backgroundColor: '#000000',\n-                    padding: '3px 4px',\n-                    background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n-                }}>\n-                    {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n-                        <LEDDigit key={index} digit={digit} />\n-                    ))}\n+                    {/* Timer - Classic Windows 95 LED Display */}\n+                    <div className=\"px-2 py-1\" style={{\n+                        border: '2px inset #808080',\n+                        minWidth: '42px',\n+                        textAlign: 'center',\n+                        backgroundColor: '#000000',\n+                        padding: '3px 4px',\n+                        background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n+                    }}>\n+                        {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n+                            <LEDDigit key={index} digit={digit} />\n+                        ))}\n+                    </div>\n                 </div>\n             </div>\n         </div>\n     );\n"
                },
                {
                    "date": 1756313411925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,11 +167,9 @@\n             border: '2px inset #c0c0c0'\n         }}>\n             {/* Embossed Container for Counters and Smiley Face */}\n             <div className=\"p-2\" style={{\n-                border: '3px inset #c0c0c0',\n-                backgroundColor: '#c0c0c0',\n-                borderRadius: '2px'\n+                border: '3px inset #c0c0c0'\n             }}>\n                 <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n"
                },
                {
                    "date": 1756315511482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n             border: '2px inset #c0c0c0'\n         }}>\n             {/* Embossed Container for Counters and Smiley Face */}\n             <div className=\"p-2\" style={{\n-                border: '3px inset #c0c0c0'\n+                border: '2px inset #c0c0c0'\n             }}>\n                 <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n"
                },
                {
                    "date": 1756316406411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n     endTime: number | null;\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n+    isAboutToClick?: boolean;\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -18,9 +19,10 @@\n     startTime,\n     endTime,\n     gameOver,\n     gameWon,\n-    onResetGame\n+    onResetGame,\n+    isAboutToClick = false\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n \n     useEffect(() => {\n@@ -155,10 +157,10 @@\n     };\n \n     const getSmileyFace = () => {\n         if (gameWon) return 'ðŸ˜Ž';\n-        if (gameOver) return 'ðŸ˜µ';\n-        return 'ðŸ™‚';\n+        if (gameOver) return 'xx(';\n+        return ':)';\n     };\n \n     const remainingMines = mineCount - flaggedCount;\n \n"
                },
                {
                    "date": 1756316503403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n     endTime: number | null;\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n-    isAboutToClick?: boolean;\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -19,10 +18,9 @@\n     startTime,\n     endTime,\n     gameOver,\n     gameWon,\n-    onResetGame,\n-    isAboutToClick = false\n+    onResetGame\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n \n     useEffect(() => {\n@@ -157,10 +155,10 @@\n     };\n \n     const getSmileyFace = () => {\n         if (gameWon) return 'ðŸ˜Ž';\n-        if (gameOver) return 'xx(';\n-        return ':)';\n+        if (gameOver) return 'ðŸ˜µ';\n+        return 'ðŸ™‚';\n     };\n \n     const remainingMines = mineCount - flaggedCount;\n \n"
                },
                {
                    "date": 1756316552008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n     gameWon,\n     onResetGame\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n+    const [isButtonPressed, setIsButtonPressed] = useState<boolean>(false);\n \n     useEffect(() => {\n         if (startTime && !gameOver && !gameWon) {\n             const interval = setInterval(() => {\n@@ -155,9 +156,10 @@\n     };\n \n     const getSmileyFace = () => {\n         if (gameWon) return 'ðŸ˜Ž';\n-        if (gameOver) return 'ðŸ˜µ';\n+        if (gameOver) return 'xx';\n+        if (isButtonPressed) return ':0';\n         return 'ðŸ™‚';\n     };\n \n     const remainingMines = mineCount - flaggedCount;\n@@ -199,14 +201,17 @@\n                             cursor: 'pointer'\n                         }}\n                         onMouseDown={(e) => {\n                             e.currentTarget.style.border = '2px inset #c0c0c0';\n+                            setIsButtonPressed(true);\n                         }}\n                         onMouseUp={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n+                            setIsButtonPressed(false);\n                         }}\n                         onMouseLeave={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n+                            setIsButtonPressed(false);\n                         }}\n                     >\n                         {getSmileyFace()}\n                     </button>\n"
                },
                {
                    "date": 1756316747918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n     endTime: number | null;\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n+    isAnyCellPressed: boolean;\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -18,12 +19,12 @@\n     startTime,\n     endTime,\n     gameOver,\n     gameWon,\n-    onResetGame\n+    onResetGame,\n+    isAnyCellPressed\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n-    const [isButtonPressed, setIsButtonPressed] = useState<boolean>(false);\n \n     useEffect(() => {\n         if (startTime && !gameOver && !gameWon) {\n             const interval = setInterval(() => {\n@@ -156,10 +157,10 @@\n     };\n \n     const getSmileyFace = () => {\n         if (gameWon) return 'ðŸ˜Ž';\n-        if (gameOver) return 'xx';\n-        if (isButtonPressed) return ':0';\n+        if (gameOver) return 'ðŸ’€';\n+        if (isAnyCellPressed) return 'ðŸ˜®';\n         return 'ðŸ™‚';\n     };\n \n     const remainingMines = mineCount - flaggedCount;\n@@ -201,17 +202,14 @@\n                             cursor: 'pointer'\n                         }}\n                         onMouseDown={(e) => {\n                             e.currentTarget.style.border = '2px inset #c0c0c0';\n-                            setIsButtonPressed(true);\n                         }}\n                         onMouseUp={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n-                            setIsButtonPressed(false);\n                         }}\n                         onMouseLeave={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n-                            setIsButtonPressed(false);\n                         }}\n                     >\n                         {getSmileyFace()}\n                     </button>\n"
                },
                {
                    "date": 1756316782898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,18 +198,26 @@\n                             border: '2px outset #c0c0c0',\n                             backgroundColor: '#c0c0c0',\n                             fontFamily: 'MS Sans Serif, Arial, sans-serif',\n                             fontSize: '16px',\n-                            cursor: 'pointer'\n+                            cursor: 'pointer',\n+                            boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.3)',\n+                            transform: 'translateY(-1px)'\n                         }}\n                         onMouseDown={(e) => {\n                             e.currentTarget.style.border = '2px inset #c0c0c0';\n+                            e.currentTarget.style.transform = 'translateY(0px)';\n+                            e.currentTarget.style.boxShadow = '1px 1px 2px rgba(0, 0, 0, 0.3)';\n                         }}\n                         onMouseUp={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n+                            e.currentTarget.style.transform = 'translateY(-1px)';\n+                            e.currentTarget.style.boxShadow = '2px 2px 4px rgba(0, 0, 0, 0.3)';\n                         }}\n                         onMouseLeave={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n+                            e.currentTarget.style.transform = 'translateY(-1px)';\n+                            e.currentTarget.style.boxShadow = '2px 2px 4px rgba(0, 0, 0, 0.3)';\n                         }}\n                     >\n                         {getSmileyFace()}\n                     </button>\n"
                },
                {
                    "date": 1756316842850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,30 +194,22 @@\n                         className=\"text-2xl\"\n                         style={{\n                             width: '32px',\n                             height: '32px',\n-                            border: '2px outset #c0c0c0',\n+                            border: '2px inset #c0c0c0',\n                             backgroundColor: '#c0c0c0',\n                             fontFamily: 'MS Sans Serif, Arial, sans-serif',\n                             fontSize: '16px',\n-                            cursor: 'pointer',\n-                            boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.3)',\n-                            transform: 'translateY(-1px)'\n+                            cursor: 'pointer'\n                         }}\n                         onMouseDown={(e) => {\n-                            e.currentTarget.style.border = '2px inset #c0c0c0';\n-                            e.currentTarget.style.transform = 'translateY(0px)';\n-                            e.currentTarget.style.boxShadow = '1px 1px 2px rgba(0, 0, 0, 0.3)';\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n                         }}\n                         onMouseUp={(e) => {\n-                            e.currentTarget.style.border = '2px outset #c0c0c0';\n-                            e.currentTarget.style.transform = 'translateY(-1px)';\n-                            e.currentTarget.style.boxShadow = '2px 2px 4px rgba(0, 0, 0, 0.3)';\n+                            e.currentTarget.style.border = '2px inset #c0c0c0';\n                         }}\n                         onMouseLeave={(e) => {\n-                            e.currentTarget.style.border = '2px outset #c0c0c0';\n-                            e.currentTarget.style.transform = 'translateY(-1px)';\n-                            e.currentTarget.style.boxShadow = '2px 2px 4px rgba(0, 0, 0, 0.3)';\n+                            e.currentTarget.style.border = '2px inset #c0c0c0';\n                         }}\n                     >\n                         {getSmileyFace()}\n                     </button>\n"
                },
                {
                    "date": 1756316877594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,22 +194,22 @@\n                         className=\"text-2xl\"\n                         style={{\n                             width: '32px',\n                             height: '32px',\n-                            border: '2px inset #c0c0c0',\n+                            border: '2px outset #c0c0c0',\n                             backgroundColor: '#c0c0c0',\n                             fontFamily: 'MS Sans Serif, Arial, sans-serif',\n                             fontSize: '16px',\n                             cursor: 'pointer'\n                         }}\n                         onMouseDown={(e) => {\n-                            e.currentTarget.style.border = '2px outset #c0c0c0';\n+                            e.currentTarget.style.border = '2px inset #c0c0c0';\n                         }}\n                         onMouseUp={(e) => {\n-                            e.currentTarget.style.border = '2px inset #c0c0c0';\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n                         }}\n                         onMouseLeave={(e) => {\n-                            e.currentTarget.style.border = '2px inset #c0c0c0';\n+                            e.currentTarget.style.border = '2px outset #c0c0c0';\n                         }}\n                     >\n                         {getSmileyFace()}\n                     </button>\n"
                },
                {
                    "date": 1756316915523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,21 +195,29 @@\n                         style={{\n                             width: '32px',\n                             height: '32px',\n                             border: '2px outset #c0c0c0',\n+                            borderLeftColor: '#ffffff',\n+                            borderTopColor: '#ffffff',\n                             backgroundColor: '#c0c0c0',\n                             fontFamily: 'MS Sans Serif, Arial, sans-serif',\n                             fontSize: '16px',\n                             cursor: 'pointer'\n                         }}\n                         onMouseDown={(e) => {\n                             e.currentTarget.style.border = '2px inset #c0c0c0';\n+                            e.currentTarget.style.borderLeftColor = '#808080';\n+                            e.currentTarget.style.borderTopColor = '#808080';\n                         }}\n                         onMouseUp={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n+                            e.currentTarget.style.borderLeftColor = '#ffffff';\n+                            e.currentTarget.style.borderTopColor = '#ffffff';\n                         }}\n                         onMouseLeave={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n+                            e.currentTarget.style.borderLeftColor = '#ffffff';\n+                            e.currentTarget.style.borderTopColor = '#ffffff';\n                         }}\n                     >\n                         {getSmileyFace()}\n                     </button>\n"
                },
                {
                    "date": 1756316949231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n             }}>\n                 <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n-                        border: '2px inset #808080',\n+                        border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n                         padding: '3px 4px',\n@@ -223,9 +223,9 @@\n                     </button>\n \n                     {/* Timer - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n-                        border: '2px inset #808080',\n+                        border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n                         padding: '3px 4px',\n"
                },
                {
                    "date": 1756316992720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,14 +166,12 @@\n     const remainingMines = mineCount - flaggedCount;\n \n     return (\n         <div className=\"bg-gray-300 p-2 mb-2\" style={{\n-            border: '2px inset #c0c0c0'\n+            border: '3px inset #c0c0c0'\n         }}>\n-            {/* Embossed Container for Counters and Smiley Face */}\n-            <div className=\"p-2\" style={{\n-                border: '2px inset #c0c0c0'\n-            }}>\n+            {/* Container for Counters and Smiley Face */}\n+            <div className=\"p-2\">\n                 <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n                         border: '1px solid #808080',\n"
                },
                {
                    "date": 1756317136648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         <div className=\"bg-gray-300 p-2 mb-2\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n             {/* Container for Counters and Smiley Face */}\n-            <div className=\"p-2\">\n+            <div className=\"p-4\">\n                 <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n                         border: '1px solid #808080',\n"
                },
                {
                    "date": 1756317286819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n 'use client';\n \n import React, { useState, useEffect } from 'react';\n+import { GameBoard } from './GameBoard';\n \n interface GameStatsProps {\n     mineCount: number;\n     flaggedCount: number;\n@@ -10,8 +11,15 @@\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n     isAnyCellPressed: boolean;\n+    board: any[][];\n+    onCellClick: (row: number, col: number) => void;\n+    onRightClick: (row: number, col: number) => void;\n+    onCellMouseDown: (row: number, col: number) => void;\n+    onCellMouseUp: (row: number, col: number) => void;\n+    onCellMouseEnter: (row: number, col: number) => void;\n+    isDragging: boolean;\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -20,9 +28,16 @@\n     endTime,\n     gameOver,\n     gameWon,\n     onResetGame,\n-    isAnyCellPressed\n+    isAnyCellPressed,\n+    board,\n+    onCellClick,\n+    onRightClick,\n+    onCellMouseDown,\n+    onCellMouseUp,\n+    onCellMouseEnter,\n+    isDragging\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n \n     useEffect(() => {\n@@ -165,13 +180,13 @@\n \n     const remainingMines = mineCount - flaggedCount;\n \n     return (\n-        <div className=\"bg-gray-300 p-2 mb-2\" style={{\n-            border: '3px inset #c0c0c0'\n-        }}>\n-            {/* Container for Counters and Smiley Face */}\n-            <div className=\"p-4\">\n+        <div className=\"flex flex-col space-y-2\">\n+            {/* Counters and Smiley Face Row */}\n+            <div className=\"bg-gray-300 p-2\" style={{\n+                border: '3px inset #c0c0c0'\n+            }}>\n                 <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n                         border: '1px solid #808080',\n@@ -234,7 +249,24 @@\n                         ))}\n                     </div>\n                 </div>\n             </div>\n+\n+            {/* Grid Container */}\n+            <div className=\"bg-gray-300 p-2\" style={{\n+                border: '3px inset #c0c0c0'\n+            }}>\n+                <GameBoard\n+                    board={board}\n+                    onCellClick={onCellClick}\n+                    onRightClick={onRightClick}\n+                    onCellMouseDown={onCellMouseDown}\n+                    onCellMouseUp={onCellMouseUp}\n+                    onCellMouseEnter={onCellMouseEnter}\n+                    gameOver={gameOver}\n+                    gameWon={gameWon}\n+                    isDragging={isDragging}\n+                />\n+            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756317423940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n 'use client';\n \n import React, { useState, useEffect } from 'react';\n-import { GameBoard } from './GameBoard';\n \n interface GameStatsProps {\n     mineCount: number;\n     flaggedCount: number;\n@@ -11,15 +10,8 @@\n     gameOver: boolean;\n     gameWon: boolean;\n     onResetGame: () => void;\n     isAnyCellPressed: boolean;\n-    board: any[][];\n-    onCellClick: (row: number, col: number) => void;\n-    onRightClick: (row: number, col: number) => void;\n-    onCellMouseDown: (row: number, col: number) => void;\n-    onCellMouseUp: (row: number, col: number) => void;\n-    onCellMouseEnter: (row: number, col: number) => void;\n-    isDragging: boolean;\n }\n \n export const GameStats: React.FC<GameStatsProps> = ({\n     mineCount,\n@@ -28,16 +20,9 @@\n     endTime,\n     gameOver,\n     gameWon,\n     onResetGame,\n-    isAnyCellPressed,\n-    board,\n-    onCellClick,\n-    onRightClick,\n-    onCellMouseDown,\n-    onCellMouseUp,\n-    onCellMouseEnter,\n-    isDragging\n+    isAnyCellPressed\n }) => {\n     const [currentTime, setCurrentTime] = useState<number>(Date.now());\n \n     useEffect(() => {\n@@ -180,13 +165,13 @@\n \n     const remainingMines = mineCount - flaggedCount;\n \n     return (\n-        <div className=\"flex flex-col space-y-2\">\n-            {/* Counters and Smiley Face Row */}\n-            <div className=\"bg-gray-300 p-2\" style={{\n-                border: '3px inset #c0c0c0'\n-            }}>\n+        <div className=\"bg-gray-300 p-4\" style={{\n+            border: '3px inset #c0c0c0'\n+        }}>\n+            {/* Container for Counters and Smiley Face */}\n+            <div className=\"p-3\">\n                 <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n                         border: '1px solid #808080',\n@@ -249,24 +234,7 @@\n                         ))}\n                     </div>\n                 </div>\n             </div>\n-\n-            {/* Grid Container */}\n-            <div className=\"bg-gray-300 p-2\" style={{\n-                border: '3px inset #c0c0c0'\n-            }}>\n-                <GameBoard\n-                    board={board}\n-                    onCellClick={onCellClick}\n-                    onRightClick={onRightClick}\n-                    onCellMouseDown={onCellMouseDown}\n-                    onCellMouseUp={onCellMouseUp}\n-                    onCellMouseEnter={onCellMouseEnter}\n-                    gameOver={gameOver}\n-                    gameWon={gameWon}\n-                    isDragging={isDragging}\n-                />\n-            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756317972579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n             border: '3px inset #c0c0c0'\n         }}>\n             {/* Container for Counters and Smiley Face */}\n             <div className=\"p-3\">\n-                <div className=\"flex justify-between items-center\">\n+                <div className=\"flex justify-between items-center px-4 py-2\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div className=\"px-2 py-1\" style={{\n                         border: '1px solid #808080',\n                         minWidth: '42px',\n@@ -212,9 +212,8 @@\n                             e.currentTarget.style.borderTopColor = '#ffffff';\n                         }}\n                         onMouseLeave={(e) => {\n                             e.currentTarget.style.border = '2px outset #c0c0c0';\n-                            e.currentTarget.style.borderLeftColor = '#ffffff';\n                             e.currentTarget.style.borderTopColor = '#ffffff';\n                         }}\n                     >\n                         {getSmileyFace()}\n"
                },
                {
                    "date": 1756318189127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,16 +170,16 @@\n             border: '3px inset #c0c0c0'\n         }}>\n             {/* Container for Counters and Smiley Face */}\n             <div className=\"p-3\">\n-                <div className=\"flex justify-between items-center px-4 py-2\">\n+                <div className=\"flex justify-between items-center\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n-                    <div className=\"px-2 py-1\" style={{\n+                    <div style={{\n                         border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n-                        padding: '3px 4px',\n+                        padding: '8px 12px',\n                         background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                     }}>\n                         {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n                             <LEDDigit key={index} digit={digit} />\n@@ -190,17 +190,18 @@\n                     <button\n                         onClick={onResetGame}\n                         className=\"text-2xl\"\n                         style={{\n-                            width: '32px',\n-                            height: '32px',\n+                            width: '40px',\n+                            height: '40px',\n                             border: '2px outset #c0c0c0',\n                             borderLeftColor: '#ffffff',\n                             borderTopColor: '#ffffff',\n                             backgroundColor: '#c0c0c0',\n                             fontFamily: 'MS Sans Serif, Arial, sans-serif',\n-                            fontSize: '16px',\n-                            cursor: 'pointer'\n+                            fontSize: '18px',\n+                            cursor: 'pointer',\n+                            padding: '8px'\n                         }}\n                         onMouseDown={(e) => {\n                             e.currentTarget.style.border = '2px inset #c0c0c0';\n                             e.currentTarget.style.borderLeftColor = '#808080';\n@@ -219,14 +220,14 @@\n                         {getSmileyFace()}\n                     </button>\n \n                     {/* Timer - Classic Windows 95 LED Display */}\n-                    <div className=\"px-2 py-1\" style={{\n+                    <div style={{\n                         border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n-                        padding: '3px 4px',\n+                        padding: '8px 12px',\n                         background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                     }}>\n                         {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n                             <LEDDigit key={index} digit={digit} />\n"
                },
                {
                    "date": 1756318313901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,16 +170,16 @@\n             border: '3px inset #c0c0c0'\n         }}>\n             {/* Container for Counters and Smiley Face */}\n             <div className=\"p-3\">\n-                <div className=\"flex justify-between items-center\">\n+                <div className=\"flex justify-between items-center p-4\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n                     <div style={{\n                         border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n-                        padding: '8px 12px',\n+                        padding: '3px 4px',\n                         background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                     }}>\n                         {formatDigitalDisplay(remainingMines).split('').map((digit, index) => (\n                             <LEDDigit key={index} digit={digit} />\n@@ -190,18 +190,17 @@\n                     <button\n                         onClick={onResetGame}\n                         className=\"text-2xl\"\n                         style={{\n-                            width: '40px',\n-                            height: '40px',\n+                            width: '32px',\n+                            height: '32px',\n                             border: '2px outset #c0c0c0',\n                             borderLeftColor: '#ffffff',\n                             borderTopColor: '#ffffff',\n                             backgroundColor: '#c0c0c0',\n                             fontFamily: 'MS Sans Serif, Arial, sans-serif',\n-                            fontSize: '18px',\n-                            cursor: 'pointer',\n-                            padding: '8px'\n+                            fontSize: '16px',\n+                            cursor: 'pointer'\n                         }}\n                         onMouseDown={(e) => {\n                             e.currentTarget.style.border = '2px inset #c0c0c0';\n                             e.currentTarget.style.borderLeftColor = '#808080';\n@@ -225,9 +224,9 @@\n                         border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n-                        padding: '8px 12px',\n+                        padding: '3px 4px',\n                         background: 'linear-gradient(to bottom, #000000 0%, #1a1a1a 100%)'\n                     }}>\n                         {formatDigitalDisplay(getElapsedTime()).split('').map((digit, index) => (\n                             <LEDDigit key={index} digit={digit} />\n"
                },
                {
                    "date": 1756318388813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,11 +170,11 @@\n             border: '3px inset #c0c0c0'\n         }}>\n             {/* Container for Counters and Smiley Face */}\n             <div className=\"p-3\">\n-                <div className=\"flex justify-between items-center p-4\">\n+                <div className=\"flex justify-between items-center px-4 py-2\">\n                     {/* Mine Counter - Classic Windows 95 LED Display */}\n-                    <div style={{\n+                    <div className=\"px-2 py-1\" style={{\n                         border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n@@ -219,9 +219,9 @@\n                         {getSmileyFace()}\n                     </button>\n \n                     {/* Timer - Classic Windows 95 LED Display */}\n-                    <div style={{\n+                    <div className=\"px-2 py-1\" style={{\n                         border: '1px solid #808080',\n                         minWidth: '42px',\n                         textAlign: 'center',\n                         backgroundColor: '#000000',\n"
                }
            ],
            "date": 1756292593865,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\ninterface GameStatsProps {\r\n    mineCount: number;\r\n    flaggedCount: number;\r\n    startTime: number | null;\r\n    endTime: number | null;\r\n    gameOver: boolean;\r\n    gameWon: boolean;\r\n    onResetGame: () => void;\r\n}\r\n\r\nexport const GameStats: React.FC<GameStatsProps> = ({\r\n    mineCount,\r\n    flaggedCount,\r\n    startTime,\r\n    endTime,\r\n    gameOver,\r\n    gameWon,\r\n    onResetGame\r\n}) => {\r\n    const [currentTime, setCurrentTime] = useState<number>(Date.now());\r\n\r\n    useEffect(() => {\r\n        if (startTime && !gameOver && !gameWon) {\r\n            const interval = setInterval(() => {\r\n                setCurrentTime(Date.now());\r\n            }, 1000);\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [startTime, gameOver, gameWon]);\r\n\r\n    const getElapsedTime = () => {\r\n        if (!startTime) return 0;\r\n        const end = endTime || currentTime;\r\n        return Math.floor((end - startTime) / 1000);\r\n    };\r\n\r\n    const formatDigitalDisplay = (num: number, digits: number = 3) => {\r\n        return Math.min(999, Math.max(0, num)).toString().padStart(digits, '0');\r\n    };\r\n\r\n    const getSmileyFace = () => {\r\n        if (gameWon) return 'ðŸ˜Ž';\r\n        if (gameOver) return 'ðŸ˜µ';\r\n        return 'ðŸ™‚';\r\n    };\r\n\r\n    const remainingMines = mineCount - flaggedCount;\r\n\r\n    return (\r\n        <div className=\"bg-gray-300 p-2 mb-2\" style={{\r\n            border: '2px inset #c0c0c0'\r\n        }}>\r\n            <div className=\"flex justify-between items-center\">\r\n                {/* Mine Counter */}\r\n                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\r\n                    border: '1px inset #808080',\r\n                    minWidth: '60px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    {formatDigitalDisplay(remainingMines)}\r\n                </div>\r\n\r\n                {/* Smiley Face Button */}\r\n                <button\r\n                    onClick={onResetGame}\r\n                    className=\"w-12 h-12 text-2xl bg-gray-300 hover:bg-gray-400 active:bg-gray-500\"\r\n                    style={{\r\n                        border: '2px outset #c0c0c0'\r\n                    }}\r\n                    onMouseDown={(e) => {\r\n                        e.currentTarget.style.border = '2px inset #c0c0c0';\r\n                    }}\r\n                    onMouseUp={(e) => {\r\n                        e.currentTarget.style.border = '2px outset #c0c0c0';\r\n                    }}\r\n                    onMouseLeave={(e) => {\r\n                        e.currentTarget.style.border = '2px outset #c0c0c0';\r\n                    }}\r\n                >\r\n                    {getSmileyFace()}\r\n                </button>\r\n\r\n                {/* Timer */}\r\n                <div className=\"bg-black text-red-500 px-2 py-1 font-mono text-xl font-bold\" style={{\r\n                    border: '1px inset #808080',\r\n                    minWidth: '60px',\r\n                    textAlign: 'center'\r\n                }}>\r\n                    {formatDigitalDisplay(getElapsedTime())}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"
        }
    ]
}