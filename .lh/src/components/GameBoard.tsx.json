{
    "sourceFile": "src/components/GameBoard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1756284470228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756284692299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,10 @@\n         return 'grid-cols-30';\r\n     };\r\n \r\n     return (\r\n-        <div className=\"mt-6 flex justify-center items-center w-full px-4\">\r\n-            <div className={`grid ${getGridCols()} gap-1 md:gap-2 p-4 md:p-6 bg-gradient-to-br from-gray-800 to-gray-900 rounded-lg border-2 border-gray-600 shadow-xl max-w-full overflow-auto game-board backdrop-blur-sm relative`}>\r\n-                <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-gray-700/20 to-transparent pointer-events-none rounded-lg\"></div>\r\n+        <div className=\"mt-6 flex justify-center\">\r\n+            <div className={`grid ${getGridCols()} gap-1 p-4 bg-gray-800 rounded-lg border-2 border-gray-600`}>\r\n                 {board.map((row, rowIndex) =>\r\n                     row.map((cell) => (\r\n                         <GameCell\r\n                             key={cell.id}\r\n"
                },
                {
                    "date": 1756284817300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n         return 'grid-cols-30';\r\n     };\r\n \r\n     return (\r\n-        <div className=\"mt-6 flex justify-center\">\r\n-            <div className={`grid ${getGridCols()} gap-1 p-4 bg-gray-800 rounded-lg border-2 border-gray-600`}>\r\n+        <div className=\"mt-6 flex justify-center overflow-auto\">\r\n+            <div className={`grid ${getGridCols()} gap-1 p-6 bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg`}>\r\n                 {board.map((row, rowIndex) =>\r\n                     row.map((cell) => (\r\n                         <GameCell\r\n                             key={cell.id}\r\n"
                },
                {
                    "date": 1756285074685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,11 +35,29 @@\n         if (cols <= 16) return 'grid-cols-16';\r\n         return 'grid-cols-30';\r\n     };\r\n \r\n+    const getGridStyle = () => {\r\n+        if (board.length === 0) return {};\r\n+        const cols = board[0].length;\r\n+        const rows = board.length;\r\n+\r\n+        // Calculate cell size based on screen size\r\n+        let cellSize = 64; // Default for large screens\r\n+        if (window.innerWidth < 640) cellSize = 48; // Mobile\r\n+        else if (window.innerWidth < 1024) cellSize = 56; // Tablet\r\n+\r\n+        return {\r\n+            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\r\n+            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\r\n+            width: `${cols * cellSize + (cols - 1) * 4 + 48}px`, // cols * cellSize + gaps + padding\r\n+            height: `${rows * cellSize + (rows - 1) * 4 + 48}px`  // rows * cellSize + gaps + padding\r\n+        };\r\n+    };\r\n+\r\n     return (\r\n         <div className=\"mt-6 flex justify-center overflow-auto\">\r\n-            <div className={`grid ${getGridCols()} gap-1 p-6 bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg`}>\r\n+            <div className=\"grid gap-1 p-6 bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\r\n                 {board.map((row, rowIndex) =>\r\n                     row.map((cell) => (\r\n                         <GameCell\r\n                             key={cell.id}\r\n"
                },
                {
                    "date": 1756285188953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,16 +48,16 @@\n \r\n         return {\r\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\r\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\r\n-            width: `${cols * cellSize + (cols - 1) * 4 + 48}px`, // cols * cellSize + gaps + padding\r\n-            height: `${rows * cellSize + (rows - 1) * 4 + 48}px`  // rows * cellSize + gaps + padding\r\n+            width: `${cols * cellSize + (cols - 1) * 4}px`, // cols * cellSize + gaps only\r\n+            height: `${rows * cellSize + (rows - 1) * 4}px`  // rows * cellSize + gaps only\r\n         };\r\n     };\r\n \r\n     return (\r\n-        <div className=\"mt-6 flex justify-center overflow-auto\">\r\n-            <div className=\"grid gap-1 p-6 bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\r\n+        <div className=\"mt-6 flex justify-center\">\r\n+            <div className=\"grid gap-1 bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\r\n                 {board.map((row, rowIndex) =>\r\n                     row.map((cell) => (\r\n                         <GameCell\r\n                             key={cell.id}\r\n"
                },
                {
                    "date": 1756285235167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,19 +45,23 @@\n         let cellSize = 64; // Default for large screens\r\n         if (window.innerWidth < 640) cellSize = 48; // Mobile\r\n         else if (window.innerWidth < 1024) cellSize = 56; // Tablet\r\n \r\n+        // Calculate total dimensions including gaps\r\n+        const totalWidth = cols * cellSize + (cols - 1) * 4; // 4px gap between cells\r\n+        const totalHeight = rows * cellSize + (rows - 1) * 4;\r\n+\r\n         return {\r\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\r\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\r\n-            width: `${cols * cellSize + (cols - 1) * 4}px`, // cols * cellSize + gaps only\r\n-            height: `${rows * cellSize + (rows - 1) * 4}px`  // rows * cellSize + gaps only\r\n+            width: `${totalWidth}px`,\r\n+            height: `${totalHeight}px`\r\n         };\r\n     };\r\n \r\n     return (\r\n         <div className=\"mt-6 flex justify-center\">\r\n-            <div className=\"grid gap-1 bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\r\n+            <div className=\"grid bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\r\n                 {board.map((row, rowIndex) =>\r\n                     row.map((cell) => (\r\n                         <GameCell\r\n                             key={cell.id}\r\n"
                },
                {
                    "date": 1756285291336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         if (window.innerWidth < 640) cellSize = 48; // Mobile\r\n         else if (window.innerWidth < 1024) cellSize = 56; // Tablet\r\n \r\n         // Calculate total dimensions including gaps\r\n-        const totalWidth = cols * cellSize + (cols - 1) * 4; // 4px gap between cells\r\n+        const totalWidth = cols * cellSize + (cols - 1) * 2; // 4px gap between cells\r\n         const totalHeight = rows * cellSize + (rows - 1) * 4;\r\n \r\n         return {\r\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\r\n"
                },
                {
                    "date": 1756285329721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,11 +45,11 @@\n         let cellSize = 64; // Default for large screens\r\n         if (window.innerWidth < 640) cellSize = 48; // Mobile\r\n         else if (window.innerWidth < 1024) cellSize = 56; // Tablet\r\n \r\n-        // Calculate total dimensions including gaps\r\n-        const totalWidth = cols * cellSize + (cols - 1) * 2; // 4px gap between cells\r\n-        const totalHeight = rows * cellSize + (rows - 1) * 4;\r\n+        // Calculate total dimensions (no gaps)\r\n+        const totalWidth = cols * cellSize;\r\n+        const totalHeight = rows * cellSize;\r\n \r\n         return {\r\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\r\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\r\n"
                },
                {
                    "date": 1756287129979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,79 @@\n-'use client';\r\n-\r\n-import React from 'react';\r\n-import { Cell } from './MinesweeperGame';\r\n-import { GameCell } from './GameCell';\r\n-\r\n-interface GameBoardProps {\r\n-    board: Cell[][];\r\n-    onCellClick: (row: number, col: number) => void;\r\n-    onRightClick: (row: number, col: number) => void;\r\n-    gameOver: boolean;\r\n-    gameWon: boolean;\r\n-}\r\n-\r\n-export const GameBoard: React.FC<GameBoardProps> = ({\r\n-    board,\r\n-    onCellClick,\r\n-    onRightClick,\r\n-    gameOver,\r\n-    gameWon\r\n-}) => {\r\n-    const handleCellClick = (row: number, col: number) => {\r\n-        onCellClick(row, col);\r\n-    };\r\n-\r\n-    const handleRightClick = (e: React.MouseEvent, row: number, col: number) => {\r\n-        e.preventDefault();\r\n-        onRightClick(row, col);\r\n-    };\r\n-\r\n-    const getGridCols = () => {\r\n-        if (board.length === 0) return 'grid-cols-9';\r\n-        const cols = board[0].length;\r\n-        if (cols <= 9) return 'grid-cols-9';\r\n-        if (cols <= 16) return 'grid-cols-16';\r\n-        return 'grid-cols-30';\r\n-    };\r\n-\r\n-    const getGridStyle = () => {\r\n-        if (board.length === 0) return {};\r\n-        const cols = board[0].length;\r\n-        const rows = board.length;\r\n-\r\n-        // Calculate cell size based on screen size\r\n-        let cellSize = 64; // Default for large screens\r\n-        if (window.innerWidth < 640) cellSize = 48; // Mobile\r\n-        else if (window.innerWidth < 1024) cellSize = 56; // Tablet\r\n-\r\n-        // Calculate total dimensions (no gaps)\r\n-        const totalWidth = cols * cellSize;\r\n-        const totalHeight = rows * cellSize;\r\n-\r\n-        return {\r\n-            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\r\n-            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\r\n-            width: `${totalWidth}px`,\r\n-            height: `${totalHeight}px`\r\n-        };\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"mt-6 flex justify-center\">\r\n-            <div className=\"grid bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\r\n-                {board.map((row, rowIndex) =>\r\n-                    row.map((cell) => (\r\n-                        <GameCell\r\n-                            key={cell.id}\r\n-                            cell={cell}\r\n-                            onClick={() => handleCellClick(cell.row, cell.col)}\r\n-                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\r\n-                            gameOver={gameOver}\r\n-                            gameWon={gameWon}\r\n-                        />\r\n-                    ))\r\n-                )}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n+'use client';\n+\n+import React from 'react';\n+import { Cell } from './MinesweeperGame';\n+import { GameCell } from './GameCell';\n+\n+interface GameBoardProps {\n+    board: Cell[][];\n+    onCellClick: (row: number, col: number) => void;\n+    onRightClick: (row: number, col: number) => void;\n+    gameOver: boolean;\n+    gameWon: boolean;\n+}\n+\n+export const GameBoard: React.FC<GameBoardProps> = ({\n+    board,\n+    onCellClick,\n+    onRightClick,\n+    gameOver,\n+    gameWon\n+}) => {\n+    const handleCellClick = (row: number, col: number) => {\n+        onCellClick(row, col);\n+    };\n+\n+    const handleRightClick = (e: React.MouseEvent, row: number, col: number) => {\n+        e.preventDefault();\n+        onRightClick(row, col);\n+    };\n+\n+    const getGridCols = () => {\n+        if (board.length === 0) return 'grid-cols-9';\n+        const cols = board[0].length;\n+        if (cols <= 9) return 'grid-cols-9';\n+        if (cols <= 16) return 'grid-cols-16';\n+        return 'grid-cols-30';\n+    };\n+\n+    const getGridStyle = () => {\n+        if (board.length === 0) return {};\n+        const cols = board[0].length;\n+        const rows = board.length;\n+\n+        // Calculate cell size based on screen size\n+        let cellSize = 64; // Default for large screens\n+        if (window.innerWidth < 640) cellSize = 48; // Mobile\n+        else if (window.innerWidth < 1024) cellSize = 56; // Tablet\n+\n+        // Calculate total dimensions (no gaps)\n+        const totalWidth = cols * cellSize;\n+        const totalHeight = rows * cellSize;\n+\n+        return {\n+            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n+            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n+            width: `${totalWidth}px`,\n+            height: `${totalHeight}px`\n+        };\n+    };\n+\n+    return (\n+        <div className=\"mt-6 flex justify-center\">\n+            <div className=\"grid bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\n+                {board.map((row, rowIndex) =>\n+                    row.map((cell) => (\n+                        <GameCell\n+                            key={cell.id}\n+                            cell={cell}\n+                            onClick={() => handleCellClick(cell.row, cell.col)}\n+                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                            gameOver={gameOver}\n+                            gameWon={gameWon}\n+                        />\n+                    ))\n+                )}\n+            </div>\n+        </div>\n+    );\n+};\n"
                },
                {
                    "date": 1756292417148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,40 +40,31 @@\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Calculate cell size based on screen size\n-        let cellSize = 64; // Default for large screens\n-        if (window.innerWidth < 640) cellSize = 48; // Mobile\n-        else if (window.innerWidth < 1024) cellSize = 56; // Tablet\n+        // Classic Minesweeper cell size (20px + 2px border = 22px total)\n+        const cellSize = 22;\n \n-        // Calculate total dimensions (no gaps)\n-        const totalWidth = cols * cellSize;\n-        const totalHeight = rows * cellSize;\n-\n         return {\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            width: `${totalWidth}px`,\n-            height: `${totalHeight}px`\n+            gap: '0px'\n         };\n     };\n \n     return (\n-        <div className=\"mt-6 flex justify-center\">\n-            <div className=\"grid bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\n-                {board.map((row, rowIndex) =>\n-                    row.map((cell) => (\n-                        <GameCell\n-                            key={cell.id}\n-                            cell={cell}\n-                            onClick={() => handleCellClick(cell.row, cell.col)}\n-                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                            gameOver={gameOver}\n-                            gameWon={gameWon}\n-                        />\n-                    ))\n-                )}\n-            </div>\n+        <div className=\"grid bg-gray-300 p-1\" style={getGridStyle()}>\n+            {board.map((row, rowIndex) =>\n+                row.map((cell) => (\n+                    <GameCell\n+                        key={cell.id}\n+                        cell={cell}\n+                        onClick={() => handleCellClick(cell.row, cell.col)}\n+                        onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                        gameOver={gameOver}\n+                        gameWon={gameWon}\n+                    />\n+                ))\n+            )}\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756292452567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,31 +40,40 @@\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Classic Minesweeper cell size (20px + 2px border = 22px total)\n-        const cellSize = 22;\n+        // Calculate cell size based on screen size\n+        let cellSize = 64; // Default for large screens\n+        if (window.innerWidth < 640) cellSize = 48; // Mobile\n+        else if (window.innerWidth < 1024) cellSize = 56; // Tablet\n \n+        // Calculate total dimensions (no gaps)\n+        const totalWidth = cols * cellSize;\n+        const totalHeight = rows * cellSize;\n+\n         return {\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            gap: '0px'\n+            width: `${totalWidth}px`,\n+            height: `${totalHeight}px`\n         };\n     };\n \n     return (\n-        <div className=\"grid bg-gray-300 p-1\" style={getGridStyle()}>\n-            {board.map((row, rowIndex) =>\n-                row.map((cell) => (\n-                    <GameCell\n-                        key={cell.id}\n-                        cell={cell}\n-                        onClick={() => handleCellClick(cell.row, cell.col)}\n-                        onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                        gameOver={gameOver}\n-                        gameWon={gameWon}\n-                    />\n-                ))\n-            )}\n+        <div className=\"mt-6 flex justify-center\">\n+            <div className=\"grid bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\n+                {board.map((row, rowIndex) =>\n+                    row.map((cell) => (\n+                        <GameCell\n+                            key={cell.id}\n+                            cell={cell}\n+                            onClick={() => handleCellClick(cell.row, cell.col)}\n+                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                            gameOver={gameOver}\n+                            gameWon={gameWon}\n+                        />\n+                    ))\n+                )}\n+            </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756292593473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,28 +40,23 @@\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Calculate cell size based on screen size\n-        let cellSize = 64; // Default for large screens\n-        if (window.innerWidth < 640) cellSize = 48; // Mobile\n-        else if (window.innerWidth < 1024) cellSize = 56; // Tablet\n+        // Classic Minesweeper cell size\n+        const cellSize = 20;\n \n-        // Calculate total dimensions (no gaps)\n-        const totalWidth = cols * cellSize;\n-        const totalHeight = rows * cellSize;\n-\n         return {\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            width: `${totalWidth}px`,\n-            height: `${totalHeight}px`\n+            gap: '0px'\n         };\n     };\n \n     return (\n-        <div className=\"mt-6 flex justify-center\">\n-            <div className=\"grid bg-gray-800 rounded-lg border-2 border-gray-600 shadow-lg\" style={getGridStyle()}>\n+        <div className=\"bg-gray-300\" style={{\n+            border: '3px inset #c0c0c0'\n+        }}>\n+            <div className=\"grid\" style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n                         <GameCell\n                             key={cell.id}\n"
                },
                {
                    "date": 1756293019916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,8 @@\n         e.preventDefault();\n         onRightClick(row, col);\n     };\n \n-    const getGridCols = () => {\n-        if (board.length === 0) return 'grid-cols-9';\n-        const cols = board[0].length;\n-        if (cols <= 9) return 'grid-cols-9';\n-        if (cols <= 16) return 'grid-cols-16';\n-        return 'grid-cols-30';\n-    };\n-\n     const getGridStyle = () => {\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n@@ -44,8 +36,9 @@\n         // Classic Minesweeper cell size\n         const cellSize = 20;\n \n         return {\n+            display: 'grid',\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n             gap: '0px'\n         };\n@@ -54,9 +47,9 @@\n     return (\n         <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n-            <div className=\"grid\" style={getGridStyle()}>\n+            <div style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n                         <GameCell\n                             key={cell.id}\n"
                },
                {
                    "date": 1756293139457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,22 +32,25 @@\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Classic Minesweeper cell size\n+        // Classic Minesweeper cell size - no gaps between cells\n         const cellSize = 20;\n \n         return {\n             display: 'grid',\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            gap: '0px'\n+            gap: '0',\n+            width: `${cols * cellSize}px`,\n+            height: `${rows * cellSize}px`\n         };\n     };\n \n     return (\n         <div className=\"bg-gray-300\" style={{\n-            border: '3px inset #c0c0c0'\n+            border: '3px inset #c0c0c0',\n+            display: 'inline-block'\n         }}>\n             <div style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n"
                },
                {
                    "date": 1756293281134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Classic Minesweeper cell size - no gaps between cells\n+        // Classic Minesweeper cell size\n         const cellSize = 20;\n \n         return {\n             display: 'grid',\n@@ -47,10 +47,9 @@\n     };\n \n     return (\n         <div className=\"bg-gray-300\" style={{\n-            border: '3px inset #c0c0c0',\n-            display: 'inline-block'\n+            border: '3px inset #c0c0c0'\n         }}>\n             <div style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n"
                },
                {
                    "date": 1756293424971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Classic Minesweeper cell size\n+        // Classic Minesweeper cell size - exactly 20px with no gaps\n         const cellSize = 20;\n \n         return {\n             display: 'grid',\n@@ -46,10 +46,11 @@\n         };\n     };\n \n     return (\n-        <div className=\"bg-gray-300\" style={{\n-            border: '3px inset #c0c0c0'\n+        <div className=\"bg-gray-300 inline-block\" style={{\n+            border: '3px inset #c0c0c0',\n+            padding: '0'\n         }}>\n             <div style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n"
                },
                {
                    "date": 1756293909445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,25 +32,24 @@\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Classic Minesweeper cell size - exactly 20px with no gaps\n+        // Classic Minesweeper cell size\n         const cellSize = 20;\n \n         return {\n             display: 'grid',\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            gap: '0',\n+            gap: '0px',\n             width: `${cols * cellSize}px`,\n             height: `${rows * cellSize}px`\n         };\n     };\n \n     return (\n-        <div className=\"bg-gray-300 inline-block\" style={{\n-            border: '3px inset #c0c0c0',\n-            padding: '0'\n+        <div className=\"bg-gray-300\" style={{\n+            border: '3px inset #c0c0c0'\n         }}>\n             <div style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n"
                },
                {
                    "date": 1756294195127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,43 +27,55 @@\n         e.preventDefault();\n         onRightClick(row, col);\n     };\n \n-    const getGridStyle = () => {\n+    const getContainerStyle = () => {\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n+        // Debug: Log actual board dimensions\n+        console.log('Board dimensions:', { rows, cols });\n+        console.log('Total cells:', board.flat().length);\n+\n         // Classic Minesweeper cell size\n         const cellSize = 20;\n \n         return {\n-            display: 'grid',\n-            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n-            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            gap: '0px',\n             width: `${cols * cellSize}px`,\n             height: `${rows * cellSize}px`\n         };\n     };\n \n+    const getRowStyle = () => {\n+        return {\n+            display: 'flex',\n+            flexDirection: 'row' as const\n+        };\n+    };\n+\n     return (\n         <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n-            <div style={getGridStyle()}>\n-                {board.map((row, rowIndex) =>\n-                    row.map((cell) => (\n-                        <GameCell\n-                            key={cell.id}\n-                            cell={cell}\n-                            onClick={() => handleCellClick(cell.row, cell.col)}\n-                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                            gameOver={gameOver}\n-                            gameWon={gameWon}\n-                        />\n-                    ))\n-                )}\n+            <div style={getContainerStyle()}>\n+                {board.map((row, rowIndex) => {\n+                    console.log(`Row ${rowIndex} has ${row.length} cells`);\n+                    return (\n+                        <div key={`row-${rowIndex}`} style={getRowStyle()}>\n+                            {row.map((cell) => (\n+                                <GameCell\n+                                    key={cell.id}\n+                                    cell={cell}\n+                                    onClick={() => handleCellClick(cell.row, cell.col)}\n+                                    onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                                    gameOver={gameOver}\n+                                    gameWon={gameWon}\n+                                />\n+                            ))}\n+                        </div>\n+                    );\n+                })}\n             </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756295745268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,55 +27,43 @@\n         e.preventDefault();\n         onRightClick(row, col);\n     };\n \n-    const getContainerStyle = () => {\n+    const getGridStyle = () => {\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n \n-        // Debug: Log actual board dimensions\n-        console.log('Board dimensions:', { rows, cols });\n-        console.log('Total cells:', board.flat().length);\n-\n         // Classic Minesweeper cell size\n         const cellSize = 20;\n \n         return {\n+            display: 'grid',\n+            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n+            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n+            gap: '0px',\n             width: `${cols * cellSize}px`,\n             height: `${rows * cellSize}px`\n         };\n     };\n \n-    const getRowStyle = () => {\n-        return {\n-            display: 'flex',\n-            flexDirection: 'row' as const\n-        };\n-    };\n-\n     return (\n         <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n-            <div style={getContainerStyle()}>\n-                {board.map((row, rowIndex) => {\n-                    console.log(`Row ${rowIndex} has ${row.length} cells`);\n-                    return (\n-                        <div key={`row-${rowIndex}`} style={getRowStyle()}>\n-                            {row.map((cell) => (\n-                                <GameCell\n-                                    key={cell.id}\n-                                    cell={cell}\n-                                    onClick={() => handleCellClick(cell.row, cell.col)}\n-                                    onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                                    gameOver={gameOver}\n-                                    gameWon={gameWon}\n-                                />\n-                            ))}\n-                        </div>\n-                    );\n-                })}\n+            <div style={getGridStyle()}>\n+                {board.map((row, rowIndex) =>\n+                    row.map((cell) => (\n+                        <GameCell\n+                            key={cell.id}\n+                            cell={cell}\n+                            onClick={() => handleCellClick(cell.row, cell.col)}\n+                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                            gameOver={gameOver}\n+                            gameWon={gameWon}\n+                        />\n+                    ))\n+                )}\n             </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756295821109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,34 +36,38 @@\n         // Classic Minesweeper cell size\n         const cellSize = 20;\n \n         return {\n-            display: 'grid',\n-            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n-            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            gap: '0px',\n+            display: 'inline-block',\n             width: `${cols * cellSize}px`,\n             height: `${rows * cellSize}px`\n         };\n     };\n \n+    const getRowStyle = () => ({\n+        display: 'flex',\n+        height: '20px'\n+    });\n+\n     return (\n         <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n             <div style={getGridStyle()}>\n-                {board.map((row, rowIndex) =>\n-                    row.map((cell) => (\n-                        <GameCell\n-                            key={cell.id}\n-                            cell={cell}\n-                            onClick={() => handleCellClick(cell.row, cell.col)}\n-                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                            gameOver={gameOver}\n-                            gameWon={gameWon}\n-                        />\n-                    ))\n-                )}\n+                {board.map((row, rowIndex) => (\n+                    <div key={`row-${rowIndex}`} style={getRowStyle()}>\n+                        {row.map((cell) => (\n+                            <GameCell\n+                                key={cell.id}\n+                                cell={cell}\n+                                onClick={() => handleCellClick(cell.row, cell.col)}\n+                                onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                                gameOver={gameOver}\n+                                gameWon={gameWon}\n+                            />\n+                        ))}\n+                    </div>\n+                ))}\n             </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756295954909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,38 +36,34 @@\n         // Classic Minesweeper cell size\n         const cellSize = 20;\n \n         return {\n-            display: 'inline-block',\n+            display: 'grid',\n+            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n+            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n+            gap: '0px',\n             width: `${cols * cellSize}px`,\n             height: `${rows * cellSize}px`\n         };\n     };\n \n-    const getRowStyle = () => ({\n-        display: 'flex',\n-        height: '20px'\n-    });\n-\n     return (\n-        <div className=\"bg-gray-300\" style={{\n+        <div className=\"bg-gray-300 inline-block\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n             <div style={getGridStyle()}>\n-                {board.map((row, rowIndex) => (\n-                    <div key={`row-${rowIndex}`} style={getRowStyle()}>\n-                        {row.map((cell) => (\n-                            <GameCell\n-                                key={cell.id}\n-                                cell={cell}\n-                                onClick={() => handleCellClick(cell.row, cell.col)}\n-                                onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                                gameOver={gameOver}\n-                                gameWon={gameWon}\n-                            />\n-                        ))}\n-                    </div>\n-                ))}\n+                {board.map((row, rowIndex) =>\n+                    row.map((cell) => (\n+                        <GameCell\n+                            key={cell.id}\n+                            cell={cell}\n+                            onClick={() => handleCellClick(cell.row, cell.col)}\n+                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                            gameOver={gameOver}\n+                            gameWon={gameWon}\n+                        />\n+                    ))\n+                )}\n             </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756296067738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,31 +27,21 @@\n         e.preventDefault();\n         onRightClick(row, col);\n     };\n \n-    const getGridStyle = () => {\n-        if (board.length === 0) return {};\n-        const cols = board[0].length;\n-        const rows = board.length;\n+    if (board.length === 0) return null;\n \n-        // Classic Minesweeper cell size\n-        const cellSize = 20;\n+    const cols = board[0].length;\n \n-        return {\n-            display: 'grid',\n-            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n-            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            gap: '0px',\n-            width: `${cols * cellSize}px`,\n-            height: `${rows * cellSize}px`\n-        };\n-    };\n-\n     return (\n         <div className=\"bg-gray-300 inline-block\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n-            <div style={getGridStyle()}>\n+            <div style={{\n+                display: 'grid',\n+                gridTemplateColumns: `repeat(${cols}, 20px)`,\n+                gap: '0'\n+            }}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n                         <GameCell\n                             key={cell.id}\n"
                },
                {
                    "date": 1756296244509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,21 +27,30 @@\n         e.preventDefault();\n         onRightClick(row, col);\n     };\n \n-    if (board.length === 0) return null;\n+    const getGridStyle = () => {\n+        if (board.length === 0) return {};\n+        const cols = board[0].length;\n+        const rows = board.length;\n \n-    const cols = board[0].length;\n+        // Classic Minesweeper cell size\n+        const cellSize = 20;\n \n+        return {\n+            gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n+            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n+            gap: '0px',\n+            width: `${cols * cellSize}px`,\n+            height: `${rows * cellSize}px`\n+        };\n+    };\n+\n     return (\n         <div className=\"bg-gray-300 inline-block\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n-            <div style={{\n-                display: 'grid',\n-                gridTemplateColumns: `repeat(${cols}, 20px)`,\n-                gap: '0'\n-            }}>\n+            <div className=\"grid\" style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n                     row.map((cell) => (\n                         <GameCell\n                             key={cell.id}\n"
                },
                {
                    "date": 1756316238240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,18 +7,26 @@\n interface GameBoardProps {\n     board: Cell[][];\n     onCellClick: (row: number, col: number) => void;\n     onRightClick: (row: number, col: number) => void;\n+    onCellMouseDown: (row: number, col: number) => void;\n+    onCellMouseUp: (row: number, col: number) => void;\n+    onCellMouseEnter: (row: number, col: number) => void;\n     gameOver: boolean;\n     gameWon: boolean;\n+    isDragging: boolean;\n }\n \n export const GameBoard: React.FC<GameBoardProps> = ({\n     board,\n     onCellClick,\n     onRightClick,\n+    onCellMouseDown,\n+    onCellMouseUp,\n+    onCellMouseEnter,\n     gameOver,\n-    gameWon\n+    gameWon,\n+    isDragging\n }) => {\n     const handleCellClick = (row: number, col: number) => {\n         onCellClick(row, col);\n     };\n@@ -27,8 +35,28 @@\n         e.preventDefault();\n         onRightClick(row, col);\n     };\n \n+    const handleCellMouseDown = (row: number, col: number) => {\n+        onCellMouseDown(row, col);\n+    };\n+\n+    const handleCellMouseUp = (row: number, col: number) => {\n+        onCellMouseUp(row, col);\n+    };\n+\n+    const handleCellMouseEnter = (row: number, col: number) => {\n+        onCellMouseEnter(row, col);\n+    };\n+\n+    const getGridCols = () => {\n+        if (board.length === 0) return 'grid-cols-9';\n+        const cols = board[0].length;\n+        if (cols <= 9) return 'grid-cols-9';\n+        if (cols <= 16) return 'grid-cols-16';\n+        return 'grid-cols-30';\n+    };\n+\n     const getGridStyle = () => {\n         if (board.length === 0) return {};\n         const cols = board[0].length;\n         const rows = board.length;\n@@ -38,16 +66,14 @@\n \n         return {\n             gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n             gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\n-            gap: '0px',\n-            width: `${cols * cellSize}px`,\n-            height: `${rows * cellSize}px`\n+            gap: '0px'\n         };\n     };\n \n     return (\n-        <div className=\"bg-gray-300 inline-block\" style={{\n+        <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n             <div className=\"grid\" style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n@@ -56,10 +82,14 @@\n                             key={cell.id}\n                             cell={cell}\n                             onClick={() => handleCellClick(cell.row, cell.col)}\n                             onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                            onMouseDown={() => handleCellMouseDown(cell.row, cell.col)}\n+                            onMouseUp={() => handleCellMouseUp(cell.row, cell.col)}\n+                            onMouseEnter={() => handleCellMouseEnter(cell.row, cell.col)}\n                             gameOver={gameOver}\n                             gameWon={gameWon}\n+                            isDragging={isDragging}\n                         />\n                     ))\n                 )}\n             </div>\n"
                },
                {
                    "date": 1756317136686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,25 +74,27 @@\n     return (\n         <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n-            <div className=\"grid\" style={getGridStyle()}>\n-                {board.map((row, rowIndex) =>\n-                    row.map((cell) => (\n-                        <GameCell\n-                            key={cell.id}\n-                            cell={cell}\n-                            onClick={() => handleCellClick(cell.row, cell.col)}\n-                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                            onMouseDown={() => handleCellMouseDown(cell.row, cell.col)}\n-                            onMouseUp={() => handleCellMouseUp(cell.row, cell.col)}\n-                            onMouseEnter={() => handleCellMouseEnter(cell.row, cell.col)}\n-                            gameOver={gameOver}\n-                            gameWon={gameWon}\n-                            isDragging={isDragging}\n-                        />\n-                    ))\n-                )}\n+            <div className=\"p-4\">\n+                <div className=\"grid\" style={getGridStyle()}>\n+                    {board.map((row, rowIndex) =>\n+                        row.map((cell) => (\n+                            <GameCell\n+                                key={cell.id}\n+                                cell={cell}\n+                                onClick={() => handleCellClick(cell.row, cell.col)}\n+                                onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                                onMouseDown={() => handleCellMouseDown(cell.row, cell.col)}\n+                                onMouseUp={() => handleCellMouseUp(cell.row, cell.col)}\n+                                onMouseEnter={() => handleCellMouseEnter(cell.row, cell.col)}\n+                                gameOver={gameOver}\n+                                gameWon={gameWon}\n+                                isDragging={isDragging}\n+                            />\n+                        ))\n+                    )}\n+                </div>\n             </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756317193577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,27 +74,25 @@\n     return (\n         <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n-            <div className=\"p-4\">\n-                <div className=\"grid\" style={getGridStyle()}>\n-                    {board.map((row, rowIndex) =>\n-                        row.map((cell) => (\n-                            <GameCell\n-                                key={cell.id}\n-                                cell={cell}\n-                                onClick={() => handleCellClick(cell.row, cell.col)}\n-                                onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n-                                onMouseDown={() => handleCellMouseDown(cell.row, cell.col)}\n-                                onMouseUp={() => handleCellMouseUp(cell.row, cell.col)}\n-                                onMouseEnter={() => handleCellMouseEnter(cell.row, cell.col)}\n-                                gameOver={gameOver}\n-                                gameWon={gameWon}\n-                                isDragging={isDragging}\n-                            />\n-                        ))\n-                    )}\n-                </div>\n+            <div className=\"grid\" style={getGridStyle()}>\n+                {board.map((row, rowIndex) =>\n+                    row.map((cell) => (\n+                        <GameCell\n+                            key={cell.id}\n+                            cell={cell}\n+                            onClick={() => handleCellClick(cell.row, cell.col)}\n+                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\n+                            onMouseDown={() => handleCellMouseDown(cell.row, cell.col)}\n+                            onMouseUp={() => handleCellMouseUp(cell.row, cell.col)}\n+                            onMouseEnter={() => handleCellMouseEnter(cell.row, cell.col)}\n+                            gameOver={gameOver}\n+                            gameWon={gameWon}\n+                            isDragging={isDragging}\n+                        />\n+                    ))\n+                )}\n             </div>\n         </div>\n     );\n };\n"
                },
                {
                    "date": 1756317423954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         };\n     };\n \n     return (\n-        <div className=\"bg-gray-300\" style={{\n+        <div className=\"bg-gray-300 p-4\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n             <div className=\"grid\" style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n"
                },
                {
                    "date": 1756317468360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         };\n     };\n \n     return (\n-        <div className=\"bg-gray-300 p-4\" style={{\n+        <div className=\"bg-gray-300\" style={{\n             border: '3px inset #c0c0c0'\n         }}>\n             <div className=\"grid\" style={getGridStyle()}>\n                 {board.map((row, rowIndex) =>\n"
                }
            ],
            "date": 1756284470228,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport React from 'react';\r\nimport { Cell } from './MinesweeperGame';\r\nimport { GameCell } from './GameCell';\r\n\r\ninterface GameBoardProps {\r\n    board: Cell[][];\r\n    onCellClick: (row: number, col: number) => void;\r\n    onRightClick: (row: number, col: number) => void;\r\n    gameOver: boolean;\r\n    gameWon: boolean;\r\n}\r\n\r\nexport const GameBoard: React.FC<GameBoardProps> = ({\r\n    board,\r\n    onCellClick,\r\n    onRightClick,\r\n    gameOver,\r\n    gameWon\r\n}) => {\r\n    const handleCellClick = (row: number, col: number) => {\r\n        onCellClick(row, col);\r\n    };\r\n\r\n    const handleRightClick = (e: React.MouseEvent, row: number, col: number) => {\r\n        e.preventDefault();\r\n        onRightClick(row, col);\r\n    };\r\n\r\n    const getGridCols = () => {\r\n        if (board.length === 0) return 'grid-cols-9';\r\n        const cols = board[0].length;\r\n        if (cols <= 9) return 'grid-cols-9';\r\n        if (cols <= 16) return 'grid-cols-16';\r\n        return 'grid-cols-30';\r\n    };\r\n\r\n    return (\r\n        <div className=\"mt-6 flex justify-center items-center w-full px-4\">\r\n            <div className={`grid ${getGridCols()} gap-1 md:gap-2 p-4 md:p-6 bg-gradient-to-br from-gray-800 to-gray-900 rounded-lg border-2 border-gray-600 shadow-xl max-w-full overflow-auto game-board backdrop-blur-sm relative`}>\r\n                <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-gray-700/20 to-transparent pointer-events-none rounded-lg\"></div>\r\n                {board.map((row, rowIndex) =>\r\n                    row.map((cell) => (\r\n                        <GameCell\r\n                            key={cell.id}\r\n                            cell={cell}\r\n                            onClick={() => handleCellClick(cell.row, cell.col)}\r\n                            onRightClick={(e) => handleRightClick(e, cell.row, cell.col)}\r\n                            gameOver={gameOver}\r\n                            gameWon={gameWon}\r\n                        />\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"
        }
    ]
}